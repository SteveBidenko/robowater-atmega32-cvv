
AVRASM ver. 2.1.17  D:\MTECH\Контроллер\m32_2012_01_29\List\robowater.asm Wed Aug 01 11:08:05 2012

D:\MTECH\Контроллер\m32_2012_01_29\List\robowater.asm(1016): warning: Register r4 already defined by the .DEF directive
D:\MTECH\Контроллер\m32_2012_01_29\List\robowater.asm(1017): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.03.9 Standard
                 ;(C) Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 3,686400 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : No
                 ;char is unsigned       : Yes
                 ;global const stored in FLASH  : Yes
                 ;8 bit enums            : Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : Off
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _tmp_delta=R4
                 	.DEF _tap_angle_min=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 940c 0a95 	JMP  __RESET
000002 940c 1af9 	JMP  _ext_int0_isr
000004 940c 1b0d 	JMP  _ext_int1_isr
000006 940c 0ac5 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0b67 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0b4e 	JMP  _timer1_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0b4d 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _all_menu_str:
00002a eecf
00002b e5ec
00002c e5f9
00002d e8ed      	.DB  0xCF,0xEE,0xEC,0xE5,0xF9,0xE5,0xED,0xE8
00002e 20e5
00002f 0000
000030 0000
000031 0000      	.DB  0xE5,0x20,0x0,0x0,0x0,0x0,0x0,0x0
000032 c5d0
000033 c8c6
000034 20cc
000035 0000      	.DB  0xD0,0xC5,0xC6,0xC8,0xCC,0x20,0x0,0x0
000036 0000
000037 0000
000038 0000
000039 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00003a c5d1
00003b cec7
00003c 20cd
00003d 0000      	.DB  0xD1,0xC5,0xC7,0xCE,0xCD,0x20,0x0,0x0
00003e 0000
00003f 0000
000040 0000
000041 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000042 f1d3
000043 2ef2
000044 0020
000045 0000      	.DB  0xD3,0xF1,0xF2,0x2E,0x20,0x0,0x0,0x0
000046 0000
000047 0000
000048 0000
000049 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004a e0cf
00004b e0f0
00004c e5ec
00004d f0f2      	.DB  0xCF,0xE0,0xF0,0xE0,0xEC,0xE5,0xF2,0xF0
00004e 20fb
00004f 0000
000050 0000
000051 0000      	.DB  0xFB,0x20,0x0,0x0,0x0,0x0,0x0,0x0
000052 c2c0
000053 d0c0
000054 c9c8
000055 0020      	.DB  0xC0,0xC2,0xC0,0xD0,0xC8,0xC9,0x20,0x0
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a c0cd
00005b d2d1
00005c ced0
00005d cac9      	.DB  0xCD,0xC0,0xD1,0xD2,0xD0,0xCE,0xC9,0xCA
00005e 2ec0
00005f 2e2e
000060 0000
000061 0000      	.DB  0xC0,0x2E,0x2E,0x2E,0x0,0x0,0x0,0x0
000062 f1d3
000063 2ef2
000064 e0d7
000065 2ef1      	.DB  0xD3,0xF1,0xF2,0x2E,0xD7,0xE0,0xF1,0x2E
000066 0020
000067 0000
000068 0000
000069 0000      	.DB  0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006a f1d3
00006b 20f2
00006c e8cc
00006d 20ed      	.DB  0xD3,0xF1,0xF2,0x20,0xCC,0xE8,0xED,0x20
00006e 0000
00006f 0000
000070 0000
000071 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000072 f1d3
000073 2ef2
000074 e5e4
000075 fced      	.DB  0xD3,0xF1,0xF2,0x2E,0xE4,0xE5,0xED,0xFC
000076 202e
000077 0000
000078 0000
000079 0000      	.DB  0x2E,0x20,0x0,0x0,0x0,0x0,0x0,0x0
00007a f1d3
00007b 20f2
00007c e5cc
00007d 2ef1      	.DB  0xD3,0xF1,0xF2,0x20,0xCC,0xE5,0xF1,0x2E
00007e 0020
00007f 0000
000080 0000
000081 0000      	.DB  0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000082 f1d3
000083 20f2
000084 cec3
000085 2ec4      	.DB  0xD3,0xF1,0xF2,0x20,0xC3,0xCE,0xC4,0x2E
000086 0020
000087 0000
000088 0000
000089 0000      	.DB  0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008a cecf
00008b c5cc
00008c 2ed9
00008d 0020      	.DB  0xCF,0xCE,0xCC,0xC5,0xD9,0x2E,0x20,0x0
00008e 0000
00008f 0000
000090 0000
000091 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000092 cbd3
000093 d22e
000094 0020
000095 0000      	.DB  0xD3,0xCB,0x2E,0xD2,0x20,0x0,0x0,0x0
000096 0000
000097 0000
000098 0000
000099 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00009a f1d3
00009b 2ef2
00009c 20d2
00009d 0000      	.DB  0xD3,0xF1,0xF2,0x2E,0xD2,0x20,0x0,0x0
00009e 0000
00009f 0000
0000a0 0000
0000a1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000a2 eec2
0000a3 20e4
0000a4 d5c2
0000a5 202e      	.DB  0xC2,0xEE,0xE4,0x20,0xC2,0xD5,0x2E,0x20
0000a6 0000
0000a7 0000
0000a8 0000
0000a9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000aa eec2
0000ab 20e4
0000ac dbc2
0000ad 2ed5      	.DB  0xC2,0xEE,0xE4,0x20,0xC2,0xDB,0xD5,0x2E
0000ae 0000
0000af 0000
0000b0 0000
0000b1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000b2 d0ca
0000b3 cdc0
0000b4 0020
0000b5 0000      	.DB  0xCA,0xD0,0xC0,0xCD,0x20,0x0,0x0,0x0
0000b6 0000
0000b7 0000
0000b8 0000
0000b9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ba d1d3
0000bb 2ed2
0000bc d0ca
0000bd cdc0      	.DB  0xD3,0xD1,0xD2,0x2E,0xCA,0xD0,0xC0,0xCD
0000be 202e
0000bf 0000
0000c0 0000
0000c1 0000      	.DB  0x2E,0x20,0x0,0x0,0x0,0x0,0x0,0x0
0000c2 c5c2
0000c3 d2cd
0000c4 cbc8
0000c5 d2df      	.DB  0xC2,0xC5,0xCD,0xD2,0xC8,0xCB,0xDF,0xD2
0000c6 d0ce
0000c7 0020
0000c8 0000
0000c9 0000      	.DB  0xCE,0xD0,0x20,0x0,0x0,0x0,0x0,0x0
0000ca f1d3
0000cb 2ef2
0000cc c220
0000cd cdc5      	.DB  0xD3,0xF1,0xF2,0x2E,0x20,0xC2,0xC5,0xCD
0000ce 2ed2
0000cf 0020
0000d0 0000
0000d1 0000      	.DB  0xD2,0x2E,0x20,0x0,0x0,0x0,0x0,0x0
0000d2 c0c7
0000d3 cbd1
0000d4 202e
0000d5 0000      	.DB  0xC7,0xC0,0xD1,0xCB,0x2E,0x20,0x0,0x0
0000d6 0000
0000d7 0000
0000d8 0000
0000d9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000da c0cd
0000db ced1
0000dc 20d1
0000dd 0000      	.DB  0xCD,0xC0,0xD1,0xCE,0xD1,0x20,0x0,0x0
0000de 0000
0000df 0000
0000e0 0000
0000e1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000e2 4154
0000e3 4920
0000e4 204e
0000e5 694d      	.DB  0x54,0x41,0x20,0x49,0x4E,0x20,0x4D,0x69
0000e6 206e
0000e7 0000
0000e8 0000
0000e9 0000      	.DB  0x6E,0x20,0x0,0x0,0x0,0x0,0x0,0x0
0000ea 5754
0000eb 5320
0000ec 4f54
0000ed 2050      	.DB  0x54,0x57,0x20,0x53,0x54,0x4F,0x50,0x20
0000ee 0000
0000ef 0000
0000f0 0000
0000f1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000f2 5754
0000f3 4d20
0000f4 6e69
0000f5 0020      	.DB  0x54,0x57,0x20,0x4D,0x69,0x6E,0x20,0x0
0000f6 0000
0000f7 0000
0000f8 0000
0000f9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000fa 4154
0000fb 4d20
0000fc 6e69
0000fd 0020      	.DB  0x54,0x41,0x20,0x4D,0x69,0x6E,0x20,0x0
0000fe 0000
0000ff 0000
000100 0000
000101 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000102 d0cf
000103 c3ce
000104 c5d0
000105 20c2      	.DB  0xCF,0xD0,0xCE,0xC3,0xD0,0xC5,0xC2,0x20
000106 0000
000107 0000
000108 0000
000109 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00010a d0c2
00010b c82e
00010c d2cd
00010d 202e      	.DB  0xC2,0xD0,0x2E,0xC8,0xCD,0xD2,0x2E,0x20
00010e 0000
00010f 0000
000110 0000
000111 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000112 d3ca
000113 003d
000114 0000
000115 0000      	.DB  0xCA,0xD3,0x3D,0x0,0x0,0x0,0x0,0x0
000116 0000
000117 0000
000118 0000
000119 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00011a c8ca
00011b 003d
00011c 0000
00011d 0000      	.DB  0xCA,0xC8,0x3D,0x0,0x0,0x0,0x0,0x0
00011e 0000
00011f 0000
000120 0000
000121 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000122 c4ca
000123 003d
000124 0000
000125 0000      	.DB  0xCA,0xC4,0x3D,0x0,0x0,0x0,0x0,0x0
000126 0000
000127 0000
000128 0000
000129 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012a ecd1
00012b cf2e
00012c 3d2e
00012d 0000      	.DB  0xD1,0xEC,0x2E,0xCF,0x2E,0x3D,0x0,0x0
00012e 0000
00012f 0000
000130 0000
000131 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000132 ead8
000133 cf2e
000134 3d2e
000135 0000      	.DB  0xD8,0xEA,0x2E,0xCF,0x2E,0x3D,0x0,0x0
000136 0000
000137 0000
000138 0000
000139 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00013a ecd1
00013b d32e
00013c 2eeb
00013d 003d      	.DB  0xD1,0xEC,0x2E,0xD3,0xEB,0x2E,0x3D,0x0
00013e 0000
00013f 0000
000140 0000
000141 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000142 ead8
000143 d32e
000144 2eeb
000145 003d      	.DB  0xD8,0xEA,0x2E,0xD3,0xEB,0x2E,0x3D,0x0
000146 0000
000147 0000
000148 0000
000149 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00014a ecd1
00014b c22e
00014c f5c2
00014d 003d      	.DB  0xD1,0xEC,0x2E,0xC2,0xC2,0xF5,0x3D,0x0
00014e 0000
00014f 0000
000150 0000
000151 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000152 ead8
000153 c22e
000154 f5c2
000155 003d      	.DB  0xD8,0xEA,0x2E,0xC2,0xC2,0xF5,0x3D,0x0
000156 0000
000157 0000
000158 0000
000159 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00015a ecd1
00015b c22e
00015c fbc2
00015d 3df5      	.DB  0xD1,0xEC,0x2E,0xC2,0xC2,0xFB,0xF5,0x3D
00015e 0000
00015f 0000
000160 0000
000161 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000162 ead8
000163 c22e
000164 fbc2
000165 3df5      	.DB  0xD8,0xEA,0x2E,0xC2,0xC2,0xFB,0xF5,0x3D
000166 0000
000167 0000
000168 0000
000169 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00016a e5d1
00016b eee7
00016c 3ded
00016d 0000      	.DB  0xD1,0xE5,0xE7,0xEE,0xED,0x3D,0x0,0x0
00016e 0000
00016f 0000
000170 0000
000171 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000172 e0cf
000173 eef0
000174 fceb
000175 003d      	.DB  0xCF,0xE0,0xF0,0xEE,0xEB,0xFC,0x3D,0x0
000176 0000
000177 0000
000178 0000
000179 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _all_alerts:
00017a e5d2
00017b ecf0
00017c e7ee
00017d f9e0      	.DB  0xD2,0xE5,0xF0,0xEC,0xEE,0xE7,0xE0,0xF9
00017e f2e8
00017f 20e0
000180 0000
000181 0000      	.DB  0xE8,0xF2,0xE0,0x20,0x0,0x0,0x0,0x0
000182 e0c7
000183 e5ec
000184 e7f0
000185 ede0      	.DB  0xC7,0xE0,0xEC,0xE5,0xF0,0xE7,0xE0,0xED
000186 e5e8
000187 0020
000188 0000
000189 0000      	.DB  0xE8,0xE5,0x20,0x0,0x0,0x0,0x0,0x0
00018a e5d2
00018b efec
00018c e22e
00018d e7ee      	.DB  0xD2,0xE5,0xEC,0xEF,0x2E,0xE2,0xEE,0xE7
00018e 2ee4
00018f f5e2
000190 0020
000191 0000      	.DB  0xE4,0x2E,0xE2,0xF5,0x20,0x0,0x0,0x0
000192 2ed2
000193 eee2
000194 e4e7
000195 e22e      	.DB  0xD2,0x2E,0xE2,0xEE,0xE7,0xE4,0x2E,0xE2
000196 f5fb
000197 202e
000198 0000
000199 0000      	.DB  0xFB,0xF5,0x2E,0x20,0x0,0x0,0x0,0x0
00019a e5d2
00019b efec
00019c e22e
00019d e4ee      	.DB  0xD2,0xE5,0xEC,0xEF,0x2E,0xE2,0xEE,0xE4
00019e 20fb
00019f f5e2
0001a0 0020
0001a1 0000      	.DB  0xFB,0x20,0xE2,0xF5,0x20,0x0,0x0,0x0
0001a2 2ed2
0001a3 eee2
0001a4 fbe4
0001a5 e220      	.DB  0xD2,0x2E,0xE2,0xEE,0xE4,0xFB,0x20,0xE2
0001a6 f5fb
0001a7 002e
0001a8 0000
0001a9 0000      	.DB  0xFB,0xF5,0x2E,0x0,0x0,0x0,0x0,0x0
0001aa e5cd
0001ab 20f2
0001ac e2f1
0001ad e7ff      	.DB  0xCD,0xE5,0xF2,0x20,0xF1,0xE2,0xFF,0xE7
0001ae 20e8
0001af 0000
0001b0 0000
0001b1 0000      	.DB  0xE8,0x20,0x0,0x0,0x0,0x0,0x0,0x0
0001b2 e5cd
0001b3 20f2
0001b4 e5f2
0001b5 ecf0      	.DB  0xCD,0xE5,0xF2,0x20,0xF2,0xE5,0xF0,0xEC
0001b6 422e
0001b7 2031
0001b8 0000
0001b9 0000      	.DB  0x2E,0x42,0x31,0x20,0x0,0x0,0x0,0x0
0001ba e5cd
0001bb 20f2
0001bc e5f2
0001bd ecf0      	.DB  0xCD,0xE5,0xF2,0x20,0xF2,0xE5,0xF0,0xEC
0001be 422e
0001bf 2032
0001c0 0000
0001c1 0000      	.DB  0x2E,0x42,0x32,0x20,0x0,0x0,0x0,0x0
0001c2 e5cd
0001c3 20f2
0001c4 e5f2
0001c5 ecf0      	.DB  0xCD,0xE5,0xF2,0x20,0xF2,0xE5,0xF0,0xEC
0001c6 422e
0001c7 2033
0001c8 0000
0001c9 0000      	.DB  0x2E,0x42,0x33,0x20,0x0,0x0,0x0,0x0
0001ca e5cd
0001cb 20f2
0001cc e5f2
0001cd ecf0      	.DB  0xCD,0xE5,0xF2,0x20,0xF2,0xE5,0xF0,0xEC
0001ce 422e
0001cf 2034
0001d0 0000
0001d1 0000      	.DB  0x2E,0x42,0x34,0x20,0x0,0x0,0x0,0x0
0001d2 e8d4
0001d3 fceb
0001d4 f0f2
0001d5 0020      	.DB  0xD4,0xE8,0xEB,0xFC,0xF2,0xF0,0x20,0x0
0001d6 0000
0001d7 0000
0001d8 0000
0001d9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _tbl10_G101:
0001da 2710
0001db 03e8
0001dc 0064
0001dd 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
0001de 0001      	.DB  0x1,0x0
                 _tbl16_G101:
0001df 1000
0001e0 0100
0001e1 0010
0001e2 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;DATA STACK END MARKER INITIALIZATION
                 __DSTACK_END:
0001e3 5344
0001e4 4154
0001e5 4b43
0001e6 4e45
0001e7 0044      	.DB  'D','S','T','A','C','K','E','N','D',0
                 
                 ;HARDWARE STACK END MARKER INITIALIZATION
                 __HSTACK_END:
0001e8 5348
0001e9 4154
0001ea 4b43
0001eb 4e45
0001ec 0044      	.DB  'H','S','T','A','C','K','E','N','D',0
                 
                 _0x0:
0001ed d3cf
0001ee cad1
0001ef 0d20
0001f0 000a      	.DB  0xCF,0xD3,0xD1,0xCA,0x20,0xD,0xA,0x0
0001f1 eecf
0001f2 f1e8
0001f3 20ea
0001f4 f1e2      	.DB  0xCF,0xEE,0xE8,0xF1,0xEA,0x20,0xE2,0xF1
0001f5 f5e5
0001f6 f220
0001f7 f0e5
0001f8 eeec      	.DB  0xE5,0xF5,0x20,0xF2,0xE5,0xF0,0xEC,0xEE
0001f9 e5ec
0001fa f0f2
0001fb e2ee
0001fc ed20      	.DB  0xEC,0xE5,0xF2,0xF0,0xEE,0xE2,0x20,0xED
0001fd 20e0
0001fe e8f8
0001ff e5ed
000200 3120      	.DB  0xE0,0x20,0xF8,0xE8,0xED,0xE5,0x20,0x31
000201 572d
000202 7269
000203 2e65
000204 cd20      	.DB  0x2D,0x57,0x69,0x72,0x65,0x2E,0x20,0xCD
000205 e9e0
000206 e5e4
000207 eeed
000208 203a      	.DB  0xE0,0xE9,0xE4,0xE5,0xED,0xEE,0x3A,0x20
000209 2500
00020a 2064
00020b f2f8
00020c eaf3      	.DB  0x0,0x25,0x64,0x20,0xF8,0xF2,0xF3,0xEA
00020d 0a0d
00020e d100
00020f e0f2
000210 f2f0      	.DB  0xD,0xA,0x0,0xD1,0xF2,0xE0,0xF0,0xF2
000211 e820
000212 e8ed
000213 e8f6
000214 ebe0      	.DB  0x20,0xE8,0xED,0xE8,0xF6,0xE8,0xE0,0xEB
000215 e7e8
000216 f6e0
000217 e8e8
000218 ef20      	.DB  0xE8,0xE7,0xE0,0xF6,0xE8,0xE8,0x20,0xEF
000219 f0e5
00021a f4e8
00021b f0e5
00021c e8e8      	.DB  0xE5,0xF0,0xE8,0xF4,0xE5,0xF0,0xE8,0xE8
00021d 2e2e
00021e 0d2e
00021f 000a      	.DB  0x2E,0x2E,0x2E,0xD,0xA,0x0
                 _0x2001E:
000220 a041
000221 a142
000222 45e0
000223 a4a3      	.DB  0x41,0xA0,0x42,0xA1,0xE0,0x45,0xA3,0xA4
000224 a6a5
000225 a74b
000226 484d
000227 a84f      	.DB  0xA5,0xA6,0x4B,0xA7,0x4D,0x48,0x4F,0xA8
000228 4350
000229 a954
00022a 58aa
00022b abe1      	.DB  0x50,0x43,0x54,0xA9,0xAA,0x58,0xE1,0xAB
00022c e2ac
00022d aead
00022e afad
00022f b1b0      	.DB  0xAC,0xE2,0xAD,0xAE,0xAD,0xAF,0xB0,0xB1
000230 b261
000231 b4b3
000232 65e3
000233 b7b6      	.DB  0x61,0xB2,0xB3,0xB4,0xE3,0x65,0xB6,0xB7
000234 b9b8
000235 bbba
000236 bdbc
000237 be6f      	.DB  0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0x6F,0xBE
000238 6370
000239 79bf
00023a 78e4
00023b c0e5      	.DB  0x70,0x63,0xBF,0x79,0xE4,0x78,0xE5,0xC0
00023c e6c1
00023d c3c2
00023e c5c4
00023f c7c6      	.DB  0xC1,0xE6,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7
                 _0x40003:
000240 0000
000241 0000
000242 0000
D:\MTECH\Контроллер\m32_2012_01_29\List\robowater.asm(1193): warning: .cseg .db misalignment - padding zero byte
000243 0001      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x1
                 _0x40004:
000244 0000
000245 0000
000246 0000
000247 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000248 0000
000249 0000
00024a cdff
00024b 7f7f      	.DB  0x0,0x0,0x0,0x0,0xFF,0xCD,0x7F,0x7F
00024c 000a
00024d 0000
00024e 0000
00024f 00b4      	.DB  0xA,0x0,0x0,0x0,0x0,0x0,0xB4,0x0
000250 0064
000251 0640
000252 1388
000253 f830      	.DB  0x64,0x0,0x40,0x6,0x88,0x13,0x30,0xF8
000254 05dc
000255 0898
000256 0000
000257 0000      	.DB  0xDC,0x5,0x98,0x8,0x0,0x0,0x0,0x0
000258 0000
000259 0000
00025a 0000
00025b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00025c 0001
00025d 0400
00025e 9528
00025f 7e0f      	.DB  0x1,0x0,0x0,0x4,0x28,0x95,0xF,0x7E
000260 0003
000261 7200
000262 2801
000263 1ac1      	.DB  0x3,0x0,0x0,0x72,0x1,0x28,0xC1,0x1A
000264 037e
000265 0000
000266 012e
000267 1a28      	.DB  0x7E,0x3,0x0,0x0,0x2E,0x1,0x28,0x1A
000268 7e17
000269 0003
00026a fe00
00026b 2801      	.DB  0x17,0x7E,0x3,0x0,0x0,0xFE,0x1,0x28
00026c 2ae8
00026d 037e
00026e 0000
00026f 018a      	.DB  0xE8,0x2A,0x7E,0x3,0x0,0x0,0x8A,0x1
                 _0x4016C:
D:\MTECH\Контроллер\m32_2012_01_29\List\robowater.asm(1207): warning: .cseg .db misalignment - padding zero byte
000270 0000      	.DB  0x0
                 _0x40000:
000271 edc8
000272 f6e8
000273 e0e8
000274 e8eb      	.DB  0xC8,0xED,0xE8,0xF6,0xE8,0xE0,0xEB,0xE8
000275 e0e7
000276 e8f6
000277 20ff
000278 edea      	.DB  0xE7,0xE0,0xF6,0xE8,0xFF,0x20,0xEA,0xED
000279 efee
00027a eaee
00027b 2e2e
00027c 0d2e      	.DB  0xEE,0xEF,0xEE,0xEA,0x2E,0x2E,0x2E,0xD
00027d 000a
00027e f2d1
00027f f0e0
000280 20f2      	.DB  0xA,0x0,0xD1,0xF2,0xE0,0xF0,0xF2,0x20
000281 fccd
000282 f2fe
000283 edee
000284 20e0      	.DB  0xCD,0xFC,0xFE,0xF2,0xEE,0xED,0xE0,0x20
000285 e5ec
000286 e0f2
000287 eeeb
000288 e7e8      	.DB  0xEC,0xE5,0xF2,0xE0,0xEB,0xEE,0xE8,0xE7
000289 e5e4
00028a e8eb
00028b 20ff
00028c 32cf      	.DB  0xE4,0xE5,0xEB,0xE8,0xFF,0x20,0xCF,0x32
00028d 315f
00028e 202e
00028f 7525
000290 252e      	.DB  0x5F,0x31,0x2E,0x20,0x25,0x75,0x2E,0x25
000291 3230
000292 2e75
000293 cd20
000294 e9e0      	.DB  0x30,0x32,0x75,0x2E,0x20,0xCD,0xE0,0xE9
000295 e5e4
000296 eeed
000297 2520
000298 2075      	.DB  0xE4,0xE5,0xED,0xEE,0x20,0x25,0x75,0x20
000299 e5f2
00029a ecf0
00029b ecee
00029c f2e5      	.DB  0xF2,0xE5,0xF0,0xEC,0xEE,0xEC,0xE5,0xF2
00029d eef0
00029e 2ee2
00029f 0a0d
0002a0 c700      	.DB  0xF0,0xEE,0xE2,0x2E,0xD,0xA,0x0,0xC7
0002a1 efe0
0002a2 f1e8
0002a3 20fc
0002a4 20e2      	.DB  0xE0,0xEF,0xE8,0xF1,0xFC,0x20,0xE2,0x20
0002a5 4545
0002a6 5250
0002a7 4d4f
0002a8 e720      	.DB  0x45,0x45,0x50,0x52,0x4F,0x4D,0x20,0xE7
0002a9 e2e0
0002aa e4ee
0002ab eaf1
0002ac f5e8      	.DB  0xE0,0xE2,0xEE,0xE4,0xF1,0xEA,0xE8,0xF5
0002ad f320
0002ae f2f1
0002af ede0
0002b0 e2ee      	.DB  0x20,0xF3,0xF1,0xF2,0xE0,0xED,0xEE,0xE2
0002b1 eaee
0002b2 0d2e
0002b3 200a
0002b4 e5cd      	.DB  0xEE,0xEA,0x2E,0xD,0xA,0x20,0xCD,0xE5
0002b5 efee
0002b6 e7ee
0002b7 e0ed
0002b8 eded      	.DB  0xEE,0xEF,0xEE,0xE7,0xED,0xE0,0xED,0xED
0002b9 f5fb
0002ba f220
0002bb f0e5
0002bc eeec      	.DB  0xFB,0xF5,0x20,0xF2,0xE5,0xF0,0xEC,0xEE
0002bd e5ec
0002be f0f2
0002bf e2ee
0002c0 3d20      	.DB  0xEC,0xE5,0xF2,0xF0,0xEE,0xE2,0x20,0x3D
0002c1 2520
0002c2 0d75
0002c3 000a
0002c4 e0c7      	.DB  0x20,0x25,0x75,0xD,0xA,0x0,0xC7,0xE0
0002c5 e8ef
0002c6 fcf1
0002c7 e220
0002c8 4520      	.DB  0xEF,0xE8,0xF1,0xFC,0x20,0xE2,0x20,0x45
0002c9 5045
0002ca 4f52
0002cb 204d
0002cc f1f3      	.DB  0x45,0x50,0x52,0x4F,0x4D,0x20,0xF3,0xF1
0002cd e0f2
0002ce eeed
0002cf eee2
0002d0 20ea      	.DB  0xF2,0xE0,0xED,0xEE,0xE2,0xEE,0xEA,0x20
0002d1 eeef
0002d2 f320
0002d3 eeec
0002d4 f7eb      	.DB  0xEF,0xEE,0x20,0xF3,0xEC,0xEE,0xEB,0xF7
0002d5 ede0
0002d6 fee8
0002d7 0d2e
0002d8 000a      	.DB  0xE0,0xED,0xE8,0xFE,0x2E,0xD,0xA,0x0
0002d9 e0c7
0002da e8ef
0002db fcf1
0002dc e220      	.DB  0xC7,0xE0,0xEF,0xE8,0xF1,0xFC,0x20,0xE2
0002dd 4520
0002de 5045
0002df 4f52
0002e0 204d      	.DB  0x20,0x45,0x45,0x50,0x52,0x4F,0x4D,0x20
0002e1 7525
0002e2 ed20
0002e3 e2ee
0002e4 f5fb      	.DB  0x25,0x75,0x20,0xED,0xEE,0xE2,0xFB,0xF5
0002e5 f220
0002e6 f0e5
0002e7 eeec
0002e8 e5ec      	.DB  0x20,0xF2,0xE5,0xF0,0xEC,0xEE,0xEC,0xE5
0002e9 f0f2
0002ea e2ee
0002eb 0d2e
0002ec 000a      	.DB  0xF2,0xF0,0xEE,0xE2,0x2E,0xD,0xA,0x0
0002ed f1d3
0002ee e0f2
0002ef eeed
0002f0 eae2      	.DB  0xD3,0xF1,0xF2,0xE0,0xED,0xEE,0xE2,0xEA
0002f1 20e0
0002f2 e5e2
0002f3 f2ed
0002f4 ebe8      	.DB  0xE0,0x20,0xE2,0xE5,0xED,0xF2,0xE8,0xEB
0002f5 f2ff
0002f6 f0ee
0002f7 2ee0
0002f8 2520      	.DB  0xFF,0xF2,0xEE,0xF0,0xE0,0x2E,0x20,0x25
0002f9 2e75
0002fa d320
0002fb f2f1
0002fc ede0      	.DB  0x75,0x2E,0x20,0xD3,0xF1,0xF2,0xE0,0xED
0002fd e2ee
0002fe e0ea
0002ff ea20
000300 e0f0      	.DB  0xEE,0xE2,0xEA,0xE0,0x20,0xEA,0xF0,0xE0
000301 e0ed
000302 2520
000303 2075
000304 0d2e      	.DB  0xED,0xE0,0x20,0x25,0x75,0x20,0x2E,0xD
000305 000a
000306 002d
000307 eec4
000308 f120      	.DB  0xA,0x0,0x2D,0x0,0xC4,0xEE,0x20,0xF1
000309 e5eb
00030a f3e4
00030b f9fe
00030c e3e5      	.DB  0xEB,0xE5,0xE4,0xF3,0xFE,0xF9,0xE5,0xE3
00030d 20ee
00030e e7e8
00030f e5ec
000310 e5f0      	.DB  0xEE,0x20,0xE8,0xE7,0xEC,0xE5,0xF0,0xE5
000311 e8ed
000312 20ff
000313 d3cf
000314 cad1      	.DB  0xED,0xE8,0xFF,0x20,0xCF,0xD3,0xD1,0xCA
000315 203a
000316 7525
000317 0a0d
000318 c400      	.DB  0x3A,0x20,0x25,0x75,0xD,0xA,0x0,0xC4
000319 20ee
00031a ebf1
00031b e4e5
00031c fef3      	.DB  0xEE,0x20,0xF1,0xEB,0xE5,0xE4,0xF3,0xFE
00031d e5f9
00031e eee3
00031f e820
000320 ece7      	.DB  0xF9,0xE5,0xE3,0xEE,0x20,0xE8,0xE7,0xEC
000321 f0e5
000322 ede5
000323 ffe8
000324 d120      	.DB  0xE5,0xF0,0xE5,0xED,0xE8,0xFF,0x20,0xD1
000325 ced2
000326 3acf
000327 2520
000328 0d75      	.DB  0xD2,0xCE,0xCF,0x3A,0x20,0x25,0x75,0xD
000329 000a
00032a e0cd
00032b e0e6
00032c e0f2      	.DB  0xA,0x0,0xCD,0xE0,0xE6,0xE0,0xF2,0xE0
00032d ea20
00032e eeed
00032f eaef
000330 20e0      	.DB  0x20,0xEA,0xED,0xEE,0xEF,0xEA,0xE0,0x20
000331 d3cf
000332 cad1
000333 202e
000334 c200      	.DB  0xCF,0xD3,0xD1,0xCA,0x2E,0x20,0x0,0xC2
000335 ebea
000336 f7fe
000337 ede5
000338 f020      	.DB  0xEA,0xEB,0xFE,0xF7,0xE5,0xED,0x20,0xF0
000339 e6e5
00033a ece8
00033b cf20
00033c eef0      	.DB  0xE5,0xE6,0xE8,0xEC,0x20,0xCF,0xF0,0xEE
00033d f0e3
00033e e2e5
00033f 202e
000340 494c      	.DB  0xE3,0xF0,0xE5,0xE2,0x2E,0x20,0x4C,0x49
000341 494d
000342 2054
000343 203d
000344 6425      	.DB  0x4D,0x49,0x54,0x20,0x3D,0x20,0x25,0x64
000345 202c
000346 f0c2
000347 ece5
000348 20ff      	.DB  0x2C,0x20,0xC2,0xF0,0xE5,0xEC,0xFF,0x20
000349 f0ef
00034a e3ee
00034b e5f0
00034c e0e2      	.DB  0xEF,0xF0,0xEE,0xE3,0xF0,0xE5,0xE2,0xE0
00034d 3d20
00034e 2520
00034f 0d64
000350 000a      	.DB  0x20,0x3D,0x20,0x25,0x64,0xD,0xA,0x0
000351 eac2
000352 feeb
000353 e5f7
000354 20ed      	.DB  0xC2,0xEA,0xEB,0xFE,0xF7,0xE5,0xED,0x20
000355 e5f0
000356 e8e6
000357 20ec
000358 f3cf      	.DB  0xF0,0xE5,0xE6,0xE8,0xEC,0x20,0xCF,0xF3
000359 eaf1
00035a 0a0d
00035b d000
00035c e6e5      	.DB  0xF1,0xEA,0xD,0xA,0x0,0xD0,0xE5,0xE6
00035d ece8
00035e cf20
00035f eef0
000360 f0e3      	.DB  0xE8,0xEC,0x20,0xCF,0xF0,0xEE,0xE3,0xF0
000361 e2e5
000362 0d2e
000363 000a
000364 e5d0      	.DB  0xE5,0xE2,0x2E,0xD,0xA,0x0,0xD0,0xE5
000365 e8e6
000366 20ec
000367 f1ce
000368 e0f2      	.DB  0xE6,0xE8,0xEC,0x20,0xCE,0xF1,0xF2,0xE0
000369 eeed
00036a eae2
00036b 2ee8
00036c 0a0d      	.DB  0xED,0xEE,0xE2,0xEA,0xE8,0x2E,0xD,0xA
00036d d000
00036e e6e5
00036f ece8
000370 cf20      	.DB  0x0,0xD0,0xE5,0xE6,0xE8,0xEC,0x20,0xCF
000371 f1f3
000372 2eea
000373 0a0d
000374 cd00      	.DB  0xF3,0xF1,0xEA,0x2E,0xD,0xA,0x0,0xCD
000375 e6e0
000376 f2e0
000377 20e0
000378 edea      	.DB  0xE0,0xE6,0xE0,0xF2,0xE0,0x20,0xEA,0xED
000379 efee
00037a e0ea
00037b d120
00037c ced2      	.DB  0xEE,0xEF,0xEA,0xE0,0x20,0xD1,0xD2,0xCE
00037d 2ecf
00037e 0020
00037f d020
000380 e6e5      	.DB  0xCF,0x2E,0x20,0x0,0x20,0xD0,0xE5,0xE6
000381 ece8
000382 d120
000383 ced2
000384 2ecf      	.DB  0xE8,0xEC,0x20,0xD1,0xD2,0xCE,0xCF,0x2E
000385 0a0d
000386 c200
000387 ebea
000388 f7fe      	.DB  0xD,0xA,0x0,0xC2,0xEA,0xEB,0xFE,0xF7
000389 ede5
00038a f020
00038b e6e5
00038c ece8      	.DB  0xE5,0xED,0x20,0xF0,0xE5,0xE6,0xE8,0xEC
00038d ce20
00038e f2f1
00038f ede0
000390 e2ee      	.DB  0x20,0xCE,0xF1,0xF2,0xE0,0xED,0xEE,0xE2
000391 e8ea
000392 0a0d
000393 c000
000394 e0e2      	.DB  0xEA,0xE8,0xD,0xA,0x0,0xC0,0xE2,0xE0
000395 e8f0
000396 3aff
000397 2520
000398 0d73      	.DB  0xF0,0xE8,0xFF,0x3A,0x20,0x25,0x73,0xD
000399 000a
00039a c2c0
00039b d0c0
00039c dfc8      	.DB  0xA,0x0,0xC0,0xC2,0xC0,0xD0,0xC8,0xDF
00039d 203a
00039e 7325
00039f 0a0d
0003a0 cf00      	.DB  0x3A,0x20,0x25,0x73,0xD,0xA,0x0,0xCF
0003a1 c5d0
0003a2 d3c4
0003a3 d0cf
0003a4 c6c5      	.DB  0xD0,0xC5,0xC4,0xD3,0xCF,0xD0,0xC5,0xC6
0003a5 c5c4
0003a6 c8cd
0003a7 3ac5
0003a8 2520      	.DB  0xC4,0xC5,0xCD,0xC8,0xC5,0x3A,0x20,0x25
0003a9 0d73
0003aa 000a
0003ab e0d0
0003ac eee7      	.DB  0x73,0xD,0xA,0x0,0xD0,0xE0,0xE7,0xEE
0003ad f0e3
0003ae e2e5
0003af ea20
0003b0 ebe0      	.DB  0xE3,0xF0,0xE5,0xE2,0x20,0xEA,0xE0,0xEB
0003b1 f0ee
0003b2 f4e8
0003b3 f0e5
0003b4 3ae0      	.DB  0xEE,0xF0,0xE8,0xF4,0xE5,0xF0,0xE0,0x3A
0003b5 2520
0003b6 2c64
0003b7 d320
0003b8 eee3      	.DB  0x20,0x25,0x64,0x2C,0x20,0xD3,0xE3,0xEE
0003b9 20eb
0003ba f0ea
0003bb ede0
0003bc 20e0      	.DB  0xEB,0x20,0xEA,0xF0,0xE0,0xED,0xE0,0x20
0003bd e0f0
0003be f7f1
0003bf f2e5
0003c0 fbed      	.DB  0xF0,0xE0,0xF1,0xF7,0xE5,0xF2,0xED,0xFB
0003c1 20e9
0003c2 253a
0003c3 2c64
0003c4 d320      	.DB  0xE9,0x20,0x3A,0x25,0x64,0x2C,0x20,0xD3
0003c5 eee3
0003c6 20eb
0003c7 f0ea
0003c8 ede0      	.DB  0xE3,0xEE,0xEB,0x20,0xEA,0xF0,0xE0,0xED
0003c9 20e0
0003ca e7e8
0003cb e5ec
0003cc e5f0      	.DB  0xE0,0x20,0xE8,0xE7,0xEC,0xE5,0xF0,0xE5
0003cd eded
0003ce e9fb
0003cf 3a20
0003d0 6425      	.DB  0xED,0xED,0xFB,0xE9,0x20,0x3A,0x25,0x64
0003d1 202c
0003d2 e3f3
0003d3 ebee
0003d4 ee20      	.DB  0x2C,0x20,0xF3,0xE3,0xEE,0xEB,0x20,0xEE
0003d5 f0e3
0003d6 ede0
0003d7 f7e8
0003d8 ede5      	.DB  0xE3,0xF0,0xE0,0xED,0xE8,0xF7,0xE5,0xED
0003d9 ffe8
0003da 203a
0003db 6425
0003dc 202c      	.DB  0xE8,0xFF,0x3A,0x20,0x25,0x64,0x2C,0x20
0003dd 2074
0003de e1ee
0003df e0f0
0003e0 eaf2      	.DB  0x74,0x20,0xEE,0xE1,0xF0,0xE0,0xF2,0xEA
0003e1 20e8
0003e2 253a
0003e3 2064
0003e4 0d20      	.DB  0xE8,0x20,0x3A,0x25,0x64,0x20,0x20,0xD
0003e5 000a
0003e6 f5ce
0003e7 e0eb
0003e8 e4e6      	.DB  0xA,0x0,0xCE,0xF5,0xEB,0xE0,0xE6,0xE4
0003e9 ede5
0003ea e5e8
0003eb ea20
0003ec ebe0      	.DB  0xE5,0xED,0xE8,0xE5,0x20,0xEA,0xE0,0xEB
0003ed f0ee
0003ee f4e8
0003ef f0e5
0003f0 3ae0      	.DB  0xEE,0xF0,0xE8,0xF4,0xE5,0xF0,0xE0,0x3A
0003f1 2520
0003f2 2c64
0003f3 d320
0003f4 eee3      	.DB  0x20,0x25,0x64,0x2C,0x20,0xD3,0xE3,0xEE
0003f5 20eb
0003f6 f0ea
0003f7 ede0
0003f8 20e0      	.DB  0xEB,0x20,0xEA,0xF0,0xE0,0xED,0xE0,0x20
0003f9 e0f0
0003fa f7f1
0003fb f2e5
0003fc fbed      	.DB  0xF0,0xE0,0xF1,0xF7,0xE5,0xF2,0xED,0xFB
0003fd 20e9
0003fe 253a
0003ff 2c64
000400 d320      	.DB  0xE9,0x20,0x3A,0x25,0x64,0x2C,0x20,0xD3
000401 eee3
000402 20eb
000403 f0ea
000404 ede0      	.DB  0xE3,0xEE,0xEB,0x20,0xEA,0xF0,0xE0,0xED
000405 20e0
000406 e7e8
000407 e5ec
000408 e5f0      	.DB  0xE0,0x20,0xE8,0xE7,0xEC,0xE5,0xF0,0xE5
000409 eded
00040a e9fb
00040b 3a20
00040c 6425      	.DB  0xED,0xED,0xFB,0xE9,0x20,0x3A,0x25,0x64
00040d 202c
00040e e3f3
00040f ebee
000410 ee20      	.DB  0x2C,0x20,0xF3,0xE3,0xEE,0xEB,0x20,0xEE
000411 f0e3
000412 ede0
000413 f7e8
000414 ede5      	.DB  0xE3,0xF0,0xE0,0xED,0xE8,0xF7,0xE5,0xED
000415 ffe8
000416 203a
000417 6425
000418 202c      	.DB  0xE8,0xFF,0x3A,0x20,0x25,0x64,0x2C,0x20
000419 2074
00041a e1ee
00041b e0f0
00041c eaf2      	.DB  0x74,0x20,0xEE,0xE1,0xF0,0xE0,0xF2,0xEA
00041d 20e8
00041e 253a
00041f 2064
000420 0d20      	.DB  0xE8,0x20,0x3A,0x25,0x64,0x20,0x20,0xD
000421 000a
000422 eecf
000423 e4e4
000424 f0e5      	.DB  0xA,0x0,0xCF,0xEE,0xE4,0xE4,0xE5,0xF0
000425 e0e6
000426 e8ed
000427 20e5
000428 e0ea      	.DB  0xE6,0xE0,0xED,0xE8,0xE5,0x20,0xEA,0xE0
000429 eeeb
00042a e8f0
00042b e5f4
00042c e0f0      	.DB  0xEB,0xEE,0xF0,0xE8,0xF4,0xE5,0xF0,0xE0
00042d 203a
00042e 6425
00042f 202c
000430 d320      	.DB  0x3A,0x20,0x25,0x64,0x2C,0x20,0x20,0xD3
000431 eee3
000432 20eb
000433 f0ea
000434 ede0      	.DB  0xE3,0xEE,0xEB,0x20,0xEA,0xF0,0xE0,0xED
000435 20e0
000436 e0f0
000437 f7f1
000438 f2e5      	.DB  0xE0,0x20,0xF0,0xE0,0xF1,0xF7,0xE5,0xF2
000439 fbed
00043a 20e9
00043b 253a
00043c 2c64      	.DB  0xED,0xFB,0xE9,0x20,0x3A,0x25,0x64,0x2C
00043d d320
00043e eee3
00043f 20eb
000440 f0ea      	.DB  0x20,0xD3,0xE3,0xEE,0xEB,0x20,0xEA,0xF0
000441 ede0
000442 20e0
000443 e7e8
000444 e5ec      	.DB  0xE0,0xED,0xE0,0x20,0xE8,0xE7,0xEC,0xE5
000445 e5f0
000446 eded
000447 e9fb
000448 3a20      	.DB  0xF0,0xE5,0xED,0xED,0xFB,0xE9,0x20,0x3A
000449 6425
00044a 202c
00044b e3f3
00044c ebee      	.DB  0x25,0x64,0x2C,0x20,0xF3,0xE3,0xEE,0xEB
00044d ee20
00044e f0e3
00044f ede0
000450 f7e8      	.DB  0x20,0xEE,0xE3,0xF0,0xE0,0xED,0xE8,0xF7
000451 ede5
000452 ffe8
000453 203a
000454 6425      	.DB  0xE5,0xED,0xE8,0xFF,0x3A,0x20,0x25,0x64
000455 202c
000456 2074
000457 e1ee
000458 e0f0      	.DB  0x2C,0x20,0x74,0x20,0xEE,0xE1,0xF0,0xE0
000459 eaf2
00045a 20e8
00045b 253a
00045c 2064      	.DB  0xF2,0xEA,0xE8,0x20,0x3A,0x25,0x64,0x20
00045d 0d20
00045e 000a
00045f eecf
000460 e8ed      	.DB  0x20,0xD,0xA,0x0,0xCF,0xEE,0xED,0xE8
000461 e5e6
000462 e8ed
000463 20e5
000464 eaf1      	.DB  0xE6,0xE5,0xED,0xE8,0xE5,0x20,0xF1,0xEA
000465 f0ee
000466 f1ee
000467 e8f2
000468 e220      	.DB  0xEE,0xF0,0xEE,0xF1,0xF2,0xE8,0x20,0xE2
000469 ede5
00046a e8f2
00046b ffeb
00046c eef2      	.DB  0xE5,0xED,0xF2,0xE8,0xEB,0xFF,0xF2,0xEE
00046d e0f0
00046e f020
00046f f1e0
000470 e5f7      	.DB  0xF0,0xE0,0x20,0xF0,0xE0,0xF1,0xF7,0xE5
000471 edf2
000472 e5ee
000473 3a20
000474 2520      	.DB  0xF2,0xED,0xEE,0xE5,0x20,0x3A,0x20,0x25
000475 2c64
000476 e820
000477 ece7
000478 f0e5      	.DB  0x64,0x2C,0x20,0xE8,0xE7,0xEC,0xE5,0xF0
000479 ede5
00047a eeed
00047b 20e5
00047c 203a      	.DB  0xE5,0xED,0xED,0xEE,0xE5,0x20,0x3A,0x20
00047d 6425
00047e 202c
00047f f7d1
000480 f2e5      	.DB  0x25,0x64,0x2C,0x20,0xD1,0xF7,0xE5,0xF2
000481 e8f7
000482 20ea
000483 e8f6
000484 ebea      	.DB  0xF7,0xE8,0xEA,0x20,0xF6,0xE8,0xEA,0xEB
000485 e2ee
000486 3a20
000487 6425
000488 202c      	.DB  0xEE,0xE2,0x20,0x3A,0x25,0x64,0x2C,0x20
000489 4f50
00048a 5f4d
00048b 2054
00048c 253a      	.DB  0x50,0x4F,0x4D,0x5F,0x54,0x20,0x3A,0x25
00048d 2064
00048e 0a0d
00048f d300
000490 e5e2      	.DB  0x64,0x20,0xD,0xA,0x0,0xD3,0xE2,0xE5
000491 e8eb
000492 e5f7
000493 e8ed
000494 20e5      	.DB  0xEB,0xE8,0xF7,0xE5,0xED,0xE8,0xE5,0x20
000495 eaf1
000496 f0ee
000497 f1ee
000498 e8f2      	.DB  0xF1,0xEA,0xEE,0xF0,0xEE,0xF1,0xF2,0xE8
000499 e220
00049a ede5
00049b e8f2
00049c ffeb      	.DB  0x20,0xE2,0xE5,0xED,0xF2,0xE8,0xEB,0xFF
00049d eef2
00049e e0f0
00049f f020
0004a0 f1e0      	.DB  0xF2,0xEE,0xF0,0xE0,0x20,0xF0,0xE0,0xF1
0004a1 e5f7
0004a2 edf2
0004a3 ffe0
0004a4 203a      	.DB  0xF7,0xE5,0xF2,0xED,0xE0,0xFF,0x3A,0x20
0004a5 6425
0004a6 202c
0004a7 e7e8
0004a8 e5ec      	.DB  0x25,0x64,0x2C,0x20,0xE8,0xE7,0xEC,0xE5
0004a9 e5f0
0004aa eded
0004ab ffe0
0004ac 3a20      	.DB  0xF0,0xE5,0xED,0xED,0xE0,0xFF,0x20,0x3A
0004ad 2520
0004ae 2c64
0004af d120
0004b0 e5f7      	.DB  0x20,0x25,0x64,0x2C,0x20,0xD1,0xF7,0xE5
0004b1 f7f2
0004b2 eae8
0004b3 f620
0004b4 eae8      	.DB  0xF2,0xF7,0xE8,0xEA,0x20,0xF6,0xE8,0xEA
0004b5 eeeb
0004b6 20e2
0004b7 253a
0004b8 2c64      	.DB  0xEB,0xEE,0xE2,0x20,0x3A,0x25,0x64,0x2C
0004b9 c720
0004ba e4e0
0004bb ede0
0004bc e0ed      	.DB  0x20,0xC7,0xE0,0xE4,0xE0,0xED,0xED,0xE0
0004bd 20ff
0004be eaf1
0004bf f0ee
0004c0 f1ee      	.DB  0xFF,0x20,0xF1,0xEA,0xEE,0xF0,0xEE,0xF1
0004c1 fcf2
0004c2 3a20
0004c3 6425
0004c4 0d20      	.DB  0xF2,0xFC,0x20,0x3A,0x25,0x64,0x20,0xD
0004c5 000a
0004c6 ead1
0004c7 f0ee
0004c8 f1ee      	.DB  0xA,0x0,0xD1,0xEA,0xEE,0xF0,0xEE,0xF1
0004c9 fcf2
0004ca e220
0004cb ede5
0004cc e8f2      	.DB  0xF2,0xFC,0x20,0xE2,0xE5,0xED,0xF2,0xE8
0004cd ffeb
0004ce eef2
0004cf e0f0
0004d0 f020      	.DB  0xEB,0xFF,0xF2,0xEE,0xF0,0xE0,0x20,0xF0
0004d1 f1e0
0004d2 e5f7
0004d3 edf2
0004d4 ffe0      	.DB  0xE0,0xF1,0xF7,0xE5,0xF2,0xED,0xE0,0xFF
0004d5 203a
0004d6 6425
0004d7 202c
0004d8 e7e8      	.DB  0x3A,0x20,0x25,0x64,0x2C,0x20,0xE8,0xE7
0004d9 e5ec
0004da e5f0
0004db eded
0004dc ffe0      	.DB  0xEC,0xE5,0xF0,0xE5,0xED,0xED,0xE0,0xFF
0004dd 3a20
0004de 2520
0004df 2c64
0004e0 c720      	.DB  0x20,0x3A,0x20,0x25,0x64,0x2C,0x20,0xC7
0004e1 e4e0
0004e2 ede0
0004e3 e0ed
0004e4 20ff      	.DB  0xE0,0xE4,0xE0,0xED,0xED,0xE0,0xFF,0x20
0004e5 eaf1
0004e6 f0ee
0004e7 f1ee
0004e8 fcf2      	.DB  0xF1,0xEA,0xEE,0xF0,0xEE,0xF1,0xF2,0xFC
0004e9 203a
0004ea 6425
0004eb 202c
0004ec 4f50      	.DB  0x3A,0x20,0x25,0x64,0x2C,0x20,0x50,0x4F
0004ed 5f4d
0004ee 3a54
0004ef 2520
0004f0 2c64      	.DB  0x4D,0x5F,0x54,0x3A,0x20,0x25,0x64,0x2C
0004f1 5420
0004f2 5041
0004f3 415f
0004f4 474e      	.DB  0x20,0x54,0x41,0x50,0x5F,0x41,0x4E,0x47
0004f5 454c
0004f6 4d5f
0004f7 4e49
0004f8 3d20      	.DB  0x4C,0x45,0x5F,0x4D,0x49,0x4E,0x20,0x3D
0004f9 2520
0004fa 2064
0004fb 0a0d
0004fc d000      	.DB  0x20,0x25,0x64,0x20,0xD,0xA,0x0,0xD0
0004fd e7e0
0004fe eeed
0004ff f2f1
000500 20fc      	.DB  0xE0,0xE7,0xED,0xEE,0xF1,0xF2,0xFC,0x20
000501 e5f2
000502 efec
000503 f0e5
000504 f2e0      	.DB  0xF2,0xE5,0xEC,0xEF,0xE5,0xF0,0xE0,0xF2
000505 f0f3
000506 203a
000507 6425
000508 202c      	.DB  0xF3,0xF0,0x3A,0x20,0x25,0x64,0x2C,0x20
000509 4154
00050a 5f50
00050b 4e41
00050c 4c47      	.DB  0x54,0x41,0x50,0x5F,0x41,0x4E,0x47,0x4C
00050d 2045
00050e 253a
00050f 2c64
000510 7420      	.DB  0x45,0x20,0x3A,0x25,0x64,0x2C,0x20,0x74
000511 6d69
000512 5f65
000513 6e69
000514 6574      	.DB  0x69,0x6D,0x65,0x5F,0x69,0x6E,0x74,0x65
000515 7267
000516 7461
000517 6f69
000518 206e      	.DB  0x67,0x72,0x61,0x74,0x69,0x6F,0x6E,0x20
000519 253a
00051a 2064
00051b 0a0d
00051c 2500      	.DB  0x3A,0x25,0x64,0x20,0xD,0xA,0x0,0x25
00051d 3230
00051e 3a75
00051f 3025
000520 7532      	.DB  0x30,0x32,0x75,0x3A,0x25,0x30,0x32,0x75
000521 253a
000522 3230
000523 2c75
000524 2520      	.DB  0x3A,0x25,0x30,0x32,0x75,0x2C,0x20,0x25
000525 2c64
000526 2520
000527 2c64
000528 2520      	.DB  0x64,0x2C,0x20,0x25,0x64,0x2C,0x20,0x25
000529 2c64
00052a 2520
00052b 2c64
00052c 2520      	.DB  0x64,0x2C,0x20,0x25,0x64,0x2C,0x20,0x25
00052d 2c64
00052e 2520
00052f 2c64
000530 2520      	.DB  0x64,0x2C,0x20,0x25,0x64,0x2C,0x20,0x25
000531 2c64
000532 2520
000533 2c64
000534 2520      	.DB  0x64,0x2C,0x20,0x25,0x64,0x2C,0x20,0x25
000535 2c64
000536 2520
000537 2c64
000538 2520      	.DB  0x64,0x2C,0x20,0x25,0x64,0x2C,0x20,0x25
000539 2c64
00053a 2520
00053b 0d64
00053c 000a      	.DB  0x64,0x2C,0x20,0x25,0x64,0xD,0xA,0x0
00053d 6544
00053e 746c
00053f 2061
000540 7828      	.DB  0x44,0x65,0x6C,0x74,0x61,0x20,0x28,0x78
000541 3031
000542 2930
000543 3d20
000544 2520      	.DB  0x31,0x30,0x30,0x29,0x20,0x3D,0x20,0x25
000545 2c64
000546 7220
000547 7365
000548 6c75      	.DB  0x64,0x2C,0x20,0x72,0x65,0x73,0x75,0x6C
000549 2074
00054a 203d
00054b 6425
00054c 202c      	.DB  0x74,0x20,0x3D,0x20,0x25,0x64,0x2C,0x20
00054d 4154
00054e 5f50
00054f 4e41
000550 4c47      	.DB  0x54,0x41,0x50,0x5F,0x41,0x4E,0x47,0x4C
000551 2045
000552 203d
000553 6425
000554 202c      	.DB  0x45,0x20,0x3D,0x20,0x25,0x64,0x2C,0x20
000555 5470
000556 7265
000557 206d
000558 203d      	.DB  0x70,0x54,0x65,0x72,0x6D,0x20,0x3D,0x20
000559 6425
00055a 202c
00055b 5469
00055c 7265      	.DB  0x25,0x64,0x2C,0x20,0x69,0x54,0x65,0x72
00055d 206d
00055e 203d
00055f 6425
000560 202c      	.DB  0x6D,0x20,0x3D,0x20,0x25,0x64,0x2C,0x20
000561 5464
000562 7265
000563 206d
000564 203d      	.DB  0x64,0x54,0x65,0x72,0x6D,0x20,0x3D,0x20
000565 6425
000566 0a0d
000567 2000
000568 2574      	.DB  0x25,0x64,0xD,0xA,0x0,0x20,0x74,0x25
000569 752d
00056a 3d20
00056b 2520
00056c 2869      	.DB  0x2D,0x75,0x20,0x3D,0x20,0x25,0x69,0x28
00056d 2d25
00056e 2e69
00056f 2d25
000570 2975      	.DB  0x25,0x2D,0x69,0x2E,0x25,0x2D,0x75,0x29
000571 5b43
000572 3025
000573 5832
000574 3025      	.DB  0x43,0x5B,0x25,0x30,0x32,0x58,0x25,0x30
000575 5832
000576 253a
000577 3230
000578 5d78      	.DB  0x32,0x58,0x3A,0x25,0x30,0x32,0x78,0x5D
000579 6425
00057a 253a
00057b 3b64
00057c 0020      	.DB  0x25,0x64,0x3A,0x25,0x64,0x3B,0x20,0x0
00057d d2d1
00057e cfce
00057f 2020
000580 0020      	.DB  0xD1,0xD2,0xCE,0xCF,0x20,0x20,0x20,0x0
000581 d0cf
000582 c3ce
000583 c5d0
000584 00c2      	.DB  0xCF,0xD0,0xCE,0xC3,0xD0,0xC5,0xC2,0x0
000585 d1ce
000586 c0d2
000587 cecd
000588 00c2      	.DB  0xCE,0xD1,0xD2,0xC0,0xCD,0xCE,0xC2,0x0
000589 d3cf
00058a cad1
00058b 2020
00058c 0020      	.DB  0xCF,0xD3,0xD1,0xCA,0x20,0x20,0x20,0x0
00058d e2c0
00058e f0e0
00058f ffe8
000590 0020      	.DB  0xC0,0xE2,0xE0,0xF0,0xE8,0xFF,0x20,0x0
000591 3025
000592 7532
000593 253a
000594 3230      	.DB  0x25,0x30,0x32,0x75,0x3A,0x25,0x30,0x32
000595 3a75
000596 3025
000597 7532
000598 2520      	.DB  0x75,0x3A,0x25,0x30,0x32,0x75,0x20,0x25
000599 3230
00059a 2e75
00059b 3025
00059c 7532      	.DB  0x30,0x32,0x75,0x2E,0x25,0x30,0x32,0x75
00059d 2020
00059e 7400
00059f 253d
0005a0 2563      	.DB  0x20,0x20,0x0,0x74,0x3D,0x25,0x63,0x25
0005a1 3230
0005a2 2e75
0005a3 3025
0005a4 7531      	.DB  0x30,0x32,0x75,0x2E,0x25,0x30,0x31,0x75
0005a5 2043
0005a6 7325
0005a7 cd00
0005a8 f2e5      	.DB  0x43,0x20,0x25,0x73,0x0,0xCD,0xE5,0xF2
0005a9 f220
0005aa f0e5
0005ab eeec
0005ac e5ec      	.DB  0x20,0xF2,0xE5,0xF0,0xEC,0xEE,0xEC,0xE5
0005ad f0f2
0005ae e2ee
0005af d100
0005b0 f1ee      	.DB  0xF2,0xF0,0xEE,0xE2,0x0,0xD1,0xEE,0xF1
0005b1 eef2
0005b2 edff
0005b3 e5e8
0005b4 7020      	.DB  0xF2,0xEE,0xFF,0xED,0xE8,0xE5,0x20,0x70
0005b5 6972
0005b6 5f6d
0005b7 6170
0005b8 2072      	.DB  0x72,0x69,0x6D,0x5F,0x70,0x61,0x72,0x20
0005b9 255b
0005ba 2064
0005bb 7962
0005bc 6574      	.DB  0x5B,0x25,0x64,0x20,0x62,0x79,0x74,0x65
0005bd 5d73
0005be 203a
0005bf 2000
0005c0 6425      	.DB  0x73,0x5D,0x3A,0x20,0x0,0x20,0x25,0x64
0005c1 2000
0005c2 5825
0005c3 c700
0005c4 e4e0      	.DB  0x0,0x20,0x25,0x58,0x0,0xC7,0xE0,0xE4
0005c5 ede0
0005c6 4e20
0005c7 7525
0005c8 2820      	.DB  0xE0,0xED,0x20,0x4E,0x25,0x75,0x20,0x28
0005c9 756e
0005ca 626d
0005cb 7265
0005cc 2c29      	.DB  0x6E,0x75,0x6D,0x62,0x65,0x72,0x29,0x2C
0005cd ed20
0005ce f8e0
0005cf e8eb
0005d0 4e20      	.DB  0x20,0xED,0xE0,0xF8,0xEB,0xE8,0x20,0x4E
0005d1 7525
0005d2 2820
0005d3 7369
0005d4 665f      	.DB  0x25,0x75,0x20,0x28,0x69,0x73,0x5F,0x66
0005d5 756f
0005d6 646e
0005d7 2c29
0005d8 f120      	.DB  0x6F,0x75,0x6E,0x64,0x29,0x2C,0x20,0xF1
0005d9 eee2
0005da eee1
0005db ede4
0005dc e9fb      	.DB  0xE2,0xEE,0xE1,0xEE,0xE4,0xED,0xFB,0xE9
0005dd 4e20
0005de 7525
0005df 2820
0005e0 7369      	.DB  0x20,0x4E,0x25,0x75,0x20,0x28,0x69,0x73
0005e1 6e5f
0005e2 7765
0005e3 0d29
0005e4 000a      	.DB  0x5F,0x6E,0x65,0x77,0x29,0xD,0xA,0x0
0005e5 e5d2
0005e6 ecf0
0005e7 ecee
0005e8 f2e5      	.DB  0xD2,0xE5,0xF0,0xEC,0xEE,0xEC,0xE5,0xF2
0005e9 20f0
0005ea 254e
0005eb 2075
0005ec f3f1      	.DB  0xF0,0x20,0x4E,0x25,0x75,0x20,0xF1,0xF3
0005ed e5f9
0005ee f2f1
0005ef f3e2
0005f0 f2e5      	.DB  0xF9,0xE5,0xF1,0xF2,0xE2,0xF3,0xE5,0xF2
0005f1 ef20
0005f2 20ee
0005f3 eeef
0005f4 fff0      	.DB  0x20,0xEF,0xEE,0x20,0xEF,0xEE,0xF0,0xFF
0005f5 eae4
0005f6 e2ee
0005f7 ecee
0005f8 20f3      	.DB  0xE4,0xEA,0xEE,0xE2,0xEE,0xEC,0xF3,0x20
0005f9 eeed
0005fa e5ec
0005fb f3f0
0005fc 2520      	.DB  0xED,0xEE,0xEC,0xE5,0xF0,0xF3,0x20,0x25
0005fd 0d75
0005fe 000a
0005ff e2d1
000600 e1ee      	.DB  0x75,0xD,0xA,0x0,0xD1,0xE2,0xEE,0xE1
000601 e4ee
000602 fbed
000603 20f5
000604 e5f2      	.DB  0xEE,0xE4,0xED,0xFB,0xF5,0x20,0xF2,0xE5
000605 ecf0
000606 ecee
000607 f2e5
000608 eef0      	.DB  0xF0,0xEC,0xEE,0xEC,0xE5,0xF2,0xF0,0xEE
000609 20e2
00060a e5ed
00060b 0df2
00060c 000a      	.DB  0xE2,0x20,0xED,0xE5,0xF2,0xD,0xA,0x0
00060d eecd
00060e fbe2
00060f 20e9
000610 4c54      	.DB  0xCD,0xEE,0xE2,0xFB,0xE9,0x20,0x54,0x4C
000611 3d20
000612 2520
000613 5b64
000614 3025      	.DB  0x20,0x3D,0x20,0x25,0x64,0x5B,0x25,0x30
000615 7832
000616 205d
000617 eeef
000618 ed20      	.DB  0x32,0x78,0x5D,0x20,0xEF,0xEE,0x20,0xED
000619 ecee
00061a f0e5
00061b 20f3
00061c 7525      	.DB  0xEE,0xEC,0xE5,0xF0,0xF3,0x20,0x25,0x75
00061d 0a0d
00061e cf00
00061f eef0
000620 ede8      	.DB  0xD,0xA,0x0,0xCF,0xF0,0xEE,0xE8,0xED
000621 f6e8
000622 e0e8
000623 e8eb
000624 e8e7      	.DB  0xE8,0xF6,0xE8,0xE0,0xEB,0xE8,0xE7,0xE8
000625 eef0
000626 e0e2
000627 e8eb
000628 f220      	.DB  0xF0,0xEE,0xE2,0xE0,0xEB,0xE8,0x20,0xF2
000629 f0e5
00062a eeec
00062b e5ec
00062c f0f2      	.DB  0xE5,0xF0,0xEC,0xEE,0xEC,0xE5,0xF2,0xF0
00062d 4e20
00062e 7525
00062f ef20
000630 20ee      	.DB  0x20,0x4E,0x25,0x75,0x20,0xEF,0xEE,0x20
000631 eeef
000632 fff0
000633 eae4
000634 e2ee      	.DB  0xEF,0xEE,0xF0,0xFF,0xE4,0xEA,0xEE,0xE2
000635 ecee
000636 20f3
000637 eeed
000638 e5ec      	.DB  0xEE,0xEC,0xF3,0x20,0xED,0xEE,0xEC,0xE5
000639 f3f0
00063a 2520
00063b 0d75
00063c 000a      	.DB  0xF0,0xF3,0x20,0x25,0x75,0xD,0xA,0x0
00063d e5cd
00063e ec20
00063f e3ee
000640 20f3      	.DB  0xCD,0xE5,0x20,0xEC,0xEE,0xE3,0xF3,0x20
000641 f0ef
000642 e8ee
000643 e8ed
000644 e8f6      	.DB  0xEF,0xF0,0xEE,0xE8,0xED,0xE8,0xF6,0xE8
000645 ebe0
000646 e7e8
000647 f0e8
000648 e2ee      	.DB  0xE0,0xEB,0xE8,0xE7,0xE8,0xF0,0xEE,0xE2
000649 f2e0
00064a 20fc
00064b eeed
00064c fbe2      	.DB  0xE0,0xF2,0xFC,0x20,0xED,0xEE,0xE2,0xFB
00064d 20e9
00064e e5f2
00064f ecf0
000650 ecee      	.DB  0xE9,0x20,0xF2,0xE5,0xF0,0xEC,0xEE,0xEC
000651 f2e5
000652 20f0
000653 254e
000654 0d75      	.DB  0xE5,0xF2,0xF0,0x20,0x4E,0x25,0x75,0xD
000655 000a
000656 fbc2
000657 ebea
000658 f7fe      	.DB  0xA,0x0,0xC2,0xFB,0xEA,0xEB,0xFE,0xF7
000659 f2e8
00065a 20e5
00065b e8ef
00065c e0f2      	.DB  0xE8,0xF2,0xE5,0x20,0xEF,0xE8,0xF2,0xE0
00065d e8ed
00065e 20e5
00065f 20e8
000660 eeef      	.DB  0xED,0xE8,0xE5,0x20,0xE8,0x20,0xEF,0xEE
000661 eae4
000662 feeb
000663 e8f7
000664 e5f2      	.DB  0xE4,0xEA,0xEB,0xFE,0xF7,0xE8,0xF2,0xE5
000665 e220
000666 e5f1
000667 ee20
000668 eee1      	.DB  0x20,0xE2,0xF1,0xE5,0x20,0xEE,0xE1,0xEE
000669 f3f0
00066a eee4
00066b e0e2
00066c e8ed      	.DB  0xF0,0xF3,0xE4,0xEE,0xE2,0xE0,0xED,0xE8
00066d 0de5
00066e 000a
00066f f2ce
000670 ebea      	.DB  0xE5,0xD,0xA,0x0,0xCE,0xF2,0xEA,0xEB
000671 f7fe
000672 f2e8
000673 20e5
000674 f1e2      	.DB  0xFE,0xF7,0xE8,0xF2,0xE5,0x20,0xE2,0xF1
000675 20e5
000676 e5f2
000677 ecf0
000678 ecee      	.DB  0xE5,0x20,0xF2,0xE5,0xF0,0xEC,0xEE,0xEC
000679 f2e5
00067a fbf0
00067b 202c
00067c f0ea      	.DB  0xE5,0xF2,0xF0,0xFB,0x2C,0x20,0xEA,0xF0
00067d ecee
00067e 20e5
00067f 255b
000680 3230      	.DB  0xEE,0xEC,0xE5,0x20,0x5B,0x25,0x30,0x32
000681 5d78
000682 e820
000683 ed20
000684 e6e0      	.DB  0x78,0x5D,0x20,0xE8,0x20,0xED,0xE0,0xE6
000685 e8ec
000686 e5f2
000687 ea20
000688 e0eb      	.DB  0xEC,0xE8,0xF2,0xE5,0x20,0xEA,0xEB,0xE0
000689 e8e2
00068a f3f8
00068b 5320
00068c 4948      	.DB  0xE2,0xE8,0xF8,0xF3,0x20,0x53,0x48,0x49
00068d 5446
00068e 272d
00068f 277e
000690 0a0d      	.DB  0x46,0x54,0x2D,0x27,0x7E,0x27,0xD,0xA
000691 fbc2
000692 eef5
000693 20e4
000694 e7e8      	.DB  0xC2,0xFB,0xF5,0xEE,0xE4,0x20,0xE8,0xE7
000695 f020
000696 e6e5
000697 ece8
000698 20e0      	.DB  0x20,0xF0,0xE5,0xE6,0xE8,0xEC,0xE0,0x20
000699 202d
00069a fbe2
00069b ebea
00069c f7fe      	.DB  0x2D,0x20,0xE2,0xFB,0xEA,0xEB,0xFE,0xF7
00069d ede5
00069e e5e8
00069f ef20
0006a0 f2e8      	.DB  0xE5,0xED,0xE8,0xE5,0x20,0xEF,0xE8,0xF2
0006a1 ede0
0006a2 ffe8
0006a3 0a0d
0006a4 d200      	.DB  0xE0,0xED,0xE8,0xFF,0xD,0xA,0x0,0xD2
0006a5 f0e5
0006a6 eeec
0006a7 e5ec
0006a8 f0f2      	.DB  0xE5,0xF0,0xEC,0xEE,0xEC,0xE5,0xF2,0xF0
0006a9 20fb
0006aa e5ed
0006ab ed20
0006ac e9e0      	.DB  0xFB,0x20,0xED,0xE5,0x20,0xED,0xE0,0xE9
0006ad e5e4
0006ae fbed
0006af 0a0d
0006b0 d200      	.DB  0xE4,0xE5,0xED,0xFB,0xD,0xA,0x0,0xD2
0006b1 f0e5
0006b2 eeec
0006b3 e5ec
0006b4 f0f2      	.DB  0xE5,0xF0,0xEC,0xEE,0xEC,0xE5,0xF2,0xF0
0006b5 5b20
0006b6 3025
0006b7 7832
0006b8 205d      	.DB  0x20,0x5B,0x25,0x30,0x32,0x78,0x5D,0x20
0006b9 f1f3
0006ba e5ef
0006bb edf8
0006bc 20ee      	.DB  0xF3,0xF1,0xEF,0xE5,0xF8,0xED,0xEE,0x20
0006bd f0ef
0006be e8ee
0006bf e8ed
0006c0 e8f6      	.DB  0xEF,0xF0,0xEE,0xE8,0xED,0xE8,0xF6,0xE8
0006c1 ebe0
0006c2 e7e8
0006c3 f0e8
0006c4 e2ee      	.DB  0xE0,0xEB,0xE8,0xE7,0xE8,0xF0,0xEE,0xE2
0006c5 ede0
0006c6 0a0d
0006c7 cd00
0006c8 20e5      	.DB  0xE0,0xED,0xD,0xA,0x0,0xCD,0xE5,0x20
0006c9 eeec
0006ca f3e3
0006cb ef20
0006cc eef0      	.DB  0xEC,0xEE,0xE3,0xF3,0x20,0xEF,0xF0,0xEE
0006cd ede8
0006ce f6e8
0006cf e0e8
0006d0 e8eb      	.DB  0xE8,0xED,0xE8,0xF6,0xE8,0xE0,0xEB,0xE8
0006d1 e8e7
0006d2 eef0
0006d3 e0e2
0006d4 fcf2      	.DB  0xE7,0xE8,0xF0,0xEE,0xE2,0xE0,0xF2,0xFC
0006d5 ed20
0006d6 e2ee
0006d7 e9fb
0006d8 f220      	.DB  0x20,0xED,0xEE,0xE2,0xFB,0xE9,0x20,0xF2
0006d9 f0e5
0006da eeec
0006db e5ec
0006dc f0f2      	.DB  0xE5,0xF0,0xEC,0xEE,0xEC,0xE5,0xF2,0xF0
0006dd 5b20
0006de 3025
0006df 7832
0006e0 0d5d      	.DB  0x20,0x5B,0x25,0x30,0x32,0x78,0x5D,0xD
0006e1 000a
0006e2 e5cd
0006e3 ec20
0006e4 e3ee      	.DB  0xA,0x0,0xCD,0xE5,0x20,0xEC,0xEE,0xE3
0006e5 20f3
0006e6 f0ef
0006e7 e8ee
0006e8 e8ed      	.DB  0xF3,0x20,0xEF,0xF0,0xEE,0xE8,0xED,0xE8
0006e9 e8f6
0006ea ebe0
0006eb e7e8
0006ec f0e8      	.DB  0xF6,0xE8,0xE0,0xEB,0xE8,0xE7,0xE8,0xF0
0006ed e2ee
0006ee f2e0
0006ef 20fc
0006f0 e5f2      	.DB  0xEE,0xE2,0xE0,0xF2,0xFC,0x20,0xF2,0xE5
0006f1 ecf0
0006f2 ecee
0006f3 f2e5
0006f4 20f0      	.DB  0xF0,0xEC,0xEE,0xEC,0xE5,0xF2,0xF0,0x20
0006f5 255b
0006f6 3230
0006f7 5d78
0006f8 0a0d      	.DB  0x5B,0x25,0x30,0x32,0x78,0x5D,0xD,0xA
0006f9 d200
0006fa f0e5
0006fb eeec
0006fc e5ec      	.DB  0x0,0xD2,0xE5,0xF0,0xEC,0xEE,0xEC,0xE5
0006fd f0f2
0006fe 5b20
0006ff 3025
000700 7832      	.DB  0xF2,0xF0,0x20,0x5B,0x25,0x30,0x32,0x78
000701 205d
000702 f1f3
000703 e5ef
000704 edf8      	.DB  0x5D,0x20,0xF3,0xF1,0xEF,0xE5,0xF8,0xED
000705 20ee
000706 f7ee
000707 f9e8
000708 ede5      	.DB  0xEE,0x20,0xEE,0xF7,0xE8,0xF9,0xE5,0xED
000709 0a0d
00070a cd00
00070b 20e5
00070c eeec      	.DB  0xD,0xA,0x0,0xCD,0xE5,0x20,0xEC,0xEE
00070d f3e3
00070e ee20
00070f e8f7
000710 f2f1      	.DB  0xE3,0xF3,0x20,0xEE,0xF7,0xE8,0xF1,0xF2
000711 f2e8
000712 20fc
000713 e5f2
000714 ecf0      	.DB  0xE8,0xF2,0xFC,0x20,0xF2,0xE5,0xF0,0xEC
000715 ecee
000716 f2e5
000717 20f0
000718 255b      	.DB  0xEE,0xEC,0xE5,0xF2,0xF0,0x20,0x5B,0x25
000719 3230
00071a 5d78
00071b 0a0d
00071c c700      	.DB  0x30,0x32,0x78,0x5D,0xD,0xA,0x0,0xC7
00071d f3e2
00071e 20ea
00071f fbe2
000720 ebea      	.DB  0xE2,0xF3,0xEA,0x20,0xE2,0xFB,0xEA,0xEB
000721 f7fe
000722 ede5
000723 0a0d
000724 c700      	.DB  0xFE,0xF7,0xE5,0xED,0xD,0xA,0x0,0xC7
000725 f3e2
000726 20ea
000727 eae2
000728 feeb      	.DB  0xE2,0xF3,0xEA,0x20,0xE2,0xEA,0xEB,0xFE
000729 e5f7
00072a 0ded
00072b 000a
00072c e5cf      	.DB  0xF7,0xE5,0xED,0xD,0xA,0x0,0xCF,0xE5
00072d e0f7
00072e fcf2
00072f e220
000730 ebea      	.DB  0xF7,0xE0,0xF2,0xFC,0x20,0xE2,0xEA,0xEB
000731 f7fe
000732 ede5
000733 0de0
000734 000a      	.DB  0xFE,0xF7,0xE5,0xED,0xE0,0xD,0xA,0x0
000735 e5cf
000736 e0f7
000737 fcf2
000738 e220      	.DB  0xCF,0xE5,0xF7,0xE0,0xF2,0xFC,0x20,0xE2
000739 eafb
00073a feeb
00073b e5f7
00073c e0ed      	.DB  0xFB,0xEA,0xEB,0xFE,0xF7,0xE5,0xED,0xE0
00073d 0a0d
00073e c220
00073f e5f0
000740 ffec      	.DB  0xD,0xA,0x20,0xC2,0xF0,0xE5,0xEC,0xFF
000741 202c
000742 e5d2
000743 efec
000744 f0e5      	.DB  0x2C,0x20,0xD2,0xE5,0xEC,0xEF,0xE5,0xF0
000745 f2e0
000746 f0f3
000747 20e0
000748 e0e7      	.DB  0xE0,0xF2,0xF3,0xF0,0xE0,0x20,0xE7,0xE0
000749 e0e4
00074a eded
00074b ffe0
00074c 202c      	.DB  0xE4,0xE0,0xED,0xED,0xE0,0xFF,0x2C,0x20
00074d e5d2
00074e efec
00074f f0e5
000750 f2e0      	.DB  0xD2,0xE5,0xEC,0xEF,0xE5,0xF0,0xE0,0xF2
000751 f0f3
000752 20e0
000753 e7e8
000754 e5ec      	.DB  0xF3,0xF0,0xE0,0x20,0xE8,0xE7,0xEC,0xE5
000755 e5f0
000756 eded
000757 ffe0
000758 202c      	.DB  0xF0,0xE5,0xED,0xED,0xE0,0xFF,0x2C,0x20
000759 6544
00075a 746c
00075b 2c61
00075c d320      	.DB  0x44,0x65,0x6C,0x74,0x61,0x2C,0x20,0xD3
00075d eee3
00075e 20eb
00075f f0ea
000760 ede0      	.DB  0xE3,0xEE,0xEB,0x20,0xEA,0xF0,0xE0,0xED
000761 20e0
000762 e0f0
000763 f7f1
000764 f2e5      	.DB  0xE0,0x20,0xF0,0xE0,0xF1,0xF7,0xE5,0xF2
000765 fbed
000766 2ce9
000767 d320
000768 eee3      	.DB  0xED,0xFB,0xE9,0x2C,0x20,0xD3,0xE3,0xEE
000769 20eb
00076a f0ea
00076b ede0
00076c e8e0      	.DB  0xEB,0x20,0xEA,0xF0,0xE0,0xED,0xE0,0xE8
00076d ece7
00076e f0e5
00076f ede5
000770 fbed      	.DB  0xE7,0xEC,0xE5,0xF0,0xE5,0xED,0xED,0xFB
000771 2ce9
000772 d320
000773 eee3
000774 20eb      	.DB  0xE9,0x2C,0x20,0xD3,0xE3,0xEE,0xEB,0x20
000775 e3ee
000776 e0f0
000777 e8ed
000778 e5f7      	.DB  0xEE,0xE3,0xF0,0xE0,0xED,0xE8,0xF7,0xE5
000779 e8ed
00077a 2cff
00077b 7220
00077c 7365      	.DB  0xED,0xE8,0xFF,0x2C,0x20,0x72,0x65,0x73
00077d 6c75
00077e 2c74
00077f 7020
000780 6554      	.DB  0x75,0x6C,0x74,0x2C,0x20,0x70,0x54,0x65
000781 6d72
000782 202c
000783 5469
000784 7265      	.DB  0x72,0x6D,0x2C,0x20,0x69,0x54,0x65,0x72
000785 2c6d
000786 6420
000787 6554
000788 6d72      	.DB  0x6D,0x2C,0x20,0x64,0x54,0x65,0x72,0x6D
000789 202c
00078a e1ce
00078b f0ee
00078c f2ee      	.DB  0x2C,0x20,0xCE,0xE1,0xEE,0xF0,0xEE,0xF2
00078d 20fb
00078e e0f0
00078f f7f1
000790 f2e5      	.DB  0xFB,0x20,0xF0,0xE0,0xF1,0xF7,0xE5,0xF2
000791 fbed
000792 2ce5
000793 ce20
000794 eee1      	.DB  0xED,0xFB,0xE5,0x2C,0x20,0xCE,0xE1,0xEE
000795 eef0
000796 fbf2
000797 e820
000798 ece7      	.DB  0xF0,0xEE,0xF2,0xFB,0x20,0xE8,0xE7,0xEC
000799 f0e5
00079a ede5
00079b fbed
00079c e5e5      	.DB  0xE5,0xF0,0xE5,0xED,0xED,0xFB,0xE5,0xE5
00079d 0a0d
00079e c200
00079f e5f0
0007a0 ffec      	.DB  0xD,0xA,0x0,0xC2,0xF0,0xE5,0xEC,0xFF
0007a1 203a
0007a2 3025
0007a3 7532
0007a4 253a      	.DB  0x3A,0x20,0x25,0x30,0x32,0x75,0x3A,0x25
0007a5 3230
0007a6 3a75
0007a7 3025
0007a8 7532      	.DB  0x30,0x32,0x75,0x3A,0x25,0x30,0x32,0x75
0007a9 202c
0007aa e0e4
0007ab e0f2
0007ac 253a      	.DB  0x2C,0x20,0xE4,0xE0,0xF2,0xE0,0x3A,0x25
0007ad 3230
0007ae 2e75
0007af 3025
0007b0 7532      	.DB  0x30,0x32,0x75,0x2E,0x25,0x30,0x32,0x75
0007b1 252e
0007b2 3230
0007b3 2c75
0007b4 ed20      	.DB  0x2E,0x25,0x30,0x32,0x75,0x2C,0x20,0xED
0007b5 e9e0
0007b6 e5e4
0007b7 eeed
0007b8 2520      	.DB  0xE0,0xE9,0xE4,0xE5,0xED,0xEE,0x20,0x25
0007b9 2075
0007ba e5f2
0007bb ecf0
0007bc ecee      	.DB  0x75,0x20,0xF2,0xE5,0xF0,0xEC,0xEE,0xEC
0007bd f2e5
0007be eef0
0007bf 0de2
0007c0 000a      	.DB  0xE5,0xF2,0xF0,0xEE,0xE2,0xD,0xA,0x0
0007c1 e043
0007c2 e1e0
0007c3 f2fb
0007c4 e5e8      	.DB  0x43,0xE0,0xE0,0xE1,0xFB,0xF2,0xE8,0xE5
0007c5 3d20
0007c6 2520
0007c7 0d75
0007c8 000a      	.DB  0x20,0x3D,0x20,0x25,0x75,0xD,0xA,0x0
0007c9 e4d3
0007ca ebe0
0007cb ebe8
0007cc 20e8      	.DB  0xD3,0xE4,0xE0,0xEB,0xE8,0xEB,0xE8,0x20
0007cd eae0
0007ce e8f2
0007cf ede2
0007d0 fef3      	.DB  0xE0,0xEA,0xF2,0xE8,0xE2,0xED,0xF3,0xFE
0007d1 f220
0007d2 e5f0
0007d3 eee2
0007d4 f3e3      	.DB  0x20,0xF2,0xF0,0xE5,0xE2,0xEE,0xE3,0xF3
0007d5 203a
0007d6 7325
0007d7 0a0d
0007d8 c800      	.DB  0x3A,0x20,0x25,0x73,0xD,0xA,0x0,0xC8
0007d9 e8ed
0007da e8f6
0007db ebe0
0007dc e7e8      	.DB  0xED,0xE8,0xF6,0xE8,0xE0,0xEB,0xE8,0xE7
0007dd f0e8
0007de e5f3
0007df 20ec
0007e0 f1e2      	.DB  0xE8,0xF0,0xF3,0xE5,0xEC,0x20,0xE2,0xF1
0007e1 20e5
0007e2 e5f2
0007e3 ecf0
0007e4 ecee      	.DB  0xE5,0x20,0xF2,0xE5,0xF0,0xEC,0xEE,0xEC
0007e5 f2e5
0007e6 fbf0
0007e7 0d21
0007e8 000a      	.DB  0xE5,0xF2,0xF0,0xFB,0x21,0xD,0xA,0x0
0007e9 7325
0007ea 0009
0007eb f1c2
0007ec ece5      	.DB  0x25,0x73,0x9,0x0,0xC2,0xF1,0xE5,0xEC
0007ed ed20
0007ee e9e0
0007ef e5e4
0007f0 fbed      	.DB  0x20,0xED,0xE0,0xE9,0xE4,0xE5,0xED,0xFB
0007f1 20ec
0007f2 e5f2
0007f3 ecf0
0007f4 ecee      	.DB  0xEC,0x20,0xF2,0xE5,0xF0,0xEC,0xEE,0xEC
0007f5 f2e5
0007f6 e0f0
0007f7 20ec
0007f8 f0ef      	.DB  0xE5,0xF2,0xF0,0xE0,0xEC,0x20,0xEF,0xF0
0007f9 efee
0007fa f1e8
0007fb e2fb
0007fc e5e0      	.DB  0xEE,0xEF,0xE8,0xF1,0xFB,0xE2,0xE0,0xE5
0007fd 20ec
0007fe 7830
0007ff 3936
000800 3020      	.DB  0xEC,0x20,0x30,0x78,0x36,0x39,0x20,0x30
000801 4678
000802 2045
000803 202d
000804 e5d2      	.DB  0x78,0x46,0x45,0x20,0x2D,0x20,0xD2,0xE5
000805 ecf0
000806 ecee
000807 f2e5
000808 20f0      	.DB  0xF0,0xEC,0xEE,0xEC,0xE5,0xF2,0xF0,0x20
000809 20e2
00080a eeef
00080b e5ec
00080c e5f9      	.DB  0xE2,0x20,0xEF,0xEE,0xEC,0xE5,0xF9,0xE5
00080d e8ed
00080e 0de8
00080f 000a
000810 f1c2      	.DB  0xED,0xE8,0xE8,0xD,0xA,0x0,0xC2,0xF1
000811 ece5
000812 ed20
000813 e9e0
000814 e5e4      	.DB  0xE5,0xEC,0x20,0xED,0xE0,0xE9,0xE4,0xE5
000815 fbed
000816 20ec
000817 e5f2
000818 ecf0      	.DB  0xED,0xFB,0xEC,0x20,0xF2,0xE5,0xF0,0xEC
000819 ecee
00081a f2e5
00081b e0f0
00081c 20ec      	.DB  0xEE,0xEC,0xE5,0xF2,0xF0,0xE0,0xEC,0x20
00081d f0ef
00081e efee
00081f f1e8
000820 e2fb      	.DB  0xEF,0xF0,0xEE,0xEF,0xE8,0xF1,0xFB,0xE2
000821 e5e0
000822 20ec
000823 7830
000824 3936      	.DB  0xE0,0xE5,0xEC,0x20,0x30,0x78,0x36,0x39
000825 3020
000826 4678
000827 2044
000828 202d      	.DB  0x20,0x30,0x78,0x46,0x44,0x20,0x2D,0x20
000829 e5d2
00082a ecf0
00082b ecee
00082c f2e5      	.DB  0xD2,0xE5,0xF0,0xEC,0xEE,0xEC,0xE5,0xF2
00082d 20f0
00082e e0ed
00082f f320
000830 e8eb      	.DB  0xF0,0x20,0xED,0xE0,0x20,0xF3,0xEB,0xE8
000831 e5f6
000832 0a0d
000833 c200
000834 e5f1      	.DB  0xF6,0xE5,0xD,0xA,0x0,0xC2,0xF1,0xE5
000835 20ec
000836 e0ed
000837 e4e9
000838 ede5      	.DB  0xEC,0x20,0xED,0xE0,0xE9,0xE4,0xE5,0xED
000839 ecfb
00083a f220
00083b f0e5
00083c eeec      	.DB  0xFB,0xEC,0x20,0xF2,0xE5,0xF0,0xEC,0xEE
00083d e5ec
00083e f0f2
00083f ece0
000840 ef20      	.DB  0xEC,0xE5,0xF2,0xF0,0xE0,0xEC,0x20,0xEF
000841 eef0
000842 e8ef
000843 fbf1
000844 e0e2      	.DB  0xF0,0xEE,0xEF,0xE8,0xF1,0xFB,0xE2,0xE0
000845 ece5
000846 3020
000847 3678
000848 2039      	.DB  0xE5,0xEC,0x20,0x30,0x78,0x36,0x39,0x20
000849 7830
00084a 4346
00084b 2d20
00084c d220      	.DB  0x30,0x78,0x46,0x43,0x20,0x2D,0x20,0xD2
00084d f0e5
00084e eeec
00084f e5ec
000850 f0f2      	.DB  0xE5,0xF0,0xEC,0xEE,0xEC,0xE5,0xF2,0xF0
000851 ed20
000852 20e0
000853 eeef
000854 e0e4      	.DB  0x20,0xED,0xE0,0x20,0xEF,0xEE,0xE4,0xE0
000855 e5f7
000856 e220
000857 e4ee
000858 0dfb      	.DB  0xF7,0xE5,0x20,0xE2,0xEE,0xE4,0xFB,0xD
000859 000a
00085a f1c2
00085b ece5
00085c ed20      	.DB  0xA,0x0,0xC2,0xF1,0xE5,0xEC,0x20,0xED
00085d e9e0
00085e e5e4
00085f fbed
000860 20ec      	.DB  0xE0,0xE9,0xE4,0xE5,0xED,0xFB,0xEC,0x20
000861 e5f2
000862 ecf0
000863 ecee
000864 f2e5      	.DB  0xF2,0xE5,0xF0,0xEC,0xEE,0xEC,0xE5,0xF2
000865 e0f0
000866 20ec
000867 f0ef
000868 efee      	.DB  0xF0,0xE0,0xEC,0x20,0xEF,0xF0,0xEE,0xEF
000869 f1e8
00086a e2fb
00086b e5e0
00086c 20ec      	.DB  0xE8,0xF1,0xFB,0xE2,0xE0,0xE5,0xEC,0x20
00086d 7830
00086e 3936
00086f 3020
000870 4678      	.DB  0x30,0x78,0x36,0x39,0x20,0x30,0x78,0x46
000871 2042
000872 202d
000873 e5d2
000874 ecf0      	.DB  0x42,0x20,0x2D,0x20,0xD2,0xE5,0xF0,0xEC
000875 ecee
000876 f2e5
000877 20f0
000878 e0ed      	.DB  0xEE,0xEC,0xE5,0xF2,0xF0,0x20,0xED,0xE0
000879 ee20
00087a f0e1
00087b f2e0
00087c e5ea      	.DB  0x20,0xEE,0xE1,0xF0,0xE0,0xF2,0xEA,0xE5
00087d e220
00087e e4ee
00087f 0dfb
000880 000a      	.DB  0x20,0xE2,0xEE,0xE4,0xFB,0xD,0xA,0x0
000881 e0cd
000882 e0e6
000883 20f2
000884 e8f1      	.DB  0xCD,0xE0,0xE6,0xE0,0xF2,0x20,0xF1,0xE8
000885 e2ec
000886 ebee
000887 3020
000888 2578      	.DB  0xEC,0xE2,0xEE,0xEB,0x20,0x30,0x78,0x25
000889 0d78
00088a 000a      	.DB  0x78,0xD,0xA,0x0
                 _0x60033:
00088b 0600
00088c 130c
00088d 1f19
00088e 2c26      	.DB  0x0,0x6,0xC,0x13,0x19,0x1F,0x26,0x2C
00088f 3832
000890 453f
000891 514b
000892 5e58      	.DB  0x32,0x38,0x3F,0x45,0x4B,0x51,0x58,0x5E
                 _0xA0003:
000893 d954
000894 0005
000895 0001
000896 0300      	.DB  0x54,0xD9,0x5,0x0,0x1,0x0,0x0,0x3
000897 0201
000898 0001
000899 0002
00089a 0003      	.DB  0x1,0x2,0x1,0x0,0x2,0x0,0x3,0x0
00089b 1200
00089c 0401
00089d 0000
00089e 0100      	.DB  0x0,0x12,0x1,0x4,0x0,0x0,0x0,0x1
00089f 0005
0008a0 1600
0008a1 0600
0008a2 0000      	.DB  0x5,0x0,0x0,0x16,0x0,0x6,0x0,0x0
0008a3 0000
D:\MTECH\Контроллер\m32_2012_01_29\List\robowater.asm(1608): warning: .cseg .db misalignment - padding zero byte
0008a4 0007      	.DB  0x0,0x0,0x7
                 _0xA0004:
0008a5 0014
0008a6 010e
0008a7 0508
0008a8 0d00      	.DB  0x14,0x0,0xE,0x1,0x8,0x5,0x0,0xD
0008a9 0901
0008aa 0013
0008ab 010f
0008ac 030a      	.DB  0x1,0x9,0x13,0x0,0xF,0x1,0xA,0x3
0008ad 1000
0008ae 0b01
0008af 000b
0008b0 0111      	.DB  0x0,0x10,0x1,0xB,0xB,0x0,0x11,0x1
0008b1 000c
0008b2 0200
0008b3 2901
0008b4 0000      	.DB  0xC,0x0,0x0,0x2,0x1,0x29,0x0,0x0
0008b5 0118
D:\MTECH\Контроллер\m32_2012_01_29\List\robowater.asm(1614): warning: .cseg .db misalignment - padding zero byte
0008b6 002a      	.DB  0x18,0x1,0x2A
                 _0xA0005:
0008b7 0898
0008b8 0106
0008b9 d00f
0008ba 0507      	.DB  0x98,0x8,0x6,0x1,0xF,0xD0,0x7,0x5
0008bb 0d00
0008bc fea2
0008bd 0005
0008be 200e      	.DB  0x0,0xD,0xA2,0xFE,0x5,0x0,0xE,0x20
0008bf 051c
0008c0 1000
0008c1 1964
0008c2 0005      	.DB  0x1C,0x5,0x0,0x10,0x64,0x19,0x5,0x0
0008c3 2811
0008c4 0400
0008c5 1200
0008c6 002a      	.DB  0x11,0x28,0x0,0x4,0x0,0x12,0x2A,0x0
0008c7 0104
0008c8 5f13
0008c9 0400
0008ca 1400      	.DB  0x4,0x1,0x13,0x5F,0x0,0x4,0x0,0x14
0008cb 0064
0008cc 0104
0008cd 0115
0008ce 0100      	.DB  0x64,0x0,0x4,0x1,0x15,0x1,0x0,0x1
0008cf 1600
0008d0 0001
0008d1 0101
D:\MTECH\Контроллер\m32_2012_01_29\List\robowater.asm(1622): warning: .cseg .db misalignment - padding zero byte
0008d2 0017      	.DB  0x0,0x16,0x1,0x0,0x1,0x1,0x17
                 _0xA0006:
0008d3 f63c
0008d4 0107
0008d5 ac18
0008d6 080d      	.DB  0x3C,0xF6,0x7,0x1,0x18,0xAC,0xD,0x8
0008d7 1901
0008d8 03e8
0008d9 0108
0008da dc1a      	.DB  0x1,0x19,0xE8,0x3,0x8,0x1,0x1A,0xDC
0008db 0605
0008dc 1b01
0008dd 001e
0008de 010b      	.DB  0x5,0x6,0x1,0x1B,0x1E,0x0,0xB,0x1
0008df 0a1c
0008e0 0b00
0008e1 1d01
0008e2 0001      	.DB  0x1C,0xA,0x0,0xB,0x1,0x1D,0x1,0x0
0008e3 0109
0008e4 001e
0008e5 0900
0008e6 1f01      	.DB  0x9,0x1,0x1E,0x0,0x0,0x9,0x1,0x1F
0008e7 0000
0008e8 0109
0008e9 0020
0008ea 0500      	.DB  0x0,0x0,0x9,0x1,0x20,0x0,0x0,0x5
0008eb 2101
0008ec 0000
0008ed 010a
0008ee 0022      	.DB  0x1,0x21,0x0,0x0,0xA,0x1,0x22,0x0
0008ef 0500
0008f0 2301
0008f1 0000
0008f2 010a      	.DB  0x0,0x5,0x1,0x23,0x0,0x0,0xA,0x1
0008f3 0024
0008f4 0500
0008f5 2501
0008f6 0000      	.DB  0x24,0x0,0x0,0x5,0x1,0x25,0x0,0x0
0008f7 010a
0008f8 0026
0008f9 0500
0008fa 2701      	.DB  0xA,0x1,0x26,0x0,0x0,0x5,0x1,0x27
0008fb 0000
0008fc 010a
D:\MTECH\Контроллер\m32_2012_01_29\List\robowater.asm(1634): warning: .cseg .db misalignment - padding zero byte
0008fd 0028      	.DB  0x0,0x0,0xA,0x1,0x28
                 _0xA0007:
0008fe 0000
0008ff 0017
000900 003d
000901 1700      	.DB  0x0,0x0,0x17,0x0,0x3D,0x0,0x0,0x17
000902 3e00
000903 0000
000904 0017
000905 003f      	.DB  0x0,0x3E,0x0,0x0,0x17,0x0,0x3F,0x0
000906 1700
000907 4000
000908 0000
000909 0017      	.DB  0x0,0x17,0x0,0x40,0x0,0x0,0x17,0x0
00090a 0041
00090b 1700
00090c 4200
00090d 0000      	.DB  0x41,0x0,0x0,0x17,0x0,0x42,0x0,0x0
00090e 0017
00090f 0043
000910 1700
000911 4400      	.DB  0x17,0x0,0x43,0x0,0x0,0x17,0x0,0x44
000912 0000
000913 0017
000914 0045
000915 1700      	.DB  0x0,0x0,0x17,0x0,0x45,0x0,0x0,0x17
000916 4600
000917 0000
000918 0017
000919 0047      	.DB  0x0,0x46,0x0,0x0,0x17,0x0,0x47,0x0
00091a 1700
00091b 4800      	.DB  0x0,0x17,0x0,0x48
                 _0xA0000:
00091c e0c7
00091d e8ef
00091e fcf1
00091f e220      	.DB  0xC7,0xE0,0xEF,0xE8,0xF1,0xFC,0x20,0xE2
000920 e5f0
000921 e5ec
000922 e8ed
000923 2520      	.DB  0xF0,0xE5,0xEC,0xE5,0xED,0xE8,0x20,0x25
000924 3230
000925 3a75
000926 3025
000927 7532      	.DB  0x30,0x32,0x75,0x3A,0x25,0x30,0x32,0x75
000928 303a
000929 0d30
00092a 000a
00092b e0c4      	.DB  0x3A,0x30,0x30,0xD,0xA,0x0,0xC4,0xE0
00092c e0f2
00092d 2520
00092e 3230
00092f 2e75      	.DB  0xF2,0xE0,0x20,0x25,0x30,0x32,0x75,0x2E
000930 3025
000931 7532
000932 322e
000933 2530      	.DB  0x25,0x30,0x32,0x75,0x2E,0x32,0x30,0x25
000934 3230
000935 0d75
000936 000a
000937 e0c7      	.DB  0x30,0x32,0x75,0xD,0xA,0x0,0xC7,0xE0
000938 e8ef
000939 fcf1
00093a e420
00093b f2e0      	.DB  0xEF,0xE8,0xF1,0xFC,0x20,0xE4,0xE0,0xF2
00093c 20fb
00093d 3025
00093e 7532
00093f 252e      	.DB  0xFB,0x20,0x25,0x30,0x32,0x75,0x2E,0x25
000940 3230
000941 2e75
000942 3032
000943 3025      	.DB  0x30,0x32,0x75,0x2E,0x32,0x30,0x25,0x30
000944 7532
000945 0a0d
000946 c200
000947 e5f0      	.DB  0x32,0x75,0xD,0xA,0x0,0xC2,0xF0,0xE5
000948 ffec
000949 2520
00094a 3230
00094b 3a75      	.DB  0xEC,0xFF,0x20,0x25,0x30,0x32,0x75,0x3A
00094c 3025
00094d 7532
00094e 303a
00094f 0d30      	.DB  0x25,0x30,0x32,0x75,0x3A,0x30,0x30,0xD
000950 000a
000951 e4d3
000952 ebe0
000953 ebe8      	.DB  0xA,0x0,0xD3,0xE4,0xE0,0xEB,0xE8,0xEB
000954 20e8
000955 eae0
000956 e8f2
000957 ede2      	.DB  0xE8,0x20,0xE0,0xEA,0xF2,0xE8,0xE2,0xED
000958 fef3
000959 f220
00095a e5f0
00095b eee2      	.DB  0xF3,0xFE,0x20,0xF2,0xF0,0xE5,0xE2,0xEE
00095c f3e3
00095d 203a
00095e 7325
00095f 0a0d      	.DB  0xE3,0xF3,0x3A,0x20,0x25,0x73,0xD,0xA
000960 c800
000961 e8ed
000962 e8f6
000963 ebe0      	.DB  0x0,0xC8,0xED,0xE8,0xF6,0xE8,0xE0,0xEB
000964 e7e8
000965 f0e8
000966 e5f3
000967 20ec      	.DB  0xE8,0xE7,0xE8,0xF0,0xF3,0xE5,0xEC,0x20
000968 f1e2
000969 20e5
00096a e5f2
00096b ecf0      	.DB  0xE2,0xF1,0xE5,0x20,0xF2,0xE5,0xF0,0xEC
00096c ecee
00096d f2e5
00096e fbf0
00096f 0d21      	.DB  0xEE,0xEC,0xE5,0xF2,0xF0,0xFB,0x21,0xD
000970 000a
000971 7325
000972 2500
000973 c273      	.DB  0xA,0x0,0x25,0x73,0x0,0x25,0x73,0xC2
000974 cbca
000975 002e
000976 7325
000977 fbc2      	.DB  0xCA,0xCB,0x2E,0x0,0x25,0x73,0xC2,0xFB
000978 ebea
000979 002e
00097a 7325
00097b 7525      	.DB  0xEA,0xEB,0x2E,0x0,0x25,0x73,0x25,0x75
00097c 2525
00097d 2500
00097e 2573
00097f 0075      	.DB  0x25,0x25,0x0,0x25,0x73,0x25,0x75,0x0
000980 7325
000981 6425
000982 2500
000983 d173      	.DB  0x25,0x73,0x25,0x64,0x0,0x25,0x73,0xD1
000984 ced2
000985 00cf
000986 7325
000987 d0cf      	.DB  0xD2,0xCE,0xCF,0x0,0x25,0x73,0xCF,0xD0
000988 c3ce
000989 c5d0
00098a 00c2
00098b 7325      	.DB  0xCE,0xC3,0xD0,0xC5,0xC2,0x0,0x25,0x73
00098c d1ce
00098d c0d2
00098e cecd
00098f 00c2      	.DB  0xCE,0xD1,0xD2,0xC0,0xCD,0xCE,0xC2,0x0
000990 7325
000991 d3cf
000992 cad1
000993 2500      	.DB  0x25,0x73,0xCF,0xD3,0xD1,0xCA,0x0,0x25
000994 2073
000995 2a2a
000996 2500
000997 2573      	.DB  0x73,0x20,0x2A,0x2A,0x0,0x25,0x73,0x25
000998 2175
000999 2500
00099a cd73
00099b d2c5      	.DB  0x75,0x21,0x0,0x25,0x73,0xCD,0xC5,0xD2
00099c 2500
00099d c773
00099e ccc8
00099f 00c0      	.DB  0x0,0x25,0x73,0xC7,0xC8,0xCC,0xC0,0x0
0009a0 7325
0009a1 c5cb
0009a2 ced2
0009a3 2500      	.DB  0x25,0x73,0xCB,0xC5,0xD2,0xCE,0x0,0x25
0009a4 2573
0009a5 3230
0009a6 3a75
0009a7 3025      	.DB  0x73,0x25,0x30,0x32,0x75,0x3A,0x25,0x30
0009a8 7532
0009a9 2500
0009aa 2573
0009ab 3230      	.DB  0x32,0x75,0x0,0x25,0x73,0x25,0x30,0x32
0009ac 2e75
0009ad 3025
0009ae 7532
0009af 252e      	.DB  0x75,0x2E,0x25,0x30,0x32,0x75,0x2E,0x25
0009b0 3230
0009b1 0075
0009b2 7325
0009b3 c220      	.DB  0x30,0x32,0x75,0x0,0x25,0x73,0x20,0xC2
0009b4 2ef0
0009b5 c42f
0009b6 f2e0
0009b7 002e      	.DB  0xF0,0x2E,0x2F,0xC4,0xE0,0xF2,0x2E,0x0
0009b8 7325
0009b9 3025
0009ba 7533
0009bb 2500      	.DB  0x25,0x73,0x25,0x30,0x33,0x75,0x0,0x25
0009bc 2573
0009bd 2563
0009be 2e75
0009bf 2d25      	.DB  0x73,0x25,0x63,0x25,0x75,0x2E,0x25,0x2D
0009c0 3130
0009c1 4375
0009c2 2500
0009c3 3273      	.DB  0x30,0x31,0x75,0x43,0x0,0x25,0x73,0x32
0009c4 2530
0009c5 0075
0009c6 fbc2
0009c7 eee1      	.DB  0x30,0x25,0x75,0x0,0xC2,0xFB,0xE1,0xEE
0009c8 20f0
0009c9 e5ec
0009ca feed
0009cb 5b20      	.DB  0xF0,0x20,0xEC,0xE5,0xED,0xFE,0x20,0x5B
0009cc 7525
0009cd 202c
0009ce 7525
0009cf 005d      	.DB  0x25,0x75,0x2C,0x20,0x25,0x75,0x5D,0x0
0009d0 3120
0009d1 2029
0009d2 7325
0009d3 092c      	.DB  0x20,0x31,0x29,0x20,0x25,0x73,0x2C,0x9
0009d4 2932
0009d5 2520
0009d6 0d73
0009d7 000a      	.DB  0x32,0x29,0x20,0x25,0x73,0xD,0xA,0x0
0009d8 e5d2
0009d9 f3ea
0009da e5f9
0009db 20e5      	.DB  0xD2,0xE5,0xEA,0xF3,0xF9,0xE5,0xE5,0x20
0009dc e5ec
0009dd feed
0009de 203a
0009df 2500      	.DB  0xEC,0xE5,0xED,0xFE,0x3A,0x20,0x0,0x25
0009e0 0973
D:\MTECH\Контроллер\m32_2012_01_29\List\robowater.asm(1694): warning: .cseg .db misalignment - padding zero byte
0009e1 0000      	.DB  0x73,0x9,0x0
                 _0xC0000:
0009e2 e0c7
0009e3 e8ef
0009e4 fbf1
0009e5 e0e2      	.DB  0xC7,0xE0,0xEF,0xE8,0xF1,0xFB,0xE2,0xE0
0009e6 ece5
0009e7 5320
0009e8 5445
0009e9 4954      	.DB  0xE5,0xEC,0x20,0x53,0x45,0x54,0x54,0x49
0009ea 474e
0009eb 2053
0009ec 20e2
0009ed 4545      	.DB  0x4E,0x47,0x53,0x20,0xE2,0x20,0x45,0x45
0009ee 5250
0009ef 4d4f
0009f0 5b20
0009f1 7830      	.DB  0x50,0x52,0x4F,0x4D,0x20,0x5B,0x30,0x78
0009f2 7825
0009f3 3a5d
0009f4 0020
0009f5 0a0d      	.DB  0x25,0x78,0x5D,0x3A,0x20,0x0,0xD,0xA
0009f6 c700
0009f7 efe0
0009f8 f1e8
0009f9 e2fb      	.DB  0x0,0xC7,0xE0,0xEF,0xE8,0xF1,0xFB,0xE2
0009fa e5e0
0009fb 20ec
0009fc 4c41
0009fd 5241      	.DB  0xE0,0xE5,0xEC,0x20,0x41,0x4C,0x41,0x52
0009fe 204d
0009ff 2523
000a00 2075
000a01 20e2      	.DB  0x4D,0x20,0x23,0x25,0x75,0x20,0xE2,0x20
000a02 4545
000a03 5250
000a04 4d4f
000a05 5b20      	.DB  0x45,0x45,0x50,0x52,0x4F,0x4D,0x20,0x5B
000a06 7830
000a07 7825
000a08 205d
000a09 eeef      	.DB  0x30,0x78,0x25,0x78,0x5D,0x20,0xEF,0xEE
000a0a e020
000a0b f0e4
000a0c f1e5
000a0d 20f3      	.DB  0x20,0xE0,0xE4,0xF0,0xE5,0xF1,0xF3,0x20
000a0e 7830
000a0f 7825
000a10 0d3a
000a11 000a      	.DB  0x30,0x78,0x25,0x78,0x3A,0xD,0xA,0x0
000a12 f7d1
000a13 f2e8
000a14 e2fb
000a15 e5e0      	.DB  0xD1,0xF7,0xE8,0xF2,0xFB,0xE2,0xE0,0xE5
000a16 20ec
000a17 e7e8
000a18 4520
000a19 5045      	.DB  0xEC,0x20,0xE8,0xE7,0x20,0x45,0x45,0x50
000a1a 4f52
000a1b 204d
000a1c 305b
000a1d 2578      	.DB  0x52,0x4F,0x4D,0x20,0x5B,0x30,0x78,0x25
000a1e 5d78
000a1f 203a
D:\MTECH\Контроллер\m32_2012_01_29\List\robowater.asm(1711): warning: .cseg .db misalignment - padding zero byte
000a20 0000      	.DB  0x78,0x5D,0x3A,0x20,0x0
                 _0xE0000:
000a21 3025
000a22 7532
000a23 253a
000a24 3230      	.DB  0x25,0x30,0x32,0x75,0x3A,0x25,0x30,0x32
000a25 2075
000a26 3025
000a27 7532
000a28 252e      	.DB  0x75,0x20,0x25,0x30,0x32,0x75,0x2E,0x25
000a29 3230
000a2a 0075
000a2b 7325
000a2c 3e00      	.DB  0x30,0x32,0x75,0x0,0x25,0x73,0x0,0x3E
000a2d 2520
000a2e 2073
000a2f 6925
000a30 2520      	.DB  0x20,0x25,0x73,0x20,0x25,0x69,0x20,0x25
000a31 2069
000a32 7325
000a33 0a0d
000a34 c200      	.DB  0x69,0x20,0x25,0x73,0xD,0xA,0x0,0xC2
000a35 e5f1
000a36 e020
000a37 e0e2
000a38 e8f0      	.DB  0xF1,0xE5,0x20,0xE0,0xE2,0xE0,0xF0,0xE8
000a39 3ae8
000a3a 0a0d
D:\MTECH\Контроллер\m32_2012_01_29\List\robowater.asm(1719): warning: .cseg .db misalignment - padding zero byte
000a3b 0000      	.DB  0xE8,0x3A,0xD,0xA,0x0
                 _0x100000:
000a3c f2d1
000a3d eaf3
000a3e f3f2
000a3f e0f0      	.DB  0xD1,0xF2,0xF3,0xEA,0xF2,0xF3,0xF0,0xE0
000a40 7320
000a41 6769
000a42 616e
000a43 736c      	.DB  0x20,0x73,0x69,0x67,0x6E,0x61,0x6C,0x73
000a44 3d20
000a45 2000
000a46 7825
000a47 0d00      	.DB  0x20,0x3D,0x0,0x20,0x25,0x78,0x0,0xD
000a48 000a      	.DB  0xA,0x0
                 _0x120003:
000a49 00ff
000a4a 0000
000a4b 0000
000a4c 0000      	.DB  0xFF,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000a4d 0333
000a4e 00ff
000a4f 0000
000a50 0000      	.DB  0x33,0x3,0xFF,0x0,0x0,0x0,0x0,0x0
000a51 0000
000a52 0533
000a53 00ff
000a54 0000      	.DB  0x0,0x0,0x33,0x5,0xFF,0x0,0x0,0x0
000a55 0000
000a56 0000
000a57 0633
000a58 00ff      	.DB  0x0,0x0,0x0,0x0,0x33,0x6,0xFF,0x0
000a59 0000
000a5a 0000
000a5b 0000
000a5c 0733      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x33,0x7
000a5d 00ff
000a5e 0000
000a5f 0000
000a60 0000      	.DB  0xFF,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000a61 0233
000a62 00ff
000a63 0000
000a64 0000      	.DB  0x33,0x2,0xFF,0x0,0x0,0x0,0x0,0x0
000a65 0000
000a66 0433
000a67 00ff
000a68 0000      	.DB  0x0,0x0,0x33,0x4,0xFF,0x0,0x0,0x0
000a69 0000
000a6a 0000
000a6b 0136      	.DB  0x0,0x0,0x0,0x0,0x36,0x1
                 _0x204005F:
D:\MTECH\Контроллер\m32_2012_01_29\List\robowater.asm(1736): warning: .cseg .db misalignment - padding zero byte
000a6c 0001      	.DB  0x1
                 _0x2040000:
000a6d 4e2d
000a6e 4e41
D:\MTECH\Контроллер\m32_2012_01_29\List\robowater.asm(1738): warning: .cseg .db misalignment - padding zero byte
000a6f 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 
                 __GLOBAL_INI_TBL:
000a70 0009      	.DW  0x09
000a71 0060      	.DW  0x60
000a72 03c6      	.DW  __DSTACK_END*2
                 
000a73 0009      	.DW  0x09
000a74 0000      	.DW  0x00
000a75 03d0      	.DW  __HSTACK_END*2
                 
000a76 0007      	.DW  0x07
000a77 01b8      	.DW  _mode
000a78 0480      	.DW  _0x40003*2
                 
000a79 0058      	.DW  0x58
000a7a 0160      	.DW  _prim_par
000a7b 0488      	.DW  _0x40004*2
                 
000a7c 0001      	.DW  0x01
000a7d 0006      	.DW  0x06
000a7e 04e0      	.DW  _0x4016C*2
                 
000a7f 0023      	.DW  0x23
000a80 0234      	.DW  _main_menu
000a81 1126      	.DW  _0xA0003*2
                 
000a82 0023      	.DW  0x23
000a83 02ee      	.DW  _sdt
000a84 114a      	.DW  _0xA0004*2
                 
000a85 0037      	.DW  0x37
000a86 0257      	.DW  _parameters
000a87 116e      	.DW  _0xA0005*2
                 
000a88 0055      	.DW  0x55
000a89 0311      	.DW  _settings
000a8a 11a6      	.DW  _0xA0006*2
                 
000a8b 003c      	.DW  0x3C
000a8c 028e      	.DW  _alerts
000a8d 11fc      	.DW  _0xA0007*2
                 
000a8e 0046      	.DW  0x46
000a8f 03b2      	.DW  _keys
000a90 1492      	.DW  _0x120003*2
                 
000a91 0001      	.DW  0x01
000a92 03f8      	.DW  __seed_G102
000a93 14d8      	.DW  _0x204005F*2
                 
                 _0xFFFFFFFF:
000a94 0000      	.DW  0
                 
                 __RESET:
000a95 94f8      	CLI
000a96 27ee      	CLR  R30
000a97 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000a98 e0f1      	LDI  R31,1
000a99 bffb      	OUT  GICR,R31
000a9a bfeb      	OUT  GICR,R30
000a9b bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000a9c e1f8      	LDI  R31,0x18
000a9d bdf1      	OUT  WDTCR,R31
000a9e bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000a9f e08d      	LDI  R24,(14-2)+1
000aa0 e0a2      	LDI  R26,2
000aa1 27bb      	CLR  R27
                 __CLEAR_REG:
000aa2 93ed      	ST   X+,R30
000aa3 958a      	DEC  R24
000aa4 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000aa5 e080      	LDI  R24,LOW(0x800)
000aa6 e098      	LDI  R25,HIGH(0x800)
000aa7 e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
000aa8 93ed      	ST   X+,R30
000aa9 9701      	SBIW R24,1
000aaa f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000aab eee0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000aac e1f4      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000aad 9185      	LPM  R24,Z+
000aae 9195      	LPM  R25,Z+
000aaf 9700      	SBIW R24,0
000ab0 f061      	BREQ __GLOBAL_INI_END
000ab1 91a5      	LPM  R26,Z+
000ab2 91b5      	LPM  R27,Z+
000ab3 9005      	LPM  R0,Z+
000ab4 9015      	LPM  R1,Z+
000ab5 01bf      	MOVW R22,R30
000ab6 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000ab7 9005      	LPM  R0,Z+
000ab8 920d      	ST   X+,R0
000ab9 9701      	SBIW R24,1
000aba f7e1      	BRNE __GLOBAL_INI_LOOP
000abb 01fb      	MOVW R30,R22
000abc cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
000abd e5ef      	LDI  R30,LOW(0x85F)
000abe bfed      	OUT  SPL,R30
000abf e0e8      	LDI  R30,HIGH(0x85F)
000ac0 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000ac1 e6c0      	LDI  R28,LOW(0x160)
000ac2 e0d1      	LDI  R29,HIGH(0x160)
                 
000ac3 940c 0d5a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.03.9 Standard
                 ;Automatic Program Generator
                 ;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : Robo Water
                 ;Version : 1.0
                 ;Date    : 02.03.2011
                 ;Author  : Admin
                 ;Company : Microsoft
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 3686400 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*****************************************************/
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;// I2C Bus functions
                 ;#asm
                    .equ __i2c_port=0x15 ;PORTC
                    .equ __sda_bit=1
                    .equ __scl_bit=0
                 ; 0000 001D #endasm
                 ;#include <i2c.h>
                 ;// DS1307 Real Time Clock functions
                 ;#include <ds1307.h>
                 ;// 1 Wire Bus functions
                 ;#asm
                    .equ __w1_port=0x18 ;PORTB
                    .equ __w1_bit=0
                 ; 0000 0025 #endasm
                 ;#include <1wire.h>
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include "robowater.h"
                 ;#include "spd1820.h"
                 ;#include "valcoder.h"
                 ;#include "lcd_4bit.h"
                 ;#include "menu.h"
                 ;#include "signals.h"
                 ;#include "at2404.h"
                 ;#include "keys.h"
                 ;#define NODEBUG
                 ;// Описание локальных функций
                 ;unsigned int read_adc(unsigned char);
                 ;// Переменная timer1
                 ;byte timer1_valcoder = 0;
                 ;unsigned int timer_start = 0;
                 ;byte timer_stop = 0;
                 ;byte timer_fan = 0;
                 ;byte count_fan = 0;
                 ;
                 ;// Ежесекундное прерывание
                 ;interrupt [EXT_INT2] void ext_int2_isr(void) {
                 ; 0000 003E interrupt [4] void ext_int2_isr(void) {
                 
                 	.CSEG
                 _ext_int2_isr:
000ac5 940e 291c 	CALL SUBOPT_0x0
                 ; 0000 003F     #ifndef NODEBUG
                 ; 0000 0040     // printf ("%02u:%02u Начало прерывания Секунда...", s_dt.cMM, s_dt.cSS);
                 ; 0000 0041     // printf (".");
                 ; 0000 0042     #endif
                 ; 0000 0043     if (timer_fan) timer_fan--;
000ac7 91e0 01d8 	LDS  R30,_timer_fan
000ac9 30e0      	CPI  R30,0
000aca f019      	BREQ _0x3
000acb 50e1      	SUBI R30,LOW(1)
000acc 93e0 01d8 	STS  _timer_fan,R30
                 ; 0000 0044     if (timer_start) {
                 _0x3:
000ace 91e0 01d5 	LDS  R30,_timer_start
000ad0 91f0 01d6 	LDS  R31,_timer_start+1
000ad2 9730      	SBIW R30,0
000ad3 f109      	BREQ _0x4
                 ; 0000 0045         timer_start--;
000ad4 eda5      	LDI  R26,LOW(_timer_start)
000ad5 e0b1      	LDI  R27,HIGH(_timer_start)
000ad6 91ed      	LD   R30,X+
000ad7 91fd      	LD   R31,X+
000ad8 9731      	SBIW R30,1
000ad9 93fe      	ST   -X,R31
000ada 93ee      	ST   -X,R30
                 ; 0000 0046         // Если достигли нуля, то включаем вентилятор
                 ; 0000 0047         if (!timer_start && (mode.run == 1)) {         // event = ev_timer_Start;
000adb 91e0 01d5 	LDS  R30,_timer_start
000add 91f0 01d6 	LDS  R31,_timer_start+1
000adf 9730      	SBIW R30,0
000ae0 f421      	BRNE _0x6
                +
000ae1 91a0 01b9+LDS R26 , _mode + 1
                 	__GETB2MN _mode,1
000ae3 30a1      	CPI  R26,LOW(0x1)
000ae4 f009      	BREQ _0x7
                 _0x6:
000ae5 c00f      	RJMP _0x5
                 _0x7:
                 ; 0000 0048              mode.fan = 1;
000ae6 e0e1      	LDI  R30,LOW(1)
                +
000ae7 93e0 01bc+STS _mode + 4 , R30
                 	__PUTB1MN _mode,4
                 ; 0000 0049              printf ("ПУСК \r\n");
                +
000ae9 edea     +LDI R30 , LOW ( 2 * _0x0 + 0 )
000aea e0f3     +LDI R31 , HIGH ( 2 * _0x0 + 0 )
                 	__POINTW1FN _0x0,0
000aeb 940e 292a 	CALL SUBOPT_0x1
                 ; 0000 004A              mode.run=3;                // Включаем режим Пуск
000aed e0e3      	LDI  R30,LOW(3)
                +
000aee 93e0 01b9+STS _mode + 1 , R30
                 	__PUTB1MN _mode,1
                 ; 0000 004B              count_fan = 0;
000af0 e0e0      	LDI  R30,LOW(0)
000af1 93e0 01d9 	STS  _count_fan,R30
                 ; 0000 004C              signal_green(ON);
000af3 940e 2931 	CALL SUBOPT_0x2
                 ; 0000 004D         }
                 ; 0000 004E     }
                 _0x5:
                 ; 0000 004F     if (timer_stop) {
                 _0x4:
000af5 91e0 01d7 	LDS  R30,_timer_stop
000af7 30e0      	CPI  R30,0
000af8 f071      	BREQ _0x8
                 ; 0000 0050         timer_stop--;
000af9 50e1      	SUBI R30,LOW(1)
000afa 93e0 01d7 	STS  _timer_stop,R30
                 ; 0000 0051         // Если достигли нуля, то выключаем вентилятор
                 ; 0000 0052         if (!timer_stop && (mode.run == 2)) {          // event = ev_timer_Stop;
000afc 30e0      	CPI  R30,0
000afd f421      	BRNE _0xA
                +
000afe 91a0 01b9+LDS R26 , _mode + 1
                 	__GETB2MN _mode,1
000b00 30a2      	CPI  R26,LOW(0x2)
000b01 f009      	BREQ _0xB
                 _0xA:
000b02 c004      	RJMP _0x9
                 _0xB:
                 ; 0000 0053             mode.run = 0;
000b03 940e 2935 	CALL SUBOPT_0x3
                 ; 0000 0054             mode.fan = 0;           // Выключение насоса
                 ; 0000 0055             // printf ("Остановили Вентилятор Режим СТОП \r\n");
                 ; 0000 0056             signal_green(OFF);
000b05 940e 293b 	CALL SUBOPT_0x4
                 ; 0000 0057         }
                 ; 0000 0058     }
                 _0x9:
                 ; 0000 0059      // Пока timer1_counter > 0, уменьшаем его значение
                 ; 0000 005A     if (timer1_valcoder) {
                 _0x8:
000b07 91e0 01d4 	LDS  R30,_timer1_valcoder
000b09 30e0      	CPI  R30,0
000b0a f091      	BREQ _0xC
                 ; 0000 005B         timer1_valcoder--;
000b0b 50e1      	SUBI R30,LOW(1)
000b0c 93e0 01d4 	STS  _timer1_valcoder,R30
                 ; 0000 005C         // Если достигли нуля, то останавливаем обслуживание valcoder
                 ; 0000 005D         if (!timer1_valcoder) {
000b0e 30e0      	CPI  R30,0
000b0f f469      	BRNE _0xD
                 ; 0000 005E             if (event)
000b10 91e0 01cb 	LDS  R30,_event
000b12 30e0      	CPI  R30,0
000b13 f031      	BREQ _0xE
                 ; 0000 005F                 timer1_valcoder++;
000b14 91e0 01d4 	LDS  R30,_timer1_valcoder
000b16 5fef      	SUBI R30,-LOW(1)
000b17 93e0 01d4 	STS  _timer1_valcoder,R30
                 ; 0000 0060             else
000b19 c003      	RJMP _0xF
                 _0xE:
                 ; 0000 0061                 event = ev_timer;
000b1a e0e6      	LDI  R30,LOW(6)
000b1b 93e0 01cb 	STS  _event,R30
                 ; 0000 0062             // clatsman.valcoder_mode = 0; lcd_clrscr();
                 ; 0000 0063         }
                 _0xF:
                 ; 0000 0064     }
                 _0xD:
                 ; 0000 0065     if (!mode.stop_sync_dt) get_cur_dt (0);
                 _0xC:
                +
000b1d 91e0 01bd+LDS R30 , _mode + 5
                 	__GETB1MN _mode,5
000b1f 30e0      	CPI  R30,0
000b20 f419      	BRNE _0x10
000b21 e0e0      	LDI  R30,LOW(0)
000b22 93ea      	ST   -Y,R30
000b23 d06f      	RCALL _get_cur_dt
                 ; 0000 0066     read_all_terms(DUTY_MODE);
                 _0x10:
000b24 e0e0      	LDI  R30,LOW(0)
000b25 93ea      	ST   -Y,R30
000b26 940e 197e 	CALL _read_all_terms
                 ; 0000 0067     // Вычитаваем АЦП
                 ; 0000 0068     ADC_VAR2 = read_adc(0)/4;
000b28 e0e0      	LDI  R30,LOW(0)
000b29 93ea      	ST   -Y,R30
000b2a d03d      	RCALL _read_adc
000b2b 940e 2f43 	CALL __LSRW2
                +
000b2d 93e0 027a+STS _parameters + 35 , R30
000b2f 93f0 027b+STS _parameters + 35 + 1 , R31
                 	__PUTW1MN _parameters,35
                 ; 0000 0069     ADC_VAR1 = read_adc(1)/4;
000b31 e0e1      	LDI  R30,LOW(1)
000b32 93ea      	ST   -Y,R30
000b33 d034      	RCALL _read_adc
000b34 940e 2f43 	CALL __LSRW2
                +
000b36 93e0 0270+STS _parameters + 25 , R30
000b38 93f0 0271+STS _parameters + 25 + 1 , R31
                 	__PUTW1MN _parameters,25
                 ; 0000 006A     if (time_integration) time_integration--;
000b3a 940e 293f 	CALL SUBOPT_0x5
000b3c 9730      	SBIW R30,0
000b3d f039      	BREQ _0x11
000b3e eda2      	LDI  R26,LOW(_time_integration)
000b3f e0b1      	LDI  R27,HIGH(_time_integration)
000b40 91ed      	LD   R30,X+
000b41 91fd      	LD   R31,X+
000b42 9731      	SBIW R30,1
000b43 93fe      	ST   -X,R31
000b44 93ee      	ST   -X,R30
                 ; 0000 006B     #ifndef NODEBUG
                 ; 0000 006C     // printf ("конец в %02u:%02u\r\n", s_dt.cMM, s_dt.cSS);
                 ; 0000 006D     #endif
                 ; 0000 006E     if CHECK_EVENT {
                 _0x11:
000b45 91e0 01cb 	LDS  R30,_event
000b47 30e0      	CPI  R30,0
000b48 f419      	BRNE _0x12
                 ; 0000 006F         event = ev_secunda;
000b49 e0e5      	LDI  R30,LOW(5)
000b4a 93e0 01cb 	STS  _event,R30
                 ; 0000 0070         #ifndef NODEBUG
                 ; 0000 0071         // printf ("%02u:%02u Сгенерировано событие Секунда\r\n", s_dt.cMM, s_dt.cSS);
                 ; 0000 0072         #endif
                 ; 0000 0073     }
                 ; 0000 0074     #ifndef NODEBUG
                 ; 0000 0075     else
                 ; 0000 0076         printf ("Текущее событие = %u\r\n", (unsigned char)event);
                 ; 0000 0077     #endif
                 ; 0000 0078     // parameters[0].val_data = termometers[0].t;
                 ; 0000 0079 }
                 _0x12:
000b4c c00c      	RJMP _0x18
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0000 007B interrupt [12] void timer0_ovf_isr(void) {
                 _timer0_ovf_isr:
                 ; 0000 007C // Нельзя использовать. Задействовано для PWM
                 ; 0000 007D }
000b4d 9518      	RETI
                 ;// Timer 1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void) {
                 ; 0000 007F interrupt [10] void timer1_ovf_isr(void) {
                 _timer1_ovf_isr:
000b4e 940e 291c 	CALL SUBOPT_0x0
                 ; 0000 0080     update_signal_status();
000b50 940e 2528 	CALL _update_signal_status
                 ; 0000 0081     if (t_key) t_key--;
000b52 91e0 02d5 	LDS  R30,_t_key
000b54 30e0      	CPI  R30,0
000b55 f019      	BREQ _0x13
000b56 50e1      	SUBI R30,LOW(1)
000b57 93e0 02d5 	STS  _t_key,R30
                 ; 0000 0082 }
                 _0x13:
                 _0x18:
000b59 91e9      	LD   R30,Y+
000b5a bfef      	OUT  SREG,R30
000b5b 91f9      	LD   R31,Y+
000b5c 91e9      	LD   R30,Y+
000b5d 91b9      	LD   R27,Y+
000b5e 91a9      	LD   R26,Y+
000b5f 9199      	LD   R25,Y+
000b60 9189      	LD   R24,Y+
000b61 9179      	LD   R23,Y+
000b62 9169      	LD   R22,Y+
000b63 90f9      	LD   R15,Y+
000b64 9019      	LD   R1,Y+
000b65 9009      	LD   R0,Y+
000b66 9518      	RETI
                 ;// Timer 2 overflow interrupt service routine
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void) {
                 ; 0000 0084 interrupt [6] void timer2_ovf_isr(void) {
                 _timer2_ovf_isr:
                 ; 0000 0085 // Нельзя использовать. Задействовано для PWM
                 ; 0000 0086 }
000b67 9518      	RETI
                 ;#define ADC_VREF_TYPE 0xC0
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input) {
                 ; 0000 0089 unsigned int read_adc(unsigned char adc_input) {
                 _read_adc:
                 ; 0000 008A     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
000b68 81e8      	LD   R30,Y
000b69 6ce0      	ORI  R30,LOW(0xC0)
000b6a b9e7      	OUT  0x7,R30
                 ; 0000 008B     delay_us(10);   // Delay needed for the stabilization of the ADC input voltage
                +
000b6b e08c     +LDI R24 , LOW ( 12 )
                +__DELAY_USB_LOOP :
000b6c 958a     +DEC R24
000b6d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 12
                 ; 0000 008C     ADCSRA|=0x40;   // Start the AD conversion
000b6e 9a36      	SBI  0x6,6
                 ; 0000 008D     while ((ADCSRA & 0x10)==0); // Wait for the AD conversion to complete
                 _0x14:
000b6f 9b34      	SBIS 0x6,4
000b70 cffe      	RJMP _0x14
                 ; 0000 008E     ADCSRA|=0x10;
000b71 9a34      	SBI  0x6,4
                 ; 0000 008F     return ADCW;
000b72 b1e4      	IN   R30,0x4
000b73 b1f5      	IN   R31,0x4+1
000b74 c1e3      	RJMP _0x20E0019
                 ; 0000 0090 }
                 ;#pragma used+
                 ;void set_cur_dt (void) {
                 ; 0000 0092 void set_cur_dt (void) {
                 _set_cur_dt:
                 ; 0000 0093     #asm("cli")
000b75 94f8      	cli
                 ; 0000 0094     rtc_set_time(s_dt.cHH, s_dt.cMM, s_dt.cSS);
000b76 91e0 01cc 	LDS  R30,_s_dt
000b78 93ea      	ST   -Y,R30
                +
000b79 91e0 01cd+LDS R30 , _s_dt + 1
                 	__GETB1MN _s_dt,1
000b7b 93ea      	ST   -Y,R30
                +
000b7c 91e0 01ce+LDS R30 , _s_dt + 2
                 	__GETB1MN _s_dt,2
000b7e 93ea      	ST   -Y,R30
000b7f 940e 2713 	CALL _rtc_set_time
                 ; 0000 0095     rtc_set_date(s_dt.cdd, s_dt.cmo, s_dt.cyy);
                +
000b81 91e0 01d1+LDS R30 , _s_dt + 5
                 	__GETB1MN _s_dt,5
000b83 93ea      	ST   -Y,R30
                +
000b84 91e0 01d0+LDS R30 , _s_dt + 4
                 	__GETB1MN _s_dt,4
000b86 93ea      	ST   -Y,R30
                +
000b87 91e0 01cf+LDS R30 , _s_dt + 3
                 	__GETB1MN _s_dt,3
000b89 93ea      	ST   -Y,R30
000b8a 940e 273b 	CALL _rtc_set_date
                 ; 0000 0096     #asm("sei")
000b8c 9478      	sei
                 ; 0000 0097     delay_ms (200);
000b8d 940e 2944 	CALL SUBOPT_0x6
                 ; 0000 0098     get_cur_dt(FORCE_INIT);
000b8f e0e1      	LDI  R30,LOW(1)
000b90 93ea      	ST   -Y,R30
000b91 d001      	RCALL _get_cur_dt
                 ; 0000 0099     // rtc_set_date(3, 13, 11); 	// 03.13.2011
                 ; 0000 009A     // rtc_set_time(17, 22, 0); 	// 17:22:00
                 ; 0000 009B }
000b92 9508      	RET
                 ;
                 ;void get_cur_dt (unsigned char force) {
                 ; 0000 009D void get_cur_dt (unsigned char force) {
                 _get_cur_dt:
                 ; 0000 009E     if (force) {
                 ;	force -> Y+0
000b93 81e8      	LD   R30,Y
000b94 30e0      	CPI  R30,0
000b95 f031      	BREQ _0x17
                 ; 0000 009F         rtc_init(0,1,0);            // Устанавливаем односекундное срабатывание интерапта
000b96 940e 294a 	CALL SUBOPT_0x7
000b98 e0e0      	LDI  R30,LOW(0)
000b99 93ea      	ST   -Y,R30
000b9a 940e 26ed 	CALL _rtc_init
                 ; 0000 00A0         #ifndef NODEBUG
                 ; 0000 00A1         printf ("Проинициализировали ежесекундное прерывание\r\n");
                 ; 0000 00A2         #endif
                 ; 0000 00A3     }
                 ; 0000 00A4     // Время
                 ; 0000 00A5     rtc_get_time(&s_dt.cHH,&s_dt.cMM,&s_dt.cSS);
                 _0x17:
000b9c ecec      	LDI  R30,LOW(_s_dt)
000b9d e0f1      	LDI  R31,HIGH(_s_dt)
000b9e 93fa      	ST   -Y,R31
000b9f 93ea      	ST   -Y,R30
                +
000ba0 eced     +LDI R30 , LOW ( _s_dt + 1 )
000ba1 e0f1     +LDI R31 , HIGH ( _s_dt + 1 )
                 	__POINTW1MN _s_dt,1
000ba2 93fa      	ST   -Y,R31
000ba3 93ea      	ST   -Y,R30
                +
000ba4 ecee     +LDI R30 , LOW ( _s_dt + 2 )
000ba5 e0f1     +LDI R31 , HIGH ( _s_dt + 2 )
                 	__POINTW1MN _s_dt,2
000ba6 93fa      	ST   -Y,R31
000ba7 93ea      	ST   -Y,R30
000ba8 940e 2702 	CALL _rtc_get_time
                 ; 0000 00A6     // Дата
                 ; 0000 00A7     rtc_get_date(&s_dt.cdd,&s_dt.cmo,&s_dt.cyy);
                +
000baa ede1     +LDI R30 , LOW ( _s_dt + 5 )
000bab e0f1     +LDI R31 , HIGH ( _s_dt + 5 )
                 	__POINTW1MN _s_dt,5
000bac 93fa      	ST   -Y,R31
000bad 93ea      	ST   -Y,R30
                +
000bae ede0     +LDI R30 , LOW ( _s_dt + 4 )
000baf e0f1     +LDI R31 , HIGH ( _s_dt + 4 )
                 	__POINTW1MN _s_dt,4
000bb0 93fa      	ST   -Y,R31
000bb1 93ea      	ST   -Y,R30
                +
000bb2 ecef     +LDI R30 , LOW ( _s_dt + 3 )
000bb3 e0f1     +LDI R31 , HIGH ( _s_dt + 3 )
                 	__POINTW1MN _s_dt,3
000bb4 93fa      	ST   -Y,R31
000bb5 93ea      	ST   -Y,R30
000bb6 940e 2724 	CALL _rtc_get_date
                 ; 0000 00A8 }
000bb8 c19f      	RJMP _0x20E0019
                 ;
                 ;#pragma used-
                 ;// Инициализация UART. Скорость на порту задается #define BAUDRATE
                 ;void init_uart(void) {
                 ; 0000 00AC void init_uart(void) {
                 _init_uart:
                 ; 0000 00AD 	word bauddiv;
                 ; 0000 00AE 	// USART initialization Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00AF     // USART Receiver: On
                 ; 0000 00B0     // USART Transmitter: On
                 ; 0000 00B1 	UCSRA=0x00; UCSRC=0x86; UCSRB = (1<<TXEN) | (1<<RXEN);
000bb9 931a      	ST   -Y,R17
000bba 930a      	ST   -Y,R16
                 ;	bauddiv -> R16,R17
000bbb e0e0      	LDI  R30,LOW(0)
000bbc b9eb      	OUT  0xB,R30
000bbd e8e6      	LDI  R30,LOW(134)
000bbe bde0      	OUT  0x20,R30
000bbf e1e8      	LDI  R30,LOW(24)
000bc0 b9ea      	OUT  0xA,R30
                 ; 0000 00B2     bauddiv = ((_MCU_CLOCK_FREQUENCY_ + (BAUDRATE * 8L))/(BAUDRATE * 16L) - 1);
                +
000bc1 e001     +LDI R16 , LOW ( 1 )
000bc2 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 00B3     UBRRL = (unsigned char)bauddiv;
000bc3 b909      	OUT  0x9,R16
                 ; 0000 00B4 	UBRRH = bauddiv >> 8;
000bc4 2fe1      	MOV  R30,R17
000bc5 70f0      	ANDI R31,HIGH(0x0)
000bc6 bde0      	OUT  0x20,R30
                 ; 0000 00B5 }
000bc7 9109      	LD   R16,Y+
000bc8 9119      	LD   R17,Y+
000bc9 9508      	RET
                 ;// Инициализация всех термометров в системе
                 ;void init_terms(void) {
                 ; 0000 00B7 void init_terms(void) {
                 _init_terms:
                 ; 0000 00B8     printf ("Поиск всех термометров на шине 1-Wire. Найдено: ");
                +
000bca eee2     +LDI R30 , LOW ( 2 * _0x0 + 8 )
000bcb e0f3     +LDI R31 , HIGH ( 2 * _0x0 + 8 )
                 	__POINTW1FN _0x0,8
000bcc 940e 292a 	CALL SUBOPT_0x1
                 ; 0000 00B9     ds1820_devices = w1_search(0xf0,ds1820_rom_codes);
000bce 940e 294f 	CALL SUBOPT_0x8
                +
000bd0 93e0 0193+STS _prim_par + 51 , R30
                 	__PUTB1MN _prim_par,51
                 ; 0000 00BA     delay_ms (DS1820_ALL_DELAY);
000bd2 940e 2944 	CALL SUBOPT_0x6
                 ; 0000 00BB     printf ("%d штук\r\n", ds1820_devices);
                +
000bd4 e1e3     +LDI R30 , LOW ( 2 * _0x0 + 57 )
000bd5 e0f4     +LDI R31 , HIGH ( 2 * _0x0 + 57 )
                 	__POINTW1FN _0x0,57
000bd6 93fa      	ST   -Y,R31
000bd7 93ea      	ST   -Y,R30
000bd8 940e 2957 	CALL SUBOPT_0x9
000bda 940e 295f 	CALL SUBOPT_0xA
                 ; 0000 00BC }
000bdc 9508      	RET
                 ;// Основной инициализационный модуль
                 ;void init(void) {
                 ; 0000 00BE void init(void) {
                 _init:
                 ; 0000 00BF     // byte tmp_ret; // byte resolution;
                 ; 0000 00C0     // signed char tmp_alarm_h, tmp_alarm_l;
                 ; 0000 00C1     // Port A initialization
                 ; 0000 00C2     /* Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=In
                 ; 0000 00C3     // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=T
                 ; 0000 00C4     */
                 ; 0000 00C5     PORTA=0x00; DDRA=0xFC;
000bdd e0e0      	LDI  R30,LOW(0)
000bde bbeb      	OUT  0x1B,R30
000bdf efec      	LDI  R30,LOW(252)
000be0 bbea      	OUT  0x1A,R30
                 ; 0000 00C6 
                 ; 0000 00C7     // Port B initialization
                 ; 0000 00C8     /* Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
                 ; 0000 00C9     // State7=0 State6=0 State5=0 State4=0 State3=0 State2=P State1=P State0=P
                 ; 0000 00CA     */
                 ; 0000 00CB     PORTB=0x07; DDRB=0xF8;
000be1 e0e7      	LDI  R30,LOW(7)
000be2 bbe8      	OUT  0x18,R30
000be3 efe8      	LDI  R30,LOW(248)
000be4 bbe7      	OUT  0x17,R30
                 ; 0000 00CC 
                 ; 0000 00CD     // Port C initialization
                 ; 0000 00CE     /* Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00CF     // State7=P State6=P State5=P State4=P State3=P State2=P State1=P State0=P
                 ; 0000 00D0     */
                 ; 0000 00D1     PORTC=0xFF; DDRC=0x00;
000be5 efef      	LDI  R30,LOW(255)
000be6 bbe5      	OUT  0x15,R30
000be7 e0e0      	LDI  R30,LOW(0)
000be8 bbe4      	OUT  0x14,R30
                 ; 0000 00D2 
                 ; 0000 00D3     // Port D initialization
                 ; 0000 00D4     /* Func7=Out Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=Out Func0=In
                 ; 0000 00D5     // State7=0 State6=P State5=0 State4=0 State3=P State2=P State1=0 State0=P
                 ; 0000 00D6     PORTD=0x4D; DDRD=0xB2;
                 ; 0000 00D7     */
                 ; 0000 00D8     /* Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=Out Func0=In
                 ; 0000 00D9     // State7=0 State6=0 State5=0 State4=0 State3=P State2=P State1=0 State0=P
                 ; 0000 00DA      */
                 ; 0000 00DB     PORTD=0x0D; DDRD=0xF2;
000be9 e0ed      	LDI  R30,LOW(13)
000bea bbe2      	OUT  0x12,R30
000beb efe2      	LDI  R30,LOW(242)
000bec bbe1      	OUT  0x11,R30
                 ; 0000 00DC 
                 ; 0000 00DD 
                 ; 0000 00DE     // Timer/Counter 0 initialization
                 ; 0000 00DF     /* Clock source: System Clock
                 ; 0000 00E0     // Clock value: 31,250 kHz
                 ; 0000 00E1     // Mode: Fast PWM top=FFh
                 ; 0000 00E2     // OC0 output: Non-Inverted PWM
                 ; 0000 00E3     */
                 ; 0000 00E4     TCCR0=0x6C; TCNT0=0x00; OCR0=0x00;
000bed e6ec      	LDI  R30,LOW(108)
000bee bfe3      	OUT  0x33,R30
000bef e0e0      	LDI  R30,LOW(0)
000bf0 bfe2      	OUT  0x32,R30
000bf1 bfec      	OUT  0x3C,R30
                 ; 0000 00E5 
                 ; 0000 00E6     // Timer/Counter 1 initialization
                 ; 0000 00E7     /* Clock source: System Clock
                 ; 0000 00E8     // Clock value: 460,000 kHz (142 mc - 1 cycle)
                 ; 0000 00E9     // Mode: Normal top=FFFFh
                 ; 0000 00EA     // OC1A output: Discon.
                 ; 0000 00EB     // OC1B output: Discon.
                 ; 0000 00EC     // Noise Canceler: Off
                 ; 0000 00ED     // Input Capture on Falling Edge
                 ; 0000 00EE     // Timer 1 Overflow Interrupt: On
                 ; 0000 00EF     // Input Capture Interrupt: Off
                 ; 0000 00F0     // Compare A Match Interrupt: Off
                 ; 0000 00F1     // Compare B Match Interrupt: Off
                 ; 0000 00F2     */
                 ; 0000 00F3     TCCR1A=0x00; TCCR1B=0x02; TCNT1H=0x00; TCNT1L=0x00;
000bf2 bdef      	OUT  0x2F,R30
000bf3 e0e2      	LDI  R30,LOW(2)
000bf4 bdee      	OUT  0x2E,R30
000bf5 e0e0      	LDI  R30,LOW(0)
000bf6 bded      	OUT  0x2D,R30
000bf7 bdec      	OUT  0x2C,R30
                 ; 0000 00F4     ICR1H=0x00; ICR1L=0x00;
000bf8 bde7      	OUT  0x27,R30
000bf9 bde6      	OUT  0x26,R30
                 ; 0000 00F5     OCR1AH=0x00; OCR1AL=0x00; OCR1BH=0x00; OCR1BL=0x00;
000bfa bdeb      	OUT  0x2B,R30
000bfb bdea      	OUT  0x2A,R30
000bfc bde9      	OUT  0x29,R30
000bfd bde8      	OUT  0x28,R30
                 ; 0000 00F6 
                 ; 0000 00F7     // Timer/Counter 2 initialization
                 ; 0000 00F8     /* Clock source: System Clock
                 ; 0000 00F9     // Clock value: 31,250 kHz
                 ; 0000 00FA     // Mode: Fast PWM top=FFh
                 ; 0000 00FB     // OC2 output: Inverted PWM
                 ; 0000 00FC     */
                 ; 0000 00FD     // ASSR=0x00; TCCR2=0x7E; TCNT2=0x00; OCR2=0x00;
                 ; 0000 00FE     ASSR=0x00; TCCR2=0x6c; TCNT2=0x00; OCR2=0x00;
000bfe bde2      	OUT  0x22,R30
000bff e6ec      	LDI  R30,LOW(108)
000c00 bde5      	OUT  0x25,R30
000c01 e0e0      	LDI  R30,LOW(0)
000c02 bde4      	OUT  0x24,R30
000c03 bde3      	OUT  0x23,R30
                 ; 0000 00FF     // External Interrupt(s) initialization
                 ; 0000 0100     /*
                 ; 0000 0101     INT0: On INT0 Mode: Falling Edge
                 ; 0000 0102     INT1: On INT1 Mode: Falling Edge
                 ; 0000 0103     INT2: On  INT2 Mode: Falling Edge
                 ; 0000 0104     MCUCR=0x0A;
                 ; 0000 0105     INT0: On INT0 Mode: Rising Edge
                 ; 0000 0106     INT1: On INT1 Mode: Rising Edge
                 ; 0000 0107     INT2: On  INT2 Mode: Falling Edge
                 ; 0000 0108     MCUCR=0x0F;
                 ; 0000 0109     INT0: On INT0 Mode: Rising Edge
                 ; 0000 010A     INT1: On INT1 Mode: Any change
                 ; 0000 010B     INT2: On  INT2 Mode: Falling Edge
                 ; 0000 010C     MCUCR=0x07;
                 ; 0000 010D     */
                 ; 0000 010E     GICR|=0xE0; MCUCR=0x06; MCUCSR=0x00; GIFR=0xE0;
000c04 b7eb      	IN   R30,0x3B
000c05 6ee0      	ORI  R30,LOW(0xE0)
000c06 bfeb      	OUT  0x3B,R30
000c07 e0e6      	LDI  R30,LOW(6)
000c08 bfe5      	OUT  0x35,R30
000c09 e0e0      	LDI  R30,LOW(0)
000c0a bfe4      	OUT  0x34,R30
000c0b eee0      	LDI  R30,LOW(224)
000c0c bfea      	OUT  0x3A,R30
                 ; 0000 010F     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0110     TIMSK=0x45;
000c0d e4e5      	LDI  R30,LOW(69)
000c0e bfe9      	OUT  0x39,R30
                 ; 0000 0111 
                 ; 0000 0112     // USART initialization
                 ; 0000 0113     init_uart ();
000c0f dfa9      	RCALL _init_uart
                 ; 0000 0114 
                 ; 0000 0115     // Analog Comparator initialization
                 ; 0000 0116     /* Analog Comparator: Off
                 ; 0000 0117     // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0118     */
                 ; 0000 0119     ACSR=0x80; SFIOR=0x00;
000c10 e8e0      	LDI  R30,LOW(128)
000c11 b9e8      	OUT  0x8,R30
000c12 e0e0      	LDI  R30,LOW(0)
000c13 bfe0      	OUT  0x30,R30
                 ; 0000 011A 
                 ; 0000 011B     // ADC initialization
                 ; 0000 011C     /* ADC Clock frequency: 125,000 kHz
                 ; 0000 011D     // ADC Voltage Reference: Int., cap. on AREF
                 ; 0000 011E     // ADC Auto Trigger Source: Free Running
                 ; 0000 011F     */
                 ; 0000 0120     ADMUX=ADC_VREF_TYPE & 0xff; ADCSRA=0xA6; SFIOR&=0x1F;
000c14 ece0      	LDI  R30,LOW(192)
000c15 b9e7      	OUT  0x7,R30
000c16 eae6      	LDI  R30,LOW(166)
000c17 b9e6      	OUT  0x6,R30
000c18 b7e0      	IN   R30,0x30
000c19 71ef      	ANDI R30,LOW(0x1F)
000c1a bfe0      	OUT  0x30,R30
                 ; 0000 0121     printf ("Старт инициализации периферии...\r\n"); delay_ms(500);
                +
000c1b e1ed     +LDI R30 , LOW ( 2 * _0x0 + 67 )
000c1c e0f4     +LDI R31 , HIGH ( 2 * _0x0 + 67 )
                 	__POINTW1FN _0x0,67
000c1d 940e 292a 	CALL SUBOPT_0x1
000c1f efe4      	LDI  R30,LOW(500)
000c20 e0f1      	LDI  R31,HIGH(500)
000c21 940e 2964 	CALL SUBOPT_0xB
                 ; 0000 0122     // I2C Bus initialization
                 ; 0000 0123     i2c_init();
000c23 940e 2dd7 	CALL _i2c_init
                 ; 0000 0124     // DS1307 Real Time Clock initialization
                 ; 0000 0125     /* Square wave output on pin SQW/OUT: On
                 ; 0000 0126     // Square wave frequency: 1Hz
                 ; 0000 0127     */
                 ; 0000 0128     // Инициализируем часы реального времени датой разработки этой программы
                 ; 0000 0129     mode.stop_sync_dt = 0;      // снимаем флаг запрета синхронизации
000c25 e0e0      	LDI  R30,LOW(0)
                +
000c26 93e0 01bd+STS _mode + 5 , R30
                 	__PUTB1MN _mode,5
                 ; 0000 012A     get_cur_dt(FORCE_INIT);                   // (1)
000c28 e0e1      	LDI  R30,LOW(1)
000c29 93ea      	ST   -Y,R30
000c2a df68      	RCALL _get_cur_dt
                 ; 0000 012B     // Инициализируем все термометры
                 ; 0000 012C     init_terms();
000c2b df9e      	RCALL _init_terms
                 ; 0000 012D     // инициализируем дисплей
                 ; 0000 012E     lcd_init(LCD_DISP_ON);
000c2c e0ec      	LDI  R30,LOW(12)
000c2d 93ea      	ST   -Y,R30
000c2e 940e 0d32 	CALL _lcd_init
                 ; 0000 012F     // Инициализируем valcoder
                 ; 0000 0130     valcoder = VALCODER_NO_ROTATE;
000c30 e0e0      	LDI  R30,LOW(0)
000c31 93e0 021f 	STS  _valcoder,R30
                 ; 0000 0131     // Инициализируем меню
                 ; 0000 0132     init_curr_menu(&main_menu[0], NUM_MENU);
000c33 940e 2968 	CALL SUBOPT_0xC
000c35 940e 296d 	CALL SUBOPT_0xD
                 ; 0000 0133     // Инициализируем все светики
                 ; 0000 0134     signal_green(OFF); signal_red(OFF); signal_buz(OFF); signal_white(OFF);
000c37 940e 293b 	CALL SUBOPT_0x4
000c39 940e 2971 	CALL SUBOPT_0xE
000c3b 940e 2979 	CALL SUBOPT_0xF
                 ; 0000 0135 } // Конец функции init
000c3d 9508      	RET
                 ;// #include <avr_compiler.h>
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include "robowater.h"
                 ;#include "lcd_4bit.h"
                 ;
                 ;#define _BV(x) (1 << (x))
                 ;// #define lcd_e_delay()   #asm("rjmp 1f\ 1:")
                 ;#define lcd_e_delay()   delay_us(250)
                 ;#define lcd_e_high()    LCD_E_PORT  |=  _BV(LCD_E_PIN);
                 ;#define lcd_e_low()     LCD_E_PORT  &= ~_BV(LCD_E_PIN);
                 ;#define lcd_rw_high()   LCD_RW_PORT |=  _BV(LCD_RW_PIN)
                 ;#define lcd_rw_low()    LCD_RW_PORT &= ~_BV(LCD_RW_PIN)
                 ;#define lcd_rs_high()   LCD_RS_PORT |=  _BV(LCD_RS_PIN)
                 ;#define lcd_rs_low()    LCD_RS_PORT &= ~_BV(LCD_RS_PIN)
                 ;
                 ;#define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_4BIT_2LINES
                 ;#pragma used+
                 ;// Устанавливаем коротку задержку в 32 цикла процессора
                 ;static void _lcd_delay(void) {
                 ; 0001 0014 static void _lcd_delay(void) {
                 
                 	.CSEG
                 ; 0001 0015 #asm
                 ; 0001 0016     ldi   r31,15
                 ; 0001 0017 __lcd_delay0:
                 ; 0001 0018     dec   r31                   ; 1 cycle
                 ; 0001 0019     brne  __lcd_delay0          ; 1 cycle
                 ; 0001 001A #endasm
                 ; 0001 001B }
                 ;// Устанавливаем длинную задержку в 262140 (4*65535) циклов процессора
                 ;static void _long_delay(void) {
                 ; 0001 001D static void _long_delay(void) {
                 ; 0001 001E #asm
                 ; 0001 001F     clr   r26
                 ; 0001 0020     clr   r27
                 ; 0001 0021 __long_delay0:
                 ; 0001 0022     sbiw  r26,1         ;2 cycles
                 ; 0001 0023     brne  __long_delay0 ;2 cycles
                 ; 0001 0024 #endasm
                 ; 0001 0025 }
                 ;// Анализ состояния LCD
                 ;/* void _lcd_ready(void)
                 ;{
                 ;#asm
                 ;    in    r26,__lcd_direction
                 ;    andi  r26,0xf                 ;set as input
                 ;    out   __lcd_direction,r26
                 ;    sbi   __lcd_port,__lcd_rd     ;RD=1
                 ;    cbi   __lcd_port,__lcd_rs     ;RS=0
                 ;__lcd_busy:
                 ;#endasm
                 ;    _lcd_delay();
                 ;#asm
                 ;    sbi   __lcd_port,__lcd_enable ;EN=1
                 ;#endasm
                 ;_lcd_delay();
                 ;#asm
                 ;    in    r26,__lcd_pin
                 ;    cbi   __lcd_port,__lcd_enable ;EN=0
                 ;#endasm
                 ;    _lcd_delay();
                 ;#asm
                 ;    sbi   __lcd_port,__lcd_enable ;EN=1
                 ;#endasm
                 ;    _lcd_delay();
                 ;#asm
                 ;    cbi   __lcd_port,__lcd_enable ;EN=0
                 ;    sbrc  r26,__lcd_busy_flag
                 ;    rjmp  __lcd_busy
                 ;#endasm
                 ;}
                 ;*/
                 ;#pragma used-
                 ;
                 ;static void lcd_e_toggle(void);
                 ;// #define delay(us) _delayFourCycles( ( ( 1*(_MCU_CLOCK_FREQUENCY_/4000) )*us)/1000 )
                 ;
                 ;static void lcd_e_toggle(void) {
                 ; 0001 004B static void lcd_e_toggle(void) {
                 _lcd_e_toggle_G001:
                 ; 0001 004C     lcd_e_high();
000c3e 940e 297d 	CALL SUBOPT_0x10
                 ; 0001 004D     lcd_e_delay();
                 ; 0001 004E     lcd_e_low();
000c40 98c6      	CBI  0x18,6
                 ; 0001 004F }
000c41 9508      	RET
                 ;
                 ;static void lcd_write(byte data, byte rs) {
                 ; 0001 0051 static void lcd_write(byte data, byte rs) {
                 _lcd_write_G001:
                 ; 0001 0052     /* write data (RS=1, RW=0) or write instruction (RS=0, RW=0) */
                 ; 0001 0053     if (rs) lcd_rs_high(); else lcd_rs_low();
                 ;	data -> Y+1
                 ;	rs -> Y+0
000c42 81e8      	LD   R30,Y
000c43 30e0      	CPI  R30,0
000c44 f011      	BREQ _0x20003
000c45 9ac5      	SBI  0x18,5
000c46 c001      	RJMP _0x20004
                 _0x20003:
000c47 98c5      	CBI  0x18,5
                 ; 0001 0054     lcd_rw_low();
                 _0x20004:
000c48 98c7      	CBI  0x18,7
                 ; 0001 0055     /* configure data pins as output */
                 ; 0001 0056     LCD_DATA0_DDR |= _BV(LCD_DATA0_PIN);
000c49 9ad4      	SBI  0x1A,4
                 ; 0001 0057     LCD_DATA1_DDR |= _BV(LCD_DATA1_PIN);
000c4a 9ad5      	SBI  0x1A,5
                 ; 0001 0058     LCD_DATA2_DDR |= _BV(LCD_DATA2_PIN);
000c4b 9ad6      	SBI  0x1A,6
                 ; 0001 0059     LCD_DATA3_DDR |= _BV(LCD_DATA3_PIN);
000c4c 9ad7      	SBI  0x1A,7
                 ; 0001 005A     /* output high nibble first */
                 ; 0001 005B     LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
000c4d 98df      	CBI  0x1B,7
                 ; 0001 005C     LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
000c4e 98de      	CBI  0x1B,6
                 ; 0001 005D     LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
000c4f 98dd      	CBI  0x1B,5
                 ; 0001 005E     LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
000c50 98dc      	CBI  0x1B,4
                 ; 0001 005F     if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
000c51 81e9      	LDD  R30,Y+1
000c52 78e0      	ANDI R30,LOW(0x80)
000c53 f009      	BREQ _0x20005
000c54 9adf      	SBI  0x1B,7
                 ; 0001 0060     if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
                 _0x20005:
000c55 81e9      	LDD  R30,Y+1
000c56 74e0      	ANDI R30,LOW(0x40)
000c57 f009      	BREQ _0x20006
000c58 9ade      	SBI  0x1B,6
                 ; 0001 0061     if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
                 _0x20006:
000c59 81e9      	LDD  R30,Y+1
000c5a 72e0      	ANDI R30,LOW(0x20)
000c5b f009      	BREQ _0x20007
000c5c 9add      	SBI  0x1B,5
                 ; 0001 0062     if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
                 _0x20007:
000c5d 81e9      	LDD  R30,Y+1
000c5e 71e0      	ANDI R30,LOW(0x10)
000c5f f009      	BREQ _0x20008
000c60 9adc      	SBI  0x1B,4
                 ; 0001 0063     lcd_e_toggle();
                 _0x20008:
000c61 dfdc      	RCALL _lcd_e_toggle_G001
                 ; 0001 0064     /* output low nibble */
                 ; 0001 0065     LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
000c62 98df      	CBI  0x1B,7
                 ; 0001 0066     LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
000c63 98de      	CBI  0x1B,6
                 ; 0001 0067     LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
000c64 98dd      	CBI  0x1B,5
                 ; 0001 0068     LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
000c65 98dc      	CBI  0x1B,4
                 ; 0001 0069     if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
000c66 81e9      	LDD  R30,Y+1
000c67 70e8      	ANDI R30,LOW(0x8)
000c68 f009      	BREQ _0x20009
000c69 9adf      	SBI  0x1B,7
                 ; 0001 006A     if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
                 _0x20009:
000c6a 81e9      	LDD  R30,Y+1
000c6b 70e4      	ANDI R30,LOW(0x4)
000c6c f009      	BREQ _0x2000A
000c6d 9ade      	SBI  0x1B,6
                 ; 0001 006B     if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
                 _0x2000A:
000c6e 81e9      	LDD  R30,Y+1
000c6f 70e2      	ANDI R30,LOW(0x2)
000c70 f009      	BREQ _0x2000B
000c71 9add      	SBI  0x1B,5
                 ; 0001 006C     if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
                 _0x2000B:
000c72 81e9      	LDD  R30,Y+1
000c73 70e1      	ANDI R30,LOW(0x1)
000c74 f009      	BREQ _0x2000C
000c75 9adc      	SBI  0x1B,4
                 ; 0001 006D     lcd_e_toggle();
                 _0x2000C:
000c76 dfc7      	RCALL _lcd_e_toggle_G001
                 ; 0001 006E     /* all data pins high (inactive) */
                 ; 0001 006F     LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
000c77 9adc      	SBI  0x1B,4
                 ; 0001 0070     LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
000c78 9add      	SBI  0x1B,5
                 ; 0001 0071     LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
000c79 9ade      	SBI  0x1B,6
                 ; 0001 0072     LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
000c7a 9adf      	SBI  0x1B,7
                 ; 0001 0073 }
000c7b c097      	RJMP _0x20E001A
                 ;
                 ;static byte lcd_read(byte rs) {
                 ; 0001 0075 static byte lcd_read(byte rs) {
                 _lcd_read_G001:
                 ; 0001 0076     byte data;
                 ; 0001 0077 
                 ; 0001 0078     if (rs)
000c7c 930a      	ST   -Y,R16
                 ;	rs -> Y+1
                 ;	data -> R16
000c7d 81e9      	LDD  R30,Y+1
000c7e 30e0      	CPI  R30,0
000c7f f011      	BREQ _0x2000D
                 ; 0001 0079         lcd_rs_high();                       /* RS=1: read data      */
000c80 9ac5      	SBI  0x18,5
                 ; 0001 007A     else
000c81 c001      	RJMP _0x2000E
                 _0x2000D:
                 ; 0001 007B         lcd_rs_low();                        /* RS=0: read busy flag */
000c82 98c5      	CBI  0x18,5
                 ; 0001 007C     lcd_rw_high();                           /* RW=1  read mode      */
                 _0x2000E:
000c83 9ac7      	SBI  0x18,7
                 ; 0001 007D     /* configure data pins as input */
                 ; 0001 007E     LCD_DATA0_DDR &= ~_BV(LCD_DATA0_PIN);
000c84 98d4      	CBI  0x1A,4
                 ; 0001 007F     LCD_DATA1_DDR &= ~_BV(LCD_DATA1_PIN);
000c85 98d5      	CBI  0x1A,5
                 ; 0001 0080     LCD_DATA2_DDR &= ~_BV(LCD_DATA2_PIN);
000c86 98d6      	CBI  0x1A,6
                 ; 0001 0081     LCD_DATA3_DDR &= ~_BV(LCD_DATA3_PIN);
000c87 98d7      	CBI  0x1A,7
                 ; 0001 0082     /* read high nibble first */
                 ; 0001 0083     lcd_e_high();
000c88 940e 297d 	CALL SUBOPT_0x10
                 ; 0001 0084     lcd_e_delay();
                 ; 0001 0085     data = 0;
000c8a e000      	LDI  R16,LOW(0)
                 ; 0001 0086     if ( LCD_DATA0_DPIN & _BV(LCD_DATA0_PIN) ) data |= 0x10;
000c8b 99cc      	SBIC 0x19,4
000c8c 6100      	ORI  R16,LOW(16)
                 ; 0001 0087     if ( LCD_DATA1_DPIN & _BV(LCD_DATA1_PIN) ) data |= 0x20;
000c8d 99d5      	SBIC 0x1A,5
000c8e 6200      	ORI  R16,LOW(32)
                 ; 0001 0088     if ( LCD_DATA2_DPIN & _BV(LCD_DATA2_PIN) ) data |= 0x40;
000c8f 99d6      	SBIC 0x1A,6
000c90 6400      	ORI  R16,LOW(64)
                 ; 0001 0089     if ( LCD_DATA3_DPIN & _BV(LCD_DATA3_PIN) ) data |= 0x80;
000c91 99d7      	SBIC 0x1A,7
000c92 6800      	ORI  R16,LOW(128)
                 ; 0001 008A     lcd_e_low();
000c93 98c6      	CBI  0x18,6
                 ; 0001 008B     lcd_e_delay();                       /* Enable 500ns low       */
                +
000c94 ee86     +LDI R24 , LOW ( 230 )
000c95 e090     +LDI R25 , HIGH ( 230 )
                +__DELAY_USW_LOOP :
000c96 9701     +SBIW R24 , 1
000c97 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 230
                 ; 0001 008C     /* read low nibble */
                 ; 0001 008D     lcd_e_high();
000c98 940e 297d 	CALL SUBOPT_0x10
                 ; 0001 008E     lcd_e_delay();
                 ; 0001 008F     if ( LCD_DATA0_DPIN & _BV(LCD_DATA0_PIN) ) data |= 0x01;
000c9a 99cc      	SBIC 0x19,4
000c9b 6001      	ORI  R16,LOW(1)
                 ; 0001 0090     if ( LCD_DATA1_DPIN & _BV(LCD_DATA1_PIN) ) data |= 0x02;
000c9c 99d5      	SBIC 0x1A,5
000c9d 6002      	ORI  R16,LOW(2)
                 ; 0001 0091     if ( LCD_DATA2_DPIN & _BV(LCD_DATA2_PIN) ) data |= 0x04;
000c9e 99d6      	SBIC 0x1A,6
000c9f 6004      	ORI  R16,LOW(4)
                 ; 0001 0092     if ( LCD_DATA3_DPIN & _BV(LCD_DATA3_PIN) ) data |= 0x08;
000ca0 99d7      	SBIC 0x1A,7
000ca1 6008      	ORI  R16,LOW(8)
                 ; 0001 0093     lcd_e_low();
000ca2 98c6      	CBI  0x18,6
                 ; 0001 0094     return data;
000ca3 2fe0      	MOV  R30,R16
000ca4 8108      	LDD  R16,Y+0
000ca5 c06d      	RJMP _0x20E001A
                 ; 0001 0095 }
                 ;
                 ;static unsigned char lcd_waitbusy(void) {
                 ; 0001 0097 static unsigned char lcd_waitbusy(void) {
                 _lcd_waitbusy_G001:
                 ; 0001 0098 	// register unsigned char c;
                 ; 0001 0099     while (lcd_read(0) & (1<<LCD_BUSY)) {}
                 _0x20017:
000ca6 e0e0      	LDI  R30,LOW(0)
000ca7 93ea      	ST   -Y,R30
000ca8 dfd3      	RCALL _lcd_read_G001
000ca9 78e0      	ANDI R30,LOW(0x80)
000caa f7d9      	BRNE _0x20017
                 ; 0001 009A     delay_us(10);
                +
000cab e08c     +LDI R24 , LOW ( 12 )
                +__DELAY_USB_LOOP :
000cac 958a     +DEC R24
000cad f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 12
                 ; 0001 009B     return (lcd_read(0));
000cae e0e0      	LDI  R30,LOW(0)
000caf 93ea      	ST   -Y,R30
000cb0 dfcb      	RCALL _lcd_read_G001
000cb1 9508      	RET
                 ; 0001 009C }
                 ;
                 ;static inline void lcd_newline(byte pos) {
                 ; 0001 009E static inline void lcd_newline(byte pos) {
                 _lcd_newline_G001:
                 ; 0001 009F     register unsigned char addressCounter;
                 ; 0001 00A0 
                 ; 0001 00A1 
                 ; 0001 00A2     if ( pos < (LCD_START_LINE2) )
000cb2 930a      	ST   -Y,R16
                 ;	pos -> Y+1
                 ;	addressCounter -> R16
000cb3 81a9      	LDD  R26,Y+1
000cb4 34a0      	CPI  R26,LOW(0x40)
000cb5 f410      	BRSH _0x2001A
                 ; 0001 00A3         addressCounter = LCD_START_LINE2;
000cb6 e400      	LDI  R16,LOW(64)
                 ; 0001 00A4     else
000cb7 c001      	RJMP _0x2001B
                 _0x2001A:
                 ; 0001 00A5         addressCounter = LCD_START_LINE1;
000cb8 e000      	LDI  R16,LOW(0)
                 ; 0001 00A6     lcd_command((1<<LCD_DDRAM)+addressCounter);
                 _0x2001B:
000cb9 2fe0      	MOV  R30,R16
000cba 58e0      	SUBI R30,-LOW(128)
000cbb 93ea      	ST   -Y,R30
000cbc d002      	RCALL _lcd_command
                 ; 0001 00A7 }
000cbd 8108      	LDD  R16,Y+0
000cbe c054      	RJMP _0x20E001A
                 ;
                 ;void lcd_command(byte cmd) {
                 ; 0001 00A9 void lcd_command(byte cmd) {
                 _lcd_command:
                 ; 0001 00AA     lcd_waitbusy();
                 ;	cmd -> Y+0
000cbf dfe6      	RCALL _lcd_waitbusy_G001
                 ; 0001 00AB     lcd_write(cmd,0);
000cc0 81e8      	LD   R30,Y
000cc1 93ea      	ST   -Y,R30
000cc2 e0e0      	LDI  R30,LOW(0)
000cc3 93ea      	ST   -Y,R30
000cc4 df7d      	RCALL _lcd_write_G001
                 ; 0001 00AC }
000cc5 c092      	RJMP _0x20E0019
                 ;
                 ;void lcd_data(byte data) {
                 ; 0001 00AE void lcd_data(byte data) {
                 ; 0001 00AF     lcd_waitbusy();
                 ;	data -> Y+0
                 ; 0001 00B0     lcd_write(data,1);
                 ; 0001 00B1 }
                 ;
                 ;void lcd_gotoxy(byte x, byte y) {
                 ; 0001 00B3 void lcd_gotoxy(byte x, byte y) {
                 _lcd_gotoxy:
                 ; 0001 00B4     if ( y==0 )
                 ;	x -> Y+1
                 ;	y -> Y+0
000cc6 81e8      	LD   R30,Y
000cc7 30e0      	CPI  R30,0
000cc8 f419      	BRNE _0x2001C
                 ; 0001 00B5         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
000cc9 81e9      	LDD  R30,Y+1
000cca 58e0      	SUBI R30,-LOW(128)
000ccb c002      	RJMP _0x2002D
                 ; 0001 00B6     else
                 _0x2001C:
                 ; 0001 00B7         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
000ccc 81e9      	LDD  R30,Y+1
000ccd 54e0      	SUBI R30,-LOW(192)
                 _0x2002D:
000cce 93ea      	ST   -Y,R30
000ccf dfef      	RCALL _lcd_command
                 ; 0001 00B8 }
000cd0 c042      	RJMP _0x20E001A
                 ;
                 ;#pragma used+
                 ;int lcd_getxy(void) {
                 ; 0001 00BB int lcd_getxy(void) {
                 ; 0001 00BC     return lcd_waitbusy();
                 ; 0001 00BD }
                 ;#pragma used-
                 ;
                 ;void lcd_clrscr(void) {
                 ; 0001 00C0 void lcd_clrscr(void) {
                 _lcd_clrscr:
                 ; 0001 00C1     lcd_command(1<<LCD_CLR);
000cd1 e0e1      	LDI  R30,LOW(1)
000cd2 93ea      	ST   -Y,R30
000cd3 dfeb      	RCALL _lcd_command
                 ; 0001 00C2 }
000cd4 9508      	RET
                 ;
                 ;void lcd_home(void) {
                 ; 0001 00C4 void lcd_home(void) {
                 ; 0001 00C5     lcd_command(1<<LCD_HOME);
                 ; 0001 00C6 }
                 ;
                 ;void lcd_putc(byte c) {
                 ; 0001 00C8 void lcd_putc(byte c) {
                 _lcd_putc:
                 ; 0001 00C9     byte pos;
                 ; 0001 00CA     // byte charoffset;            // байт смещения от начала таблицы
                 ; 0001 00CB     byte lcd_symtable[64] = {   // 192..255
                 ; 0001 00CC     //{'А','Б','В','Г','Д','Е','Ж','З','И','Й','К','Л','М','Н','О','П','Р','С','Т','У','Ф','Х','Ц','Ч','Ш','Щ','Ъ','Ы','Ь','Э','Ю','Я',
                 ; 0001 00CD     // 'а','б','в','г','д','е','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я'},
                 ; 0001 00CE         65,160, 66,161,224, 69,163,164,165,166, 75,167, 77, 72, 79,168, 80, 67, 84,169,170, 88,225,171,172,226,173,174,173,175,176,177,
                 ; 0001 00CF         97,178,179,180,227,101,182,183,184,185,186,187,188,189,111,190,112, 99,191,121,228,120,229,192,193,230,194,195,196,197,198,199
                 ; 0001 00D0     };
                 ; 0001 00D1     pos = lcd_waitbusy();   // read busy-flag and address counter
000cd5 97ef      	SBIW R28,63
000cd6 9721      	SBIW R28,1
000cd7 e480      	LDI  R24,64
000cd8 e0a0      	LDI  R26,LOW(0)
000cd9 e0b0      	LDI  R27,HIGH(0)
000cda e4e0      	LDI  R30,LOW(_0x2001E*2)
000cdb e0f4      	LDI  R31,HIGH(_0x2001E*2)
000cdc 940e 3150 	CALL __INITLOCB
000cde 930a      	ST   -Y,R16
                 ;	c -> Y+65
                 ;	pos -> R16
                 ;	lcd_symtable -> Y+1
000cdf dfc6      	RCALL _lcd_waitbusy_G001
000ce0 2f0e      	MOV  R16,R30
                 ; 0001 00D2     if (c=='\n') lcd_newline(pos);
                +
000ce1 01de     +MOVW R26 , R28
000ce2 5baf     +SUBI R26 , LOW ( - 65 )
000ce3 4fbf     +SBCI R27 , HIGH ( - 65 )
000ce4 91ac     +LD R26 , X
                 	__GETB2SX 65
000ce5 30aa      	CPI  R26,LOW(0xA)
000ce6 f419      	BRNE _0x2001F
000ce7 930a      	ST   -Y,R16
000ce8 dfc9      	RCALL _lcd_newline_G001
                 ; 0001 00D3     else
000ce9 c01a      	RJMP _0x20020
                 _0x2001F:
                 ; 0001 00D4         if (c < 192) lcd_write(c, 1);
                +
000cea 01de     +MOVW R26 , R28
000ceb 5baf     +SUBI R26 , LOW ( - 65 )
000cec 4fbf     +SBCI R27 , HIGH ( - 65 )
000ced 91ac     +LD R26 , X
                 	__GETB2SX 65
000cee 3ca0      	CPI  R26,LOW(0xC0)
000cef f428      	BRSH _0x20021
                +
000cf0 01fe     +MOVW R30 , R28
000cf1 5bef     +SUBI R30 , LOW ( - 65 )
000cf2 4fff     +SBCI R31 , HIGH ( - 65 )
000cf3 81e0     +LD R30 , Z
                 	__GETB1SX 65
000cf4 c00b      	RJMP _0x2002E
                 ; 0001 00D5         else lcd_write(lcd_symtable[c-192], 1);
                 _0x20021:
                +
000cf5 01fe     +MOVW R30 , R28
000cf6 5bef     +SUBI R30 , LOW ( - 65 )
000cf7 4fff     +SBCI R31 , HIGH ( - 65 )
000cf8 81e0     +LD R30 , Z
                 	__GETB1SX 65
000cf9 5ce0      	SUBI R30,LOW(192)
000cfa e0f0      	LDI  R31,0
000cfb 01de      	MOVW R26,R28
000cfc 9611      	ADIW R26,1
000cfd 0fae      	ADD  R26,R30
000cfe 1fbf      	ADC  R27,R31
000cff 91ec      	LD   R30,X
                 _0x2002E:
000d00 93ea      	ST   -Y,R30
000d01 e0e1      	LDI  R30,LOW(1)
000d02 93ea      	ST   -Y,R30
000d03 df3e      	RCALL _lcd_write_G001
                 ; 0001 00D6 }
                 _0x20020:
000d04 8108      	LDD  R16,Y+0
000d05 96ef      	ADIW R28,63
000d06 9623      	ADIW R28,3
000d07 9508      	RET
                 ;
                 ;void lcd_puts(const char *s) {
                 ; 0001 00D8 void lcd_puts(const char *s) {
                 _lcd_puts:
                 ; 0001 00D9     while (*s != 0) lcd_putc(*s++);
                 ;	*s -> Y+0
                 _0x20023:
000d08 81a8      	LD   R26,Y
000d09 81b9      	LDD  R27,Y+1
000d0a 91ec      	LD   R30,X
000d0b 30e0      	CPI  R30,0
000d0c f031      	BREQ _0x20025
000d0d 91ed      	LD   R30,X+
000d0e 83a8      	ST   Y,R26
000d0f 83b9      	STD  Y+1,R27
000d10 93ea      	ST   -Y,R30
000d11 dfc3      	RCALL _lcd_putc
000d12 cff5      	RJMP _0x20023
                 _0x20025:
                 ; 0001 00DA }
                 _0x20E001A:
000d13 9622      	ADIW R28,2
000d14 9508      	RET
                 ;// Функция печати на LCD строки меню. Если submenu = 1, то печатаем символ '>' на 16 позиции
                 ;void lcd_line_menu(const char *s, byte submenu) {
                 ; 0001 00DC void lcd_line_menu(const char *s, byte submenu) {
                 _lcd_line_menu:
                 ; 0001 00DD     register byte i;
                 ; 0001 00DE     for(i=0; i<(LCD_DISP_LENGTH-1); i++) {
000d15 930a      	ST   -Y,R16
                 ;	*s -> Y+2
                 ;	submenu -> Y+1
                 ;	i -> R16
000d16 e000      	LDI  R16,LOW(0)
                 _0x20027:
000d17 300f      	CPI  R16,15
000d18 f470      	BRSH _0x20028
                 ; 0001 00DF         if (*s != 0) lcd_putc(*s++); else lcd_putc(0x20);
000d19 81aa      	LDD  R26,Y+2
000d1a 81bb      	LDD  R27,Y+2+1
000d1b 91ec      	LD   R30,X
000d1c 30e0      	CPI  R30,0
000d1d f021      	BREQ _0x20029
000d1e 91ed      	LD   R30,X+
000d1f 83aa      	STD  Y+2,R26
000d20 83bb      	STD  Y+2+1,R27
000d21 c001      	RJMP _0x2002F
                 _0x20029:
000d22 e2e0      	LDI  R30,LOW(32)
                 _0x2002F:
000d23 93ea      	ST   -Y,R30
000d24 dfb0      	RCALL _lcd_putc
                 ; 0001 00E0     }
000d25 5f0f      	SUBI R16,-1
000d26 cff0      	RJMP _0x20027
                 _0x20028:
                 ; 0001 00E1     // Если включен флаг submenu, печатаем символ '>', иначе - ' '
                 ; 0001 00E2     if (submenu) lcd_putc('>'); else lcd_putc(0x20);
000d27 81e9      	LDD  R30,Y+1
000d28 30e0      	CPI  R30,0
000d29 f011      	BREQ _0x2002B
000d2a e3ee      	LDI  R30,LOW(62)
000d2b c001      	RJMP _0x20030
                 _0x2002B:
000d2c e2e0      	LDI  R30,LOW(32)
                 _0x20030:
000d2d 93ea      	ST   -Y,R30
000d2e dfa6      	RCALL _lcd_putc
                 ; 0001 00E3 }
000d2f 8108      	LDD  R16,Y+0
000d30 9624      	ADIW R28,4
000d31 9508      	RET
                 ;
                 ;void lcd_init(byte dispAttr) {
                 ; 0001 00E5 void lcd_init(byte dispAttr) {
                 _lcd_init:
                 ; 0001 00E6 	/* configure all port bits as output (LCD data and control lines on different ports */
                 ; 0001 00E7     LCD_RS_DDR    |= _BV(LCD_RS_PIN);
                 ;	dispAttr -> Y+0
000d32 9abd      	SBI  0x17,5
                 ; 0001 00E8     LCD_RW_DDR    |= _BV(LCD_RW_PIN);
000d33 9abf      	SBI  0x17,7
                 ; 0001 00E9     LCD_E_DDR     |= _BV(LCD_E_PIN);
000d34 9abe      	SBI  0x17,6
                 ; 0001 00EA     LCD_DATA0_DDR |= _BV(LCD_DATA0_PIN);
000d35 9ad4      	SBI  0x1A,4
                 ; 0001 00EB     LCD_DATA1_DDR |= _BV(LCD_DATA1_PIN);
000d36 9ad5      	SBI  0x1A,5
                 ; 0001 00EC     LCD_DATA2_DDR |= _BV(LCD_DATA2_PIN);
000d37 9ad6      	SBI  0x1A,6
                 ; 0001 00ED     LCD_DATA3_DDR |= _BV(LCD_DATA3_PIN);
000d38 9ad7      	SBI  0x1A,7
                 ; 0001 00EE     delay_ms(16);        /* wait 16ms or more after power-on       */
000d39 e1e0      	LDI  R30,LOW(16)
000d3a e0f0      	LDI  R31,HIGH(16)
000d3b 940e 2964 	CALL SUBOPT_0xB
                 ; 0001 00EF 
                 ; 0001 00F0     /* initial write to lcd is 8bit */
                 ; 0001 00F1     LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
000d3d 9add      	SBI  0x1B,5
                 ; 0001 00F2     LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
000d3e 9adc      	SBI  0x1B,4
                 ; 0001 00F3     lcd_e_toggle();
000d3f defe      	RCALL _lcd_e_toggle_G001
                 ; 0001 00F4     delay_ms(41);         /* delay, busy flag can't be checked here */
000d40 e2e9      	LDI  R30,LOW(41)
000d41 e0f0      	LDI  R31,HIGH(41)
000d42 940e 2964 	CALL SUBOPT_0xB
                 ; 0001 00F5 
                 ; 0001 00F6     /* repeat last command */
                 ; 0001 00F7     lcd_e_toggle();
000d44 940e 2983 	CALL SUBOPT_0x11
                 ; 0001 00F8     delay_us(64);           /* delay, busy flag can't be checked here */
                 ; 0001 00F9 
                 ; 0001 00FA     /* repeat last command a third time */
                 ; 0001 00FB     lcd_e_toggle();
000d46 940e 2983 	CALL SUBOPT_0x11
                 ; 0001 00FC     delay_us(64);           /* delay, busy flag can't be checked here */
                 ; 0001 00FD 
                 ; 0001 00FE     /* now configure for 4bit mode */
                 ; 0001 00FF     LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
000d48 98dc      	CBI  0x1B,4
                 ; 0001 0100     lcd_e_toggle();
000d49 940e 2983 	CALL SUBOPT_0x11
                 ; 0001 0101     delay_us(64);           /* some displays need this additional delay */
                 ; 0001 0102 
                 ; 0001 0103     lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
000d4b e2e8      	LDI  R30,LOW(40)
000d4c 93ea      	ST   -Y,R30
000d4d df71      	RCALL _lcd_command
                 ; 0001 0104     lcd_command(LCD_DISP_OFF);              /* display off                  */
000d4e e0e8      	LDI  R30,LOW(8)
000d4f 93ea      	ST   -Y,R30
000d50 df6e      	RCALL _lcd_command
                 ; 0001 0105     lcd_clrscr();                           /* display clear                */
000d51 df7f      	RCALL _lcd_clrscr
                 ; 0001 0106     lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
000d52 e0e6      	LDI  R30,LOW(6)
000d53 93ea      	ST   -Y,R30
000d54 df6a      	RCALL _lcd_command
                 ; 0001 0107     lcd_command(dispAttr);                  /* display/cursor control       */
000d55 81e8      	LD   R30,Y
000d56 93ea      	ST   -Y,R30
000d57 df67      	RCALL _lcd_command
                 ; 0001 0108 }
                 _0x20E0019:
000d58 9621      	ADIW R28,1
000d59 9508      	RET
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdlib.h>  // for abs
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include "lcd_4bit.h"
                 ;#include "menu.h"
                 ;#include "robowater.h"
                 ;// DS1820 функции температурного преобразования (Биденко+Панарин)
                 ;#include "spd1820.h"
                 ;#include "valcoder.h"
                 ;#include "at2404.h"
                 ;#include "alarm.h"
                 ;#include "signals.h"
                 ;#include "keys.h"
                 ;// Локальные макроподстановки
                 ;#define MAJOR_VERSION 4
                 ;#define MINOR_VERSION 1
                 ;// #define NODEBUG
                 ;// enum
                 ;// Определение главных структур
                 ;// Описание глобальны переменных
                 ;// int tw_prs;             // Заданная температура воды
                 ;// TW_in_Min -Температура Воды на входе( Подаче ) мин. ?
                 ;// TW_out_Min -Температура Воды на выходе ( Обратка ) мин.
                 ;// TW_out_Stop -Температура Воды на входе для поддержания в режиме стоп.
                 ;// TA_in_Min -Температура Воздуха на входе мин -30 С.
                 ;// TA_out_Min -Температура Воздуха на выходе мин +15 С.
                 ;// TA_out_prs -Температура Воздуха на выходе установленная +20 С.(Заданная)
                 ;unsigned char key_treated[7] = {0,0,0,0,0,0,0} ;
                 ;struct st_mode mode = {0, 0, 0, 0, 0, 0, 1, 0.0,0};  // Текущий режим работы
                 
                 	.DSEG
                 ;struct st_datetime s_dt;
                 ;// Начальные установки структуры основных переменных
                 ;struct st_eeprom_par prim_par={
                 ;    {{(int)0, 0}, {(int)0, 0}, {(int)0, 0}, {(int)0, 0}},
                 ;    0xFF, 205, 0x7F, 0x7F,
                 ;    (int)10, (int)0, (int)0,
                 ;    (int)180, (int)100,
                 ;    (int)1600, (int)5000,
                 ;    (int)-2000, (int)1500, (int)2200,
                 ;    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                 ;    1,  // Зима
                 ;    0,  // Позиция текущего alarm в EEPROM
                 ;    0,   // Сколько всего зарегистрировано в EEPROM
                 ;    MAX_DS1820, // Сколько должно быть термометров в системе
                 ;
                 ;    /*{{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE}, // 28	4D	52	7E 	3	0	0	6E	1	FF	FE воздух помещение
                 ;     {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD}, // 28	D3	8	7E	3	0	0	E4	1	FF	FD   воздух улица
                 ;     {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC}, // 28	8C	38	7E	3	0	0	6A	1	FF	FC   вода подача
                 ;     {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFB}} // 28	91	9	7E	3	0	0	32	1	FF	FB   вода обратка
                 ;    */
                 ;     /*  Ньютона металоизделия П1
                 ;     {{0x28,0x29,0x32,0x7e,0x03,0x00,0x00,0x60,0x01}, // 28	29	32	7E 	3	0	0	60	1	FF	FE
                 ;     {0x28,0x13,0x3b,0x7e,0x03,0x00,0x00,0xb1,0x01}, // 28	13	3B	7E	3	0	0	B1	1	FF	FD
                 ;     {0x28,0x1e,0x2f,0x7e,0x03,0x00,0x00,0x98,0x01}, // 28	1E	2F	7E	3	0	0	98	1	FF	FC
                 ;     {0x28,0x39,0x46,0x7e,0x03,0x00,0x00,0x49,0x01}} // 28	39	46	7E	3	0	0	49	1	FF	FB
                 ;    */
                 ;     //Ньютона металоизделия П2
                 ;     {{0x28,0x95,0x0f,0x7e,0x03,0x00,0x00,0x72,0x01}, // 28	95	F	7E 	3	0	0	72	1	FF	FE
                 ;     {0x28,0xc1,0x1a,0x7e,0x03,0x00,0x00,0x2e,0x01}, // 28	C1	1A	7E	3	0	0	2E	1	FF	FD
                 ;     {0x28,0x1a,0x17,0x7e,0x03,0x00,0x00,0xfe,0x01}, // 28	1A	17	7E	3	0	0	FE	1	FF	FC
                 ;     {0x28,0xe8,0x2a,0x7e,0x03,0x00,0x00,0x8a,0x01}} // 28	E8	2A	7E	3	0	0	8A	1	FF	FB
                 ;
                 ;     /*  Ньютона металоизделия П3
                 ;     {{0x28,0x50,0x32,0x7e,0x03,0x00,0x00,0x6e,0x01}, // 28	50	32	7E 	3	0	0	6E	1	FF	FE
                 ;     {0x28,0x3e,0x1c,0x7e,0x03,0x00,0x00,0xe4,0x01}, // 28	3E	1C	7E	3	0	0	E4	1	FF	FD
                 ;     {0x28,0xb7,0x0d,0x7e,0x03,0x00,0x00,0x29,0x01}, // 28	B7	D	7E	3	0	0	29	1	1	FF	FC
                 ;     {0x28,0x2c,0x0c,0x7e,0x03,0x00,0x00,0xad,0x01}} // 28	2C	C	7E	3	0	0	AD	1	FF	FB
                 ;     */
                 ;    /* Ньютона металоизделия П4
                 ;    {{0x28,0x4d,0x52,0x7e,0x03,0x00,0x00,0x6e,0x01}, // 28	4D	52	7E 	3	0	0	6E	1	FF	FE
                 ;     {0x28,0xd3,0x08,0x7e,0x03,0x00,0x00,0xe4,0x01}, // 28	D3	8	7E	3	0	0	E4	1	FF	FD
                 ;     {0x28,0x8c,0x38,0x7e,0x03,0x00,0x00,0x6a,0x01}, // 28	8C	38	7E	3	0	0	6A	1	FF	FC
                 ;     {0x28,0x91,0x09,0x7e,0x03,0x00,0x00,0x32,0x01}} // 28	91	9	7E	3	0	0	32	1	FF	FB
                 ;    */
                 ;
                 ;
                 ;    /*    50 ЛетВЛКСМ бильярдная.
                 ;    {{0x28,0x1b,0xc4,0x24,0x00,0x00,0x00,0xfe,0x01}, // 28	1b	c4	24	0	0	0	fe	1	FF	FE
                 ;     {0x28,0xbb,0x0a,0x95,0x03,0x00,0x00,0xd8,0x01}, // 28	bb	a	95	3	0	0	d8	1	FF	FD
                 ;     {0x22,0x8e,0xe1,0x03,0x00,0x00,0x00,0xf3,0x01}, // 22	8e	e1	3	0	0	0	f3	1	FF	FC
                 ;     {0x22,0x2b,0x08,0x04,0x00,0x00,0x00,0xeb,0x01}} // 22	2b	8	4	0	0	0	eb	1	FF	FB
                 ;    */
                 ;
                 ;};
                 ;unsigned int time_integration=0;
                 ;int tmp_delta;
                 ;byte tap_angle_min = 0;   // Ограничение крана снизу от температуры
                 ;// byte fan_speed = 0;  // Скорость вентилятора
                 ;enum en_event event;                          // Текущее событие в системе
                 ;// Описание функций
                 ;void printallterms(void); void lcd_primary_screen(void);
                 ;void print_prim_par(unsigned char *, unsigned char);
                 ;// Функции основного цикла
                 ;void check_serial(void);
                 ;void check_peripheral(void);
                 ;void event_processing(void);
                 ;void mode_processing(void);
                 ;void update_P(int);
                 ;void update_PID(int error, int iMin, int iMax);
                 ;void init_new_terms(unsigned char);
                 ;// Основная программа
                 ;void main(void) {
                 ; 0002 0066 void main(void) {
                 
                 	.CSEG
                 _main:
                 ; 0002 0067     // register byte i;
                 ; 0002 0068     byte size_prim_par;
                 ; 0002 0069 
                 ; 0002 006A     init();                  // Инициализация всей периферии
                 ;	size_prim_par -> R16
000d5a 940e 0bdd 	CALL _init
                 ; 0002 006B     #asm("sei")             // Global enable interrupts
000d5c 9478      	sei
                 ; 0002 006C     printf ("Инициализация кнопок...\r\n");
                +
000d5d eee2     +LDI R30 , LOW ( 2 * _0x40000 + 0 )
000d5e e0f4     +LDI R31 , HIGH ( 2 * _0x40000 + 0 )
                 	__POINTW1FN _0x40000,0
000d5f 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 006D     init_keys();
000d61 940e 2604 	CALL _init_keys
                 ; 0002 006E     printf("Старт Ньютона металоизделия П2_1. %u.%02u. Найдено %u термометров.\r\n", MAJOR_VERSION, MINOR_VERSION, ds1820_devices);
                +
000d63 efec     +LDI R30 , LOW ( 2 * _0x40000 + 26 )
000d64 e0f4     +LDI R31 , HIGH ( 2 * _0x40000 + 26 )
                 	__POINTW1FN _0x40000,26
000d65 93fa      	ST   -Y,R31
000d66 93ea      	ST   -Y,R30
                +
000d67 e0e4     +LDI R30 , LOW ( 0x4 )
000d68 e0f0     +LDI R31 , HIGH ( 0x4 )
000d69 e060     +LDI R22 , BYTE3 ( 0x4 )
000d6a e070     +LDI R23 , BYTE4 ( 0x4 )
                 	__GETD1N 0x4
000d6b 940e 300c 	CALL __PUTPARD1
                +
000d6d e0e1     +LDI R30 , LOW ( 0x1 )
000d6e e0f0     +LDI R31 , HIGH ( 0x1 )
000d6f e060     +LDI R22 , BYTE3 ( 0x1 )
000d70 e070     +LDI R23 , BYTE4 ( 0x1 )
                 	__GETD1N 0x1
000d71 940e 300c 	CALL __PUTPARD1
000d73 940e 2957 	CALL SUBOPT_0x9
000d75 940e 2989 	CALL SUBOPT_0x12
                 ; 0002 006F     // Сохраняем в EEPROM структуру prim_par
                 ; 0002 0070     // ppr_par = &prim_par;
                 ; 0002 0071     size_prim_par = sizeof(prim_par);
000d77 e508      	LDI  R16,LOW(88)
                 ; 0002 0072     // СБРОС параметров в EEPROM к заводским установкам
                 ; 0002 0073     if (!KEY_CANCEL && !KEY_ENTER) {
000d78 940e 298e 	CALL SUBOPT_0x13
000d7a f419      	BRNE _0x40006
000d7b 940e 2994 	CALL SUBOPT_0x14
000d7d f009      	BREQ _0x40007
                 _0x40006:
000d7e c00d      	RJMP _0x40005
                 _0x40007:
                 ; 0002 0074         unsigned char term_status;
                 ; 0002 0075         ds1820_devices = MAX_DS1820;
000d7f 9721      	SBIW R28,1
                 ;	term_status -> Y+0
000d80 940e 299a 	CALL SUBOPT_0x15
                 ; 0002 0076         // Сихронизация массива термометров с EEPROM
                 ; 0002 0077         term_status = sync_ds1820_eeprom();
                 ; 0002 0078         eeprom_write_struct ((unsigned char *)&prim_par, size_prim_par);
000d82 940e 29a1 	CALL SUBOPT_0x16
000d84 930a      	ST   -Y,R16
000d85 940e 2301 	CALL _eeprom_write_struct
                 ; 0002 0079         // Запускаем таймер инактивности
                 ; 0002 007A         printf("Запись в EEPROM заводских установок.\r\n Неопознанных термометров = %u\r\n", term_status);
                +
000d87 e4e1     +LDI R30 , LOW ( 2 * _0x40000 + 95 )
000d88 e0f5     +LDI R31 , HIGH ( 2 * _0x40000 + 95 )
                 	__POINTW1FN _0x40000,95
000d89 940e 29a6 	CALL SUBOPT_0x17
                 ; 0002 007B     } else {
000d8b c02a      	RJMP _0x4015E
                 _0x40005:
                 ; 0002 007C         unsigned char size_addr = size_prim_par - sizeof(prim_par.addr);
                 ; 0002 007D         if (!KEY_CANCEL) {
000d8c 9721      	SBIW R28,1
                 ;	size_addr -> Y+0
000d8d 2fe0      	MOV  R30,R16
000d8e 52e4      	SUBI R30,LOW(36)
000d8f 83e8      	ST   Y,R30
000d90 940e 298e 	CALL SUBOPT_0x13
000d92 f469      	BRNE _0x40009
                 ; 0002 007E             ds1820_devices = MAX_DS1820;
000d93 e0e4      	LDI  R30,LOW(4)
                +
000d94 93e0 0193+STS _prim_par + 51 , R30
                 	__PUTB1MN _prim_par,51
                 ; 0002 007F             printf("Запись в EEPROM установок по умолчанию.\r\n");
                +
000d96 e8e8     +LDI R30 , LOW ( 2 * _0x40000 + 166 )
000d97 e0f5     +LDI R31 , HIGH ( 2 * _0x40000 + 166 )
                 	__POINTW1FN _0x40000,166
000d98 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 0080             eeprom_write_struct ((unsigned char *)&prim_par, size_addr);
000d9a 940e 29a1 	CALL SUBOPT_0x16
000d9c 81ea      	LDD  R30,Y+2
000d9d 93ea      	ST   -Y,R30
000d9e 940e 2301 	CALL _eeprom_write_struct
                 ; 0002 0081         }
                 ; 0002 0082         if (!KEY_ENTER) {
                 _0x40009:
000da0 940e 2994 	CALL SUBOPT_0x14
000da2 f499      	BRNE _0x4000A
                 ; 0002 0083             unsigned char term_status;
                 ; 0002 0084             eeprom_read_struct ((char *)&prim_par, size_addr);
000da3 9721      	SBIW R28,1
                 ;	size_addr -> Y+1
                 ;	term_status -> Y+0
000da4 940e 29a1 	CALL SUBOPT_0x16
000da6 81eb      	LDD  R30,Y+3
000da7 93ea      	ST   -Y,R30
000da8 940e 234c 	CALL _eeprom_read_struct
                 ; 0002 0085             ds1820_devices = MAX_DS1820;
000daa 940e 299a 	CALL SUBOPT_0x15
                 ; 0002 0086             // Сихронизация массива термометров с EEPROM
                 ; 0002 0087             term_status = sync_ds1820_eeprom();
                 ; 0002 0088             printf("Запись в EEPROM %u новых термометров.\r\n", term_status);
                +
000dac ebe2     +LDI R30 , LOW ( 2 * _0x40000 + 208 )
000dad e0f5     +LDI R31 , HIGH ( 2 * _0x40000 + 208 )
                 	__POINTW1FN _0x40000,208
000dae 940e 29a6 	CALL SUBOPT_0x17
                 ; 0002 0089             eeprom_write_struct ((unsigned char *)&prim_par, size_prim_par);
000db0 940e 29a1 	CALL SUBOPT_0x16
000db2 930a      	ST   -Y,R16
000db3 940e 2301 	CALL _eeprom_write_struct
                 ; 0002 008A         }
000db5 9621      	ADIW R28,1
                 ; 0002 008B     }
                 _0x4000A:
                 _0x4015E:
000db6 9621      	ADIW R28,1
                 ; 0002 008C     // Восстанавливаем из EEPROM структуру prim_par
                 ; 0002 008D     eeprom_read_struct ((char *)&prim_par, size_prim_par);
000db7 940e 29a1 	CALL SUBOPT_0x16
000db9 930a      	ST   -Y,R16
000dba 940e 234c 	CALL _eeprom_read_struct
                 ; 0002 008E     // printf("\r\n");
                 ; 0002 008F     read_all_terms(INIT_MODE);
000dbc 940e 29af 	CALL SUBOPT_0x18
                 ; 0002 0090     // print_all_menu();       // Выведем на отладочную консоль все пункты меню
                 ; 0002 0091     sync_set_par(SYNC_TO_MENU); // Синхронизируем меню с глобальными структурами
000dbe 940e 29b3 	CALL SUBOPT_0x19
                 ; 0002 0092     update_alert_menu();        // Обновляем меню alerts
000dc0 940e 238b 	CALL _update_alert_menu
                 ; 0002 0093     //printf("После чтение из EEPROM значение Tw2=%u\r\n", prim_par.Tw2);
                 ; 0002 0094     // printf("Было %u, стало после чтение из EEPROM size=%u\r\n", sizeof(prim_par), size_prim_par);
                 ; 0002 0095     #ifndef NODEBUG
                 ; 0002 0096     // Если есть термометры, то выводим их значение
                 ; 0002 0097     printallterms();
000dc2 d77c      	RCALL _printallterms
                 ; 0002 0098     #endif
                 ; 0002 0099     lcd_primary_screen();       // выводим стартовую картинку на экранчик
000dc3 d7e6      	RCALL _lcd_primary_screen
                 ; 0002 009A     // if (PINC.6) PORTD |= (1<<4); else PORTD &= ~(1<<4);
                 ; 0002 009B     // if (PINC.7) PORTD &= ~(1<<5); else PORTD |= (1<<5);
                 ; 0002 009C     // if (PINC.5) PORTD &= ~(1<<5); else PORTD |= (1<<5);
                 ; 0002 009D     if (prim_par.season) signal_white(ON); else signal_white(OFF);
                +
000dc4 91e0 0190+LDS R30 , _prim_par + 48
                 	__GETB1MN _prim_par,48
000dc6 30e0      	CPI  R30,0
000dc7 f011      	BREQ _0x4000B
000dc8 e0e1      	LDI  R30,LOW(1)
000dc9 c001      	RJMP _0x4015F
                 _0x4000B:
000dca e0e0      	LDI  R30,LOW(0)
                 _0x4015F:
000dcb 93ea      	ST   -Y,R30
000dcc 940e 25c1 	CALL _signal_white
                 ; 0002 009E     FAN_SPEED = prim_par.fan_speed;
000dce 940e 29b7 	CALL SUBOPT_0x1A
                 ; 0002 009F     //fan_speed = FAN_SPEED;
                 ; 0002 00A0     //if (FAN_SPEED <= FAN_SPEED_MIN) FAN_SPEED = FAN_SPEED_MIN;
                 ; 0002 00A1     tmp_delta = abs(prim_par.TA_in_Min) + TA_IN_NOLIMIT;  // вычисление диапазона работы ограничителя крана по температуре
000dd0 940e 29bf 	CALL SUBOPT_0x1B
000dd2 940e 29c4 	CALL SUBOPT_0x1C
000dd4 2766      	CLR  R22
000dd5 2777      	CLR  R23
                +
000dd6 50ec     +SUBI R30 , LOW ( - 500 )
000dd7 4ffe     +SBCI R31 , HIGH ( - 500 )
000dd8 4f6f     +SBCI R22 , BYTE3 ( - 500 )
000dd9 4f7f     +SBCI R23 , BYTE4 ( - 500 )
                 	__ADDD1N 500
000dda 012f      	MOVW R4,R30
                 ; 0002 00A2     mode.k_angle_limit = (TAP_ANGLE_LIMIT / tmp_delta) * 1000; // вычисление коэффициента ограничения крана для заданных настроек
000ddb 01f2      	MOVW R30,R4
000ddc 940e 2f4e 	CALL __CWD1
000dde 940e 3081 	CALL __CDF1
                +
000de0 e0a0     +LDI R26 , LOW ( 0x429C0000 )
000de1 e0b0     +LDI R27 , HIGH ( 0x429C0000 )
000de2 e98c     +LDI R24 , BYTE3 ( 0x429C0000 )
000de3 e492     +LDI R25 , BYTE4 ( 0x429C0000 )
                 	__GETD2N 0x429C0000
000de4 940e 30fd 	CALL __DIVF21
                +
000de6 e0a0     +LDI R26 , LOW ( 0x447A0000 )
000de7 e0b0     +LDI R27 , HIGH ( 0x447A0000 )
000de8 e78a     +LDI R24 , BYTE3 ( 0x447A0000 )
000de9 e494     +LDI R25 , BYTE4 ( 0x447A0000 )
                 	__GETD2N 0x447A0000
000dea 940e 30af 	CALL __MULF12
                +
000dec ebaf     +LDI R26 , LOW ( _mode + 7 )
000ded e0b1     +LDI R27 , HIGH ( _mode + 7 )
                 	__POINTW2MN _mode,7
000dee 940e 304a 	CALL __CFD1
000df0 93ed      	ST   X+,R30
000df1 93fc      	ST   X,R31
                 ; 0002 00A3     if (UL_T < TA_IN_NOLIMIT) {    // Вычисление угла ограничения (UL_T < TA_IN_NOLIMIT)
000df2 940e 29c8 	CALL SUBOPT_0x1D
000df4 940e 29cf 	CALL SUBOPT_0x1E
000df6 f424      	BRGE _0x4000D
                 ; 0002 00A4         tap_angle_min = ((long int)((TA_IN_NOLIMIT - UL_T) * mode.k_angle_limit))/1000;   // вычисление ограничения крана по температуре воздуха на входе и коэффициенту mode.k_angle_limit
000df7 940e 29c8 	CALL SUBOPT_0x1D
000df9 940e 29d7 	CALL SUBOPT_0x1F
                 ; 0002 00A5     };
                 _0x4000D:
                 ; 0002 00A6     if (TAP_ANGLE < tap_angle_min) TAP_ANGLE = tap_angle_min;
000dfb 940e 29ef 	CALL SUBOPT_0x20
000dfd f424      	BRGE _0x4000E
                +
000dfe e7a5     +LDI R26 , LOW ( _parameters + 30 )
000dff e0b2     +LDI R27 , HIGH ( _parameters + 30 )
                 	__POINTW2MN _parameters,30
000e00 2de6      	MOV  R30,R6
000e01 c004      	RJMP _0x40160
                 ; 0002 00A7        else TAP_ANGLE = prim_par.tap_angle;
                 _0x4000E:
                +
000e02 e7a5     +LDI R26 , LOW ( _parameters + 30 )
000e03 e0b2     +LDI R27 , HIGH ( _parameters + 30 )
                 	__POINTW2MN _parameters,30
                +
000e04 91e0 016c+LDS R30 , _prim_par + 12
                 	__GETB1MN _prim_par,12
                 _0x40160:
000e06 e0f0      	LDI  R31,0
000e07 93ed      	ST   X+,R30
000e08 93fc      	ST   X,R31
                 ; 0002 00A8     printf("Установка вентилятора. %u. Установка крана %u .\r\n", FAN_SPEED, TAP_ANGLE);
                +
000e09 edea     +LDI R30 , LOW ( 2 * _0x40000 + 248 )
000e0a e0f5     +LDI R31 , HIGH ( 2 * _0x40000 + 248 )
                 	__POINTW1FN _0x40000,248
000e0b 940e 29f8 	CALL SUBOPT_0x21
000e0d 940e 2a03 	CALL SUBOPT_0x22
000e0f 940e 2a08 	CALL SUBOPT_0x23
000e11 940e 2a0d 	CALL SUBOPT_0x24
                 ; 0002 00A9     while(1) {
                 _0x40010:
                 ; 0002 00AA         // ВНИМАНИЕ! НИЖЕ ДО ОКОНЧАНИЯ ЦИКЛА WHILE КОД НЕ ДОБАВЛЯТЬ!!!
                 ; 0002 00AB         check_serial();
000e13 940e 1798 	CALL _check_serial
                 ; 0002 00AC         poll_keys();
000e15 940e 2643 	CALL _poll_keys
                 ; 0002 00AD         // if (event == ev_none) check_peripheral();
                 ; 0002 00AE         /* if (0 == 1) */ check_peripheral();
000e17 d004      	RCALL _check_peripheral
                 ; 0002 00AF         /* if (0 == 1) */ event_processing();
000e18 d12e      	RCALL _event_processing
                 ; 0002 00B0         /* if (0 == 1) */ mode_processing();
000e19 d419      	RCALL _mode_processing
                 ; 0002 00B1     }; // while (1)
000e1a cff8      	RJMP _0x40010
                 ; 0002 00B2 
                 ; 0002 00B3 } // void main(void)
                 _0x40013:
000e1b cfff      	RJMP _0x40013
                 ;// Функция опроса перефирии и генерации событий по результатом опроса, а также по результатам МАТАнализа
                 ;void check_peripheral(void) {
                 ; 0002 00B5 void check_peripheral(void) {
                 _check_peripheral:
                 ; 0002 00B6     // В этой функции запрещено (!) устанавливать режимы
                 ; 0002 00B7     // Обрабатываем поворот valcoder'а
                 ; 0002 00B8     if ((abs(valcoder)-VALCODER_SENSITY) >= 0) {        // Если сработал valcoder
000e1c 91e0 021f 	LDS  R30,_valcoder
000e1e 940e 2a12 	CALL SUBOPT_0x25
000e20 9731      	SBIW R30,1
000e21 f048      	BRLO _0x40014
                 ; 0002 00B9         // printf ("Сгенерировали кручение (%i)...\r\n", valcoder);
                 ; 0002 00BA         if (valcoder < 0)
000e22 91a0 021f 	LDS  R26,_valcoder
000e24 30a0      	CPI  R26,0
000e25 f414      	BRGE _0x40015
                 ; 0002 00BB             event = ev_left;
000e26 e0e1      	LDI  R30,LOW(1)
000e27 c001      	RJMP _0x40161
                 ; 0002 00BC         else
                 _0x40015:
                 ; 0002 00BD             event = ev_right;
000e28 e0e3      	LDI  R30,LOW(3)
                 _0x40161:
000e29 93e0 01cb 	STS  _event,R30
                 ; 0002 00BE     }
                 ; 0002 00BF     // Если поворота не было, опрашиваем другие порты
                 ; 0002 00C0     if (CHECK_EVENT && (!KEY_ENTER)) event = ev_enter;
                 _0x40014:
000e2b 91a0 01cb 	LDS  R26,_event
000e2d 30a0      	CPI  R26,LOW(0x0)
000e2e f419      	BRNE _0x40018
000e2f 940e 2994 	CALL SUBOPT_0x14
000e31 f009      	BREQ _0x40019
                 _0x40018:
000e32 c003      	RJMP _0x40017
                 _0x40019:
000e33 e0e2      	LDI  R30,LOW(2)
000e34 93e0 01cb 	STS  _event,R30
                 ; 0002 00C1     if (CHECK_EVENT && (!KEY_CANCEL)) event = ev_cancel;
                 _0x40017:
000e36 91a0 01cb 	LDS  R26,_event
000e38 30a0      	CPI  R26,LOW(0x0)
000e39 f419      	BRNE _0x4001B
000e3a 940e 298e 	CALL SUBOPT_0x13
000e3c f009      	BREQ _0x4001C
                 _0x4001B:
000e3d c003      	RJMP _0x4001A
                 _0x4001C:
000e3e e0e4      	LDI  R30,LOW(4)
000e3f 93e0 01cb 	STS  _event,R30
                 ; 0002 00C2     // Обслуживаем кнопку стоп
                 ; 0002 00C3     //if (CHECK_EVENT && (!timer_stop) && (!KEY_STOP)) event = ev_stop;
                 ; 0002 00C4     if (CHECK_EVENT &&  (!KEY_STOP)) event = ev_stop;
                 _0x4001A:
000e41 91a0 01cb 	LDS  R26,_event
000e43 30a0      	CPI  R26,LOW(0x0)
000e44 f421      	BRNE _0x4001E
000e45 e0e0      	LDI  R30,LOW(0)
000e46 940e 2a16 	CALL SUBOPT_0x26
000e48 f009      	BREQ _0x4001F
                 _0x4001E:
000e49 c003      	RJMP _0x4001D
                 _0x4001F:
000e4a e0e8      	LDI  R30,LOW(8)
000e4b 93e0 01cb 	STS  _event,R30
                 ; 0002 00C5     // Обслуживаем кнопку старт, Проверяя при этом наличие каких-либо аварий
                 ; 0002 00C6     if (CHECK_EVENT && (IS_ALERT == 0) && (!KEY_START)) event = ev_start;
                 _0x4001D:
000e4d 91a0 01cb 	LDS  R26,_event
000e4f 30a0      	CPI  R26,LOW(0x0)
000e50 f441      	BRNE _0x40021
                +
000e51 91e0 0250+LDS R30 , _main_menu + 28
                 	__GETB1MN _main_menu,28
000e53 30e0      	CPI  R30,0
000e54 f421      	BRNE _0x40021
000e55 e0e1      	LDI  R30,LOW(1)
000e56 940e 2a16 	CALL SUBOPT_0x26
000e58 f009      	BREQ _0x40022
                 _0x40021:
000e59 c003      	RJMP _0x40020
                 _0x40022:
000e5a e0e7      	LDI  R30,LOW(7)
000e5b 93e0 01cb 	STS  _event,R30
                 ; 0002 00C7     // Для более "живой" клавиатуры выходим, если событие сгенерировано
                 ; 0002 00C8     // Проверка свитчиков
                 ; 0002 00C9     if (CHECK_EVENT && (!prim_par.alert_status[0]) && (KEY_ALARM1)) event = ev_alarm1; // Пожар, перегрев вентилятора, авария частотника
                 _0x40020:
000e5d 91a0 01cb 	LDS  R26,_event
000e5f 30a0      	CPI  R26,LOW(0x0)
000e60 f441      	BRNE _0x40024
                +
000e61 91e0 0184+LDS R30 , _prim_par + 36
                 	__GETB1MN _prim_par,36
000e63 30e0      	CPI  R30,0
000e64 f421      	BRNE _0x40024
000e65 e0e4      	LDI  R30,LOW(4)
000e66 940e 2a16 	CALL SUBOPT_0x26
000e68 f409      	BRNE _0x40025
                 _0x40024:
000e69 c003      	RJMP _0x40023
                 _0x40025:
000e6a e0e9      	LDI  R30,LOW(9)
000e6b 93e0 01cb 	STS  _event,R30
                 ; 0002 00CA     if (CHECK_EVENT && (!prim_par.alert_status[1]) && (KEY_ALARM2)) event = ev_alarm2; // Угроза замораживания от внешнего датчика
                 _0x40023:
000e6d 91a0 01cb 	LDS  R26,_event
000e6f 30a0      	CPI  R26,LOW(0x0)
000e70 f441      	BRNE _0x40027
                +
000e71 91e0 0185+LDS R30 , _prim_par + 37
                 	__GETB1MN _prim_par,37
000e73 30e0      	CPI  R30,0
000e74 f421      	BRNE _0x40027
000e75 e0e5      	LDI  R30,LOW(5)
000e76 940e 2a16 	CALL SUBOPT_0x26
000e78 f409      	BRNE _0x40028
                 _0x40027:
000e79 c003      	RJMP _0x40026
                 _0x40028:
000e7a e0ea      	LDI  R30,LOW(10)
000e7b 93e0 01cb 	STS  _event,R30
                 ; 0002 00CB     if (CHECK_EVENT && (!prim_par.alert_status[11]) && (!KEY_FILTER)) event = ev_filter; // Загрязнение фильтра.
                 _0x40026:
000e7d 91a0 01cb 	LDS  R26,_event
000e7f 30a0      	CPI  R26,LOW(0x0)
000e80 f441      	BRNE _0x4002A
                +
000e81 91e0 018f+LDS R30 , _prim_par + 47
                 	__GETB1MN _prim_par,47
000e83 30e0      	CPI  R30,0
000e84 f421      	BRNE _0x4002A
000e85 e0e6      	LDI  R30,LOW(6)
000e86 940e 2a16 	CALL SUBOPT_0x26
000e88 f009      	BREQ _0x4002B
                 _0x4002A:
000e89 c003      	RJMP _0x40029
                 _0x4002B:
000e8a e0eb      	LDI  R30,LOW(11)
000e8b 93e0 01cb 	STS  _event,R30
                 ; 0002 00CC     // Проверка термометров
                 ; 0002 00CD     if (CHECK_EVENT && (!prim_par.alert_status[7]) && (termometers[0].err >= MAX_OFFLINES))
                 _0x40029:
000e8d 91a0 01cb 	LDS  R26,_event
000e8f 30a0      	CPI  R26,LOW(0x0)
000e90 f441      	BRNE _0x4002D
                +
000e91 91e0 018b+LDS R30 , _prim_par + 43
                 	__GETB1MN _prim_par,43
000e93 30e0      	CPI  R30,0
000e94 f421      	BRNE _0x4002D
                +
000e95 91a0 01e8+LDS R26 , _termometers + 5
                 	__GETB2MN _termometers,5
000e97 30a5      	CPI  R26,LOW(0x5)
000e98 f408      	BRSH _0x4002E
                 _0x4002D:
000e99 c003      	RJMP _0x4002C
                 _0x4002E:
                 ; 0002 00CE         // printf("Нет термометра В1 (Помещение): %d, err=%d", prim_par.alert_status[7], termometers[0].err);
                 ; 0002 00CF         event = ev_term1_nf;
000e9a e0ef      	LDI  R30,LOW(15)
000e9b 93e0 01cb 	STS  _event,R30
                 ; 0002 00D0     if (CHECK_EVENT && (!prim_par.alert_status[8]) && (termometers[1].err >= MAX_OFFLINES))
                 _0x4002C:
000e9d 91a0 01cb 	LDS  R26,_event
000e9f 30a0      	CPI  R26,LOW(0x0)
000ea0 f441      	BRNE _0x40030
                +
000ea1 91e0 018c+LDS R30 , _prim_par + 44
                 	__GETB1MN _prim_par,44
000ea3 30e0      	CPI  R30,0
000ea4 f421      	BRNE _0x40030
                +
000ea5 91a0 01ee+LDS R26 , _termometers + 11
                 	__GETB2MN _termometers,11
000ea7 30a5      	CPI  R26,LOW(0x5)
000ea8 f408      	BRSH _0x40031
                 _0x40030:
000ea9 c003      	RJMP _0x4002F
                 _0x40031:
                 ; 0002 00D1         // Нет термометра В 2 - Улица
                 ; 0002 00D2         event = ev_term2_nf;
000eaa e1e0      	LDI  R30,LOW(16)
000eab 93e0 01cb 	STS  _event,R30
                 ; 0002 00D3     if (CHECK_EVENT && (!prim_par.alert_status[9]) && (termometers[2].err >= MAX_OFFLINES))
                 _0x4002F:
000ead 91a0 01cb 	LDS  R26,_event
000eaf 30a0      	CPI  R26,LOW(0x0)
000eb0 f441      	BRNE _0x40033
                +
000eb1 91e0 018d+LDS R30 , _prim_par + 45
                 	__GETB1MN _prim_par,45
000eb3 30e0      	CPI  R30,0
000eb4 f421      	BRNE _0x40033
                +
000eb5 91a0 01f4+LDS R26 , _termometers + 17
                 	__GETB2MN _termometers,17
000eb7 30a5      	CPI  R26,LOW(0x5)
000eb8 f408      	BRSH _0x40034
                 _0x40033:
000eb9 c003      	RJMP _0x40032
                 _0x40034:
                 ; 0002 00D4         // Нет термометра В 3 - Подача
                 ; 0002 00D5         event = ev_term3_nf;
000eba e1e1      	LDI  R30,LOW(17)
000ebb 93e0 01cb 	STS  _event,R30
                 ; 0002 00D6     if (CHECK_EVENT && (!prim_par.alert_status[10]) && (termometers[3].err >= MAX_OFFLINES))
                 _0x40032:
000ebd 91a0 01cb 	LDS  R26,_event
000ebf 30a0      	CPI  R26,LOW(0x0)
000ec0 f441      	BRNE _0x40036
                +
000ec1 91e0 018e+LDS R30 , _prim_par + 46
                 	__GETB1MN _prim_par,46
000ec3 30e0      	CPI  R30,0
000ec4 f421      	BRNE _0x40036
                +
000ec5 91a0 01fa+LDS R26 , _termometers + 23
                 	__GETB2MN _termometers,23
000ec7 30a5      	CPI  R26,LOW(0x5)
000ec8 f408      	BRSH _0x40037
                 _0x40036:
000ec9 c003      	RJMP _0x40035
                 _0x40037:
                 ; 0002 00D7         // Нет термометра В 4 - Обратка
                 ; 0002 00D8         event = ev_term4_nf;
000eca e1e2      	LDI  R30,LOW(18)
000ecb 93e0 01cb 	STS  _event,R30
                 ; 0002 00D9     // Здесь осуществляет матанализ для генерации событий
                 ; 0002 00DA     if (UL_T < TA_IN_NOLIMIT) {
                 _0x40035:
000ecd 940e 29c8 	CALL SUBOPT_0x1D
000ecf 940e 29cf 	CALL SUBOPT_0x1E
000ed1 f014      	BRLT PC+3
000ed2 940c 0f27 	JMP _0x40038
                 ; 0002 00DB         if (CHECK_EVENT && !(prim_par.alert_status[8] || prim_par.alert_status[2]) &&
                 ; 0002 00DC             (termometers[1].t < (prim_par.TA_in_Min-5))) // Температура на улице ниже критической  на 5 градусов.UL_T
000ed4 91a0 01cb 	LDS  R26,_event
000ed6 30a0      	CPI  R26,LOW(0x0)
000ed7 f499      	BRNE _0x4003A
                +
000ed8 91e0 018c+LDS R30 , _prim_par + 44
                 	__GETB1MN _prim_par,44
000eda 30e0      	CPI  R30,0
000edb f421      	BRNE _0x4003B
                +
000edc 91e0 0186+LDS R30 , _prim_par + 38
                 	__GETB1MN _prim_par,38
000ede 30e0      	CPI  R30,0
000edf f009      	BREQ _0x4003C
                 _0x4003B:
000ee0 c00a      	RJMP _0x4003A
                 _0x4003C:
                +
000ee1 91a0 01e9+LDS R26 , _termometers + 6
000ee3 91b0 01ea+LDS R27 , _termometers + 6 + 1
                 	__GETW2MN _termometers,6
000ee5 940e 29bf 	CALL SUBOPT_0x1B
000ee7 9735      	SBIW R30,5
000ee8 17ae      	CP   R26,R30
000ee9 07bf      	CPC  R27,R31
000eea f00c      	BRLT _0x4003D
                 _0x4003A:
000eeb c003      	RJMP _0x40039
                 _0x4003D:
                 ; 0002 00DD             event = ev_freezing1;
000eec e0ec      	LDI  R30,LOW(12)
000eed 93e0 01cb 	STS  _event,R30
                 ; 0002 00DE         if (CHECK_EVENT && !(prim_par.alert_status[7] || prim_par.alert_status[3]) &&
                 _0x40039:
                 ; 0002 00DF             (termometers[0].t < prim_par.TA_out_Min)) // Температура в помещения ниже критической POM_T
000eef 91a0 01cb 	LDS  R26,_event
000ef1 30a0      	CPI  R26,LOW(0x0)
000ef2 f4a1      	BRNE _0x4003F
                +
000ef3 91e0 018b+LDS R30 , _prim_par + 43
                 	__GETB1MN _prim_par,43
000ef5 30e0      	CPI  R30,0
000ef6 f421      	BRNE _0x40040
                +
000ef7 91e0 0187+LDS R30 , _prim_par + 39
                 	__GETB1MN _prim_par,39
000ef9 30e0      	CPI  R30,0
000efa f009      	BREQ _0x40041
                 _0x40040:
000efb c00b      	RJMP _0x4003F
                 _0x40041:
                +
000efc 91e0 0180+LDS R30 , _prim_par + 32
000efe 91f0 0181+LDS R31 , _prim_par + 32 + 1
                 	__GETW1MN _prim_par,32
000f00 91a0 01e3 	LDS  R26,_termometers
000f02 91b0 01e4 	LDS  R27,_termometers+1
000f04 17ae      	CP   R26,R30
000f05 07bf      	CPC  R27,R31
000f06 f00c      	BRLT _0x40042
                 _0x4003F:
000f07 c003      	RJMP _0x4003E
                 _0x40042:
                 ; 0002 00E0             event = ev_freezing2;
000f08 e0ed      	LDI  R30,LOW(13)
000f09 93e0 01cb 	STS  _event,R30
                 ; 0002 00E1         if (CHECK_EVENT && !(prim_par.alert_status[10] || prim_par.alert_status[5]) &&
                 _0x4003E:
                 ; 0002 00E2             (termometers[3].t < prim_par.TW_out_Min)) // Температура воды обратки ниже критической WOUT_T
000f0b 91a0 01cb 	LDS  R26,_event
000f0d 30a0      	CPI  R26,LOW(0x0)
000f0e f4a1      	BRNE _0x40044
                +
000f0f 91e0 018e+LDS R30 , _prim_par + 46
                 	__GETB1MN _prim_par,46
000f11 30e0      	CPI  R30,0
000f12 f421      	BRNE _0x40045
                +
000f13 91e0 0189+LDS R30 , _prim_par + 41
                 	__GETB1MN _prim_par,41
000f15 30e0      	CPI  R30,0
000f16 f009      	BREQ _0x40046
                 _0x40045:
000f17 c00b      	RJMP _0x40044
                 _0x40046:
                +
000f18 91a0 01f5+LDS R26 , _termometers + 18
000f1a 91b0 01f6+LDS R27 , _termometers + 18 + 1
                 	__GETW2MN _termometers,18
                +
000f1c 91e0 017a+LDS R30 , _prim_par + 26
000f1e 91f0 017b+LDS R31 , _prim_par + 26 + 1
                 	__GETW1MN _prim_par,26
000f20 17ae      	CP   R26,R30
000f21 07bf      	CPC  R27,R31
000f22 f00c      	BRLT _0x40047
                 _0x40044:
000f23 c003      	RJMP _0x40043
                 _0x40047:
                 ; 0002 00E3             event = ev_freezing3;
000f24 e0ee      	LDI  R30,LOW(14)
000f25 93e0 01cb 	STS  _event,R30
                 ; 0002 00E4     }
                 _0x40043:
                 ; 0002 00E5     if (CHECK_EVENT && (mode.initrun)) {
                 _0x40038:
000f27 91a0 01cb 	LDS  R26,_event
000f29 30a0      	CPI  R26,LOW(0x0)
000f2a f421      	BRNE _0x40049
                +
000f2b 91e0 01ba+LDS R30 , _mode + 2
                 	__GETB1MN _mode,2
000f2d 30e0      	CPI  R30,0
000f2e f409      	BRNE _0x4004A
                 _0x40049:
000f2f c016      	RJMP _0x40048
                 _0x4004A:
                 ; 0002 00E6         mode.initrun -= 4;
                +
000f30 91e0 01ba+LDS R30 , _mode + 2
                 	__GETB1MN _mode,2
000f32 50e4      	SUBI R30,LOW(4)
                +
000f33 93e0 01ba+STS _mode + 2 , R30
                 	__PUTB1MN _mode,2
                 ; 0002 00E7         if ((mode.initrun) && (IS_ALERT == 0)) event = ev_start;
                +
000f35 91e0 01ba+LDS R30 , _mode + 2
                 	__GETB1MN _mode,2
000f37 30e0      	CPI  R30,0
000f38 f021      	BREQ _0x4004C
                +
000f39 91e0 0250+LDS R30 , _main_menu + 28
                 	__GETB1MN _main_menu,28
000f3b 30e0      	CPI  R30,0
000f3c f009      	BREQ _0x4004D
                 _0x4004C:
000f3d c002      	RJMP _0x4004B
                 _0x4004D:
000f3e e0e7      	LDI  R30,LOW(7)
000f3f c001      	RJMP _0x40162
                 ; 0002 00E8        else
                 _0x4004B:
                 ; 0002 00E9             event = ev_stop;
000f40 e0e8      	LDI  R30,LOW(8)
                 _0x40162:
000f41 93e0 01cb 	STS  _event,R30
                 ; 0002 00EA         mode.initrun = 0;
000f43 e0e0      	LDI  R30,LOW(0)
                +
000f44 93e0 01ba+STS _mode + 2 , R30
                 	__PUTB1MN _mode,2
                 ; 0002 00EB     }
                 ; 0002 00EC     #ifndef NODEBUG
                 ; 0002 00ED     // if (event) printf ("Сгенерировано новое событие: %u\r\n", (unsigned char)event);
                 ; 0002 00EE     //if (event) printf ("-");
                 ; 0002 00EF     #endif
                 ; 0002 00F0 }
                 _0x40048:
000f46 9508      	RET
                 ;// Обработка событий в системе
                 ;void event_processing(void) {
                 ; 0002 00F2 void event_processing(void) {
                 _event_processing:
                 ; 0002 00F3     // Только здесь можно менять режимы. Но здесь нельзя опрашивать периферию, делать матанализ
                 ; 0002 00F4     #ifndef NODEBUG
                 ; 0002 00F5     // if (event != ev_none)
                 ; 0002 00F6         // printf ("%02u:%02u Текущее событие = %u\r\n", s_dt.cMM, s_dt.cSS, (unsigned char)event);
                 ; 0002 00F7     #endif
                 ; 0002 00F8     // Также здесь выполняются инициализационные действия для процессов: Вкл./выкл индикатор, запустить бибикалку, нарисовать строку меню и т.п.
                 ; 0002 00F9     switch (event) {
000f47 91e0 01cb 	LDS  R30,_event
                 ; 0002 00FA         case ev_secunda:                // Обрабатываем ежесекундное событие.
000f49 30e5      	CPI  R30,LOW(0x5)
000f4a f011      	BREQ PC+3
000f4b 940c 0f95 	JMP _0x40052
                 ; 0002 00FB             MAIN_T = read_term(0);       // Выводим информацию о главном термометре !!!
000f4d e0e0      	LDI  R30,LOW(0)
000f4e 93ea      	ST   -Y,R30
000f4f d652      	RCALL _read_term
000f50 93e0 0234 	STS  _main_menu,R30
000f52 93f0 0235 	STS  _main_menu+1,R31
                 ; 0002 00FC             switch (mode.menu) {
000f54 91e0 01b8 	LDS  R30,_mode
                 ; 0002 00FD                 case 0: lcd_primary_screen(); break;
000f56 30e0      	CPI  R30,0
000f57 f411      	BRNE _0x40056
000f58 d651      	RCALL _lcd_primary_screen
000f59 c006      	RJMP _0x40055
                 ; 0002 00FE                 case 1: lcd_menu(0); break;
                 _0x40056:
000f5a 30e1      	CPI  R30,LOW(0x1)
000f5b f421      	BRNE _0x40058
000f5c e0e0      	LDI  R30,LOW(0)
000f5d 93ea      	ST   -Y,R30
000f5e 940e 1f9f 	CALL _lcd_menu
                 ; 0002 00FF                 default: ;
                 _0x40058:
                 ; 0002 0100                 // case 2: lcd_edit(0); break;
                 ; 0002 0101             }
                 _0x40055:
                 ; 0002 0102             //if (!mode.print && (mode.run ==1)) printf("-");
                 ; 0002 0103             if (mode.print && (mode.run ==1)) printf("-");
                +
000f60 91e0 01ca+LDS R30 , _mode + 18
                 	__GETB1MN _mode,18
000f62 30e0      	CPI  R30,0
000f63 f021      	BREQ _0x4005A
                +
000f64 91a0 01b9+LDS R26 , _mode + 1
                 	__GETB2MN _mode,1
000f66 30a1      	CPI  R26,LOW(0x1)
000f67 f009      	BREQ _0x4005B
                 _0x4005A:
000f68 c004      	RJMP _0x40059
                 _0x4005B:
                +
000f69 e0ec     +LDI R30 , LOW ( 2 * _0x40000 + 298 )
000f6a e0f6     +LDI R31 , HIGH ( 2 * _0x40000 + 298 )
                 	__POINTW1FN _0x40000,298
000f6b 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 0104             if (mode.print && (mode.run ==3)) printf ("До следующего измерения ПУСК: %u\r\n", time_integration);
                 _0x40059:
                +
000f6d 91e0 01ca+LDS R30 , _mode + 18
                 	__GETB1MN _mode,18
000f6f 30e0      	CPI  R30,0
000f70 f021      	BREQ _0x4005D
                +
000f71 91a0 01b9+LDS R26 , _mode + 1
                 	__GETB2MN _mode,1
000f73 30a3      	CPI  R26,LOW(0x3)
000f74 f009      	BREQ _0x4005E
                 _0x4005D:
000f75 c008      	RJMP _0x4005C
                 _0x4005E:
                +
000f76 e0ee     +LDI R30 , LOW ( 2 * _0x40000 + 300 )
000f77 e0f6     +LDI R31 , HIGH ( 2 * _0x40000 + 300 )
                 	__POINTW1FN _0x40000,300
000f78 93fa      	ST   -Y,R31
000f79 93ea      	ST   -Y,R30
000f7a 940e 2a1b 	CALL SUBOPT_0x27
000f7c 940e 295f 	CALL SUBOPT_0xA
                 ; 0002 0105             if (mode.print && (mode.run ==0)) printf ("До следующего измерения СТОП: %u\r\n", timer_fan);
                 _0x4005C:
                +
000f7e 91e0 01ca+LDS R30 , _mode + 18
                 	__GETB1MN _mode,18
000f80 30e0      	CPI  R30,0
000f81 f021      	BREQ _0x40060
                +
000f82 91a0 01b9+LDS R26 , _mode + 1
                 	__GETB2MN _mode,1
000f84 30a0      	CPI  R26,LOW(0x0)
000f85 f009      	BREQ _0x40061
                 _0x40060:
000f86 c00a      	RJMP _0x4005F
                 _0x40061:
                +
000f87 e3e1     +LDI R30 , LOW ( 2 * _0x40000 + 335 )
000f88 e0f6     +LDI R31 , HIGH ( 2 * _0x40000 + 335 )
                 	__POINTW1FN _0x40000,335
000f89 93fa      	ST   -Y,R31
000f8a 93ea      	ST   -Y,R30
000f8b 91e0 01d8 	LDS  R30,_timer_fan
000f8d 940e 2a21 	CALL SUBOPT_0x28
000f8f 940e 295f 	CALL SUBOPT_0xA
                 ; 0002 0106             event = ev_none;            // Очищаем событие
                 _0x4005F:
000f91 e0e0      	LDI  R30,LOW(0)
000f92 93e0 01cb 	STS  _event,R30
                 ; 0002 0107             break;
000f94 c29d      	RJMP _0x40051
                 ; 0002 0108         case ev_left:                   // printf ("Обрабатываем прокрутку valcoder влево\r\n");
                 _0x40052:
000f95 30e1      	CPI  R30,LOW(0x1)
000f96 f011      	BREQ _0x40063
                 ; 0002 0109         case ev_right:                  // printf ("Обрабатываем прокрутку valcoder вправо\r\n");
000f97 30e3      	CPI  R30,LOW(0x3)
000f98 f539      	BRNE _0x40064
                 _0x40063:
                 ; 0002 010A             // Запускаем таймер инактивности
                 ; 0002 010B             //timer1_valcoder = TIMER_INACTIVE;
                 ; 0002 010C             timer1_valcoder = TIMER_INACTIVE; // prim_par.T_z
000f99 e3ec      	LDI  R30,LOW(60)
000f9a 93e0 01d4 	STS  _timer1_valcoder,R30
                 ; 0002 010D             valcoder = VALCODER_NO_ROTATE;
000f9c e0e0      	LDI  R30,LOW(0)
000f9d 93e0 021f 	STS  _valcoder,R30
                 ; 0002 010E             signal_buz(OFF);
000f9f 93ea      	ST   -Y,R30
000fa0 940e 257c 	CALL _signal_buz
                 ; 0002 010F             // printf ("Обрабатываем прокрутку valcoder (%d), в режиме %d - ", event-2, mode.menu);
                 ; 0002 0110             switch (mode.menu) {
000fa2 91e0 01b8 	LDS  R30,_mode
                 ; 0002 0111                 case 0:
000fa4 30e0      	CPI  R30,0
000fa5 f429      	BRNE _0x40068
                 ; 0002 0112                     sync_set_par(SYNC_TO_MENU);
000fa6 940e 29b3 	CALL SUBOPT_0x19
                 ; 0002 0113                     lcd_menu(mode.menu++); break;   // Выводим меню без изменения позиции printf ("entering...");
000fa8 940e 2a27 	CALL SUBOPT_0x29
000faa c011      	RJMP _0x40067
                 ; 0002 0114                 case 1: lcd_menu(event-2); break;       // printf ("navigating...");
                 _0x40068:
000fab 30e1      	CPI  R30,LOW(0x1)
000fac f439      	BRNE _0x40069
000fad 91e0 01cb 	LDS  R30,_event
000faf 50e2      	SUBI R30,LOW(2)
000fb0 93ea      	ST   -Y,R30
000fb1 940e 1f9f 	CALL _lcd_menu
000fb3 c008      	RJMP _0x40067
                 ; 0002 0115                 case 2: lcd_edit(event-2); break;       // printf ("editing...");
                 _0x40069:
000fb4 30e2      	CPI  R30,LOW(0x2)
000fb5 f431      	BRNE _0x4006B
000fb6 91e0 01cb 	LDS  R30,_event
000fb8 50e2      	SUBI R30,LOW(2)
000fb9 93ea      	ST   -Y,R30
000fba 940e 20c4 	CALL _lcd_edit
                 ; 0002 0116                 default: ;                              // printf ("defaulting...");
                 _0x4006B:
                 ; 0002 0117             }
                 _0x40067:
                 ; 0002 0118             // printf ("\r\n");
                 ; 0002 0119             event = ev_none;            // Очищаем событие
000fbc e0e0      	LDI  R30,LOW(0)
000fbd 93e0 01cb 	STS  _event,R30
                 ; 0002 011A             break;
000fbf c272      	RJMP _0x40051
                 ; 0002 011B         case ev_enter:                  // Если нажат Enter
                 _0x40064:
000fc0 30e2      	CPI  R30,LOW(0x2)
000fc1 f509      	BRNE _0x4006C
                 ; 0002 011C             // LAMP_ECHO_PORT |= (1<<LAMP_ECHO_PIN); timer1_lamp = ENTER_CANCEL_OVERFLOW; if (mode.menu <= 2)
                 ; 0002 011D             key_treated[2]=1;
000fc2 e0e1      	LDI  R30,LOW(1)
                +
000fc3 93e0 02d8+STS _key_treated + 2 , R30
                 	__PUTB1MN _key_treated,2
                 ; 0002 011E             event = ev_none;            // Очищаем событие
000fc5 e0e0      	LDI  R30,LOW(0)
000fc6 93e0 01cb 	STS  _event,R30
                 ; 0002 011F             signal_buz(SHORT);
000fc8 940e 2a30 	CALL SUBOPT_0x2A
                 ; 0002 0120             timer1_valcoder = TIMER_INACTIVE;     // prim_par.T_z Запускаем таймер инактивности
000fca e3ec      	LDI  R30,LOW(60)
000fcb 93e0 01d4 	STS  _timer1_valcoder,R30
                 ; 0002 0121             switch (mode.menu) {
000fcd 91e0 01b8 	LDS  R30,_mode
                 ; 0002 0122                 // lcd_primary_screen();
                 ; 0002 0123                 // Обрабатываем нажатие enter c учетом того, что значение mode.menu еще старое
                 ; 0002 0124                 case 0:
000fcf 30e0      	CPI  R30,0
000fd0 f429      	BRNE _0x40070
                 ; 0002 0125                     sync_set_par(SYNC_TO_MENU);
000fd1 940e 29b3 	CALL SUBOPT_0x19
                 ; 0002 0126                     lcd_menu(mode.menu++); break;           // Если находились в главном экране, запускаем прорисовку меню
000fd3 940e 2a27 	CALL SUBOPT_0x29
000fd5 c00c      	RJMP _0x4006F
                 ; 0002 0127                 case 1: lcd_init_edit(); break;             // Если находились в меню, то анализируем
                 _0x40070:
000fd6 30e1      	CPI  R30,LOW(0x1)
000fd7 f419      	BRNE _0x40071
000fd8 940e 1ffa 	CALL _lcd_init_edit
000fda c007      	RJMP _0x4006F
                 ; 0002 0128                 case 2: lcd_save_edit(); mode.menu = 1; break;
                 _0x40071:
000fdb 30e2      	CPI  R30,LOW(0x2)
000fdc f429      	BRNE _0x4006F
000fdd 940e 206a 	CALL _lcd_save_edit
000fdf e0e1      	LDI  R30,LOW(1)
000fe0 93e0 01b8 	STS  _mode,R30
                 ; 0002 0129             };
                 _0x4006F:
                 ; 0002 012A             break;
000fe2 c24f      	RJMP _0x40051
                 ; 0002 012B         case ev_timer:
                 _0x4006C:
000fe3 30e6      	CPI  R30,LOW(0x6)
000fe4 f441      	BRNE _0x40073
                 ; 0002 012C             // Запускаем таймер инактивности
                 ; 0002 012D             if (mode.menu) timer1_valcoder = TIMER_INACTIVE; // prim_par.T_z.....TIMER_INACTIVE;
000fe5 91e0 01b8 	LDS  R30,_mode
000fe7 30e0      	CPI  R30,0
000fe8 f019      	BREQ _0x40074
000fe9 e3ec      	LDI  R30,LOW(60)
000fea 93e0 01d4 	STS  _timer1_valcoder,R30
                 ; 0002 012E         case ev_cancel:
                 _0x40074:
000fec c002      	RJMP _0x40075
                 _0x40073:
000fed 30e4      	CPI  R30,LOW(0x4)
000fee f539      	BRNE _0x40076
                 _0x40075:
                 ; 0002 012F             if (event == ev_cancel) {
000fef 91a0 01cb 	LDS  R26,_event
000ff1 30a4      	CPI  R26,LOW(0x4)
000ff2 f441      	BRNE _0x40077
                 ; 0002 0130                 signal_buz(SHORT);
000ff3 940e 2a30 	CALL SUBOPT_0x2A
                 ; 0002 0131                 key_treated[3]=1;
000ff5 e0e1      	LDI  R30,LOW(1)
                +
000ff6 93e0 02d9+STS _key_treated + 3 , R30
                 	__PUTB1MN _key_treated,3
                 ; 0002 0132                 timer1_valcoder = TIMER_INACTIVE;     //prim_par.T_z  ....Запускаем таймер инактивности ()
000ff8 e3ec      	LDI  R30,LOW(60)
000ff9 93e0 01d4 	STS  _timer1_valcoder,R30
                 ; 0002 0133             }
                 ; 0002 0134             event = ev_none;            // Очищаем событие
                 _0x40077:
000ffb e0e0      	LDI  R30,LOW(0)
000ffc 93e0 01cb 	STS  _event,R30
                 ; 0002 0135             // print_prim_par((unsigned char *)&prim_par, sizeof(prim_par));
                 ; 0002 0136             switch (mode.menu) {
000ffe 91e0 01b8 	LDS  R30,_mode
                 ; 0002 0137                 case 0: lcd_primary_screen(); break;
001000 30e0      	CPI  R30,0
001001 f411      	BRNE _0x4007B
001002 d5a7      	RCALL _lcd_primary_screen
001003 c00f      	RJMP _0x4007A
                 ; 0002 0138                 case 1: --mode.menu; lcd_esc_edit(); break;
                 _0x4007B:
001004 30e1      	CPI  R30,LOW(0x1)
001005 f419      	BRNE _0x4007C
001006 940e 2a34 	CALL SUBOPT_0x2B
001008 c00a      	RJMP _0x4007A
                 ; 0002 0139                 case 2: --mode.menu; lcd_esc_edit(); break;
                 _0x4007C:
001009 30e2      	CPI  R30,LOW(0x2)
00100a f419      	BRNE _0x4007D
00100b 940e 2a34 	CALL SUBOPT_0x2B
00100d c005      	RJMP _0x4007A
                 ; 0002 013A                 case 3: mode.menu = 1; break;
                 _0x4007D:
00100e 30e3      	CPI  R30,LOW(0x3)
00100f f419      	BRNE _0x4007A
001010 e0e1      	LDI  R30,LOW(1)
001011 93e0 01b8 	STS  _mode,R30
                 ; 0002 013B             };
                 _0x4007A:
                 ; 0002 013C              lcd_clrscr();
001013 940e 0cd1 	CALL _lcd_clrscr
                 ; 0002 013D             break;
001015 c21c      	RJMP _0x40051
                 ; 0002 013E         case ev_start:      // пуск установки
                 _0x40076:
001016 30e7      	CPI  R30,LOW(0x7)
001017 f011      	BREQ PC+3
001018 940c 1095 	JMP _0x4007F
                 ; 0002 013F             key_treated[1]=1;
00101a e0e1      	LDI  R30,LOW(1)
                +
00101b 93e0 02d7+STS _key_treated + 1 , R30
                 	__PUTB1MN _key_treated,1
                 ; 0002 0140             printf ("Нажата кнопка ПУСК. ");
                +
00101d e5e4     +LDI R30 , LOW ( 2 * _0x40000 + 370 )
00101e e0f6     +LDI R31 , HIGH ( 2 * _0x40000 + 370 )
                 	__POINTW1FN _0x40000,370
00101f 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 0141             switch (mode.run) {
                +
001021 91e0 01b9+LDS R30 , _mode + 1
                 	__GETB1MN _mode,1
                 ; 0002 0142                 case 0: { // Процесс старта вентилятора
001023 30e0      	CPI  R30,0
001024 f011      	BREQ PC+3
001025 940c 106f 	JMP _0x40083
                 ; 0002 0143                     if (prim_par.season) {
                +
001027 91e0 0190+LDS R30 , _prim_par + 48
                 	__GETB1MN _prim_par,48
001029 30e0      	CPI  R30,0
00102a f121      	BREQ _0x40084
                 ; 0002 0144                         signal_white(ON);
00102b 940e 2a3b 	CALL SUBOPT_0x2C
                 ; 0002 0145                         mode.pomp = 1;
00102d e0e1      	LDI  R30,LOW(1)
                +
00102e 93e0 01bb+STS _mode + 3 , R30
                 	__PUTB1MN _mode,3
                 ; 0002 0146                         mode.run = 1;                // Устанавливаем режим Прогрев
                +
001030 93e0 01b9+STS _mode + 1 , R30
                 	__PUTB1MN _mode,1
                 ; 0002 0147                         timer_start = prim_par.T_z; // TIMER_INACTIVE  ...Запускаем таймер STRT
001032 940e 2a3f 	CALL SUBOPT_0x2D
001034 93e0 01d5 	STS  _timer_start,R30
001036 93f0 01d6 	STS  _timer_start+1,R31
                 ; 0002 0148                         TAP_ANGLE = PWM_MAX;
001038 940e 2a44 	CALL SUBOPT_0x2E
                 ; 0002 0149                         printf("Включен режим Прогрев. LIMIT = %d, Время прогрева = %d\r\n", mode.k_angle_limit,prim_par.T_z);
                +
00103a e6e9     +LDI R30 , LOW ( 2 * _0x40000 + 391 )
00103b e0f6     +LDI R31 , HIGH ( 2 * _0x40000 + 391 )
                 	__POINTW1FN _0x40000,391
00103c 93fa      	ST   -Y,R31
00103d 93ea      	ST   -Y,R30
                +
00103e 91e0 01bf+LDS R30 , _mode + 7
001040 91f0 01c0+LDS R31 , _mode + 7 + 1
                 	__GETW1MN _mode,7
001042 940e 2a08 	CALL SUBOPT_0x23
001044 940e 2a3f 	CALL SUBOPT_0x2D
001046 940e 2a08 	CALL SUBOPT_0x23
001048 940e 2a0d 	CALL SUBOPT_0x24
                 ; 0002 014A                         signal_green(MEANDR);
00104a e0e4      	LDI  R30,LOW(4)
00104b 93ea      	ST   -Y,R30
00104c 940e 25b4 	CALL _signal_green
                 ; 0002 014B                     } else {
00104e c011      	RJMP _0x40085
                 _0x40084:
                 ; 0002 014C                         signal_white(OFF);
00104f 940e 2979 	CALL SUBOPT_0xF
                 ; 0002 014D                         mode.pomp = 0;
001051 e0e0      	LDI  R30,LOW(0)
                +
001052 93e0 01bb+STS _mode + 3 , R30
                 	__PUTB1MN _mode,3
                 ; 0002 014E                         mode.run = 3;
001054 e0e3      	LDI  R30,LOW(3)
                +
001055 93e0 01b9+STS _mode + 1 , R30
                 	__PUTB1MN _mode,1
                 ; 0002 014F                         mode.fan = 1;
001057 e0e1      	LDI  R30,LOW(1)
                +
001058 93e0 01bc+STS _mode + 4 , R30
                 	__PUTB1MN _mode,4
                 ; 0002 0150                         signal_green(ON);
00105a 940e 2931 	CALL SUBOPT_0x2
                 ; 0002 0151                         printf("Включен режим Пуск\r\n");
                +
00105c eae2     +LDI R30 , LOW ( 2 * _0x40000 + 448 )
00105d e0f6     +LDI R31 , HIGH ( 2 * _0x40000 + 448 )
                 	__POINTW1FN _0x40000,448
00105e 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 0152                         };
                 _0x40085:
                 ; 0002 0153                     FAN_SPEED = prim_par.fan_speed;
001060 940e 29b7 	CALL SUBOPT_0x1A
                 ; 0002 0154                     if (FAN_SPEED <= FAN_SPEED_MIN) FAN_SPEED = FAN_SPEED_MIN;
001062 940e 2a4b 	CALL SUBOPT_0x2F
001064 f414      	BRGE _0x40086
001065 940e 2a53 	CALL SUBOPT_0x30
                 ; 0002 0155                     count_fan = 0;
                 _0x40086:
001067 e0e0      	LDI  R30,LOW(0)
001068 93e0 01d9 	STS  _count_fan,R30
                 ; 0002 0156                     time_integration = 0;
00106a 940e 2a5a 	CALL SUBOPT_0x31
                 ; 0002 0157                     signal_buz(LONG);
00106c 940e 2a60 	CALL SUBOPT_0x32
                 ; 0002 0158                     break;
00106e c022      	RJMP _0x40082
                 ; 0002 0159                 } //mode.run=0 ;
                 ; 0002 015A                 case 1: signal_buz(SHORT); signal_green(SHORT); printf("Режим Прогрев.\r\n"); break; //mode.run=1;
                 _0x40083:
00106f 30e1      	CPI  R30,LOW(0x1)
001070 f449      	BRNE _0x40087
001071 940e 2a30 	CALL SUBOPT_0x2A
001073 940e 2a64 	CALL SUBOPT_0x33
                +
001075 ebe7     +LDI R30 , LOW ( 2 * _0x40000 + 469 )
001076 e0f6     +LDI R31 , HIGH ( 2 * _0x40000 + 469 )
                 	__POINTW1FN _0x40000,469
001077 940e 292a 	CALL SUBOPT_0x1
001079 c017      	RJMP _0x40082
                 ; 0002 015B                 case 2: signal_buz(SHORT); signal_green(LONG); printf("Режим Остановки.\r\n"); break; //mode.run=2 ;
                 _0x40087:
00107a 30e2      	CPI  R30,LOW(0x2)
00107b f459      	BRNE _0x40088
00107c 940e 2a30 	CALL SUBOPT_0x2A
00107e e0e3      	LDI  R30,LOW(3)
00107f 93ea      	ST   -Y,R30
001080 940e 25b4 	CALL _signal_green
                +
001082 ece8     +LDI R30 , LOW ( 2 * _0x40000 + 486 )
001083 e0f6     +LDI R31 , HIGH ( 2 * _0x40000 + 486 )
                 	__POINTW1FN _0x40000,486
001084 940e 292a 	CALL SUBOPT_0x1
001086 c00a      	RJMP _0x40082
                 ; 0002 015C                 case 3: signal_buz(SHORT); signal_green(ON); printf("Режим Пуск.\r\n");break; //mode.run=3
                 _0x40088:
001087 30e3      	CPI  R30,LOW(0x3)
001088 f441      	BRNE _0x4008A
001089 940e 2a30 	CALL SUBOPT_0x2A
00108b 940e 2931 	CALL SUBOPT_0x2
                +
00108d edeb     +LDI R30 , LOW ( 2 * _0x40000 + 505 )
00108e e0f6     +LDI R31 , HIGH ( 2 * _0x40000 + 505 )
                 	__POINTW1FN _0x40000,505
00108f 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 015D             default: break;
                 _0x4008A:
                 ; 0002 015E             };
                 _0x40082:
                 ; 0002 015F             event = ev_none;
001091 e0e0      	LDI  R30,LOW(0)
001092 93e0 01cb 	STS  _event,R30
                 ; 0002 0160             break;
001094 c19d      	RJMP _0x40051
                 ; 0002 0161         case ev_stop:
                 _0x4007F:
001095 30e8      	CPI  R30,LOW(0x8)
001096 f011      	BREQ PC+3
001097 940c 10ec 	JMP _0x4008B
                 ; 0002 0162             key_treated[0]=1;
001099 e0e1      	LDI  R30,LOW(1)
00109a 93e0 02d6 	STS  _key_treated,R30
                 ; 0002 0163             printf ("Нажата кнопка СТОП. ");
                +
00109c eee9     +LDI R30 , LOW ( 2 * _0x40000 + 519 )
00109d e0f6     +LDI R31 , HIGH ( 2 * _0x40000 + 519 )
                 	__POINTW1FN _0x40000,519
00109e 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 0164             switch (mode.run) {
                +
0010a0 91e0 01b9+LDS R30 , _mode + 1
                 	__GETB1MN _mode,1
                 ; 0002 0165                 case 0: signal_buz(SHORT); time_integration = 0; signal_green(OFF); printf(" Режим СТОП.\r\n"); break; //mode.run=0 ;
0010a2 30e0      	CPI  R30,0
0010a3 f459      	BRNE _0x4008F
0010a4 940e 2a30 	CALL SUBOPT_0x2A
0010a6 940e 2a5a 	CALL SUBOPT_0x31
0010a8 940e 293b 	CALL SUBOPT_0x4
                +
0010aa efee     +LDI R30 , LOW ( 2 * _0x40000 + 540 )
0010ab e0f6     +LDI R31 , HIGH ( 2 * _0x40000 + 540 )
                 	__POINTW1FN _0x40000,540
0010ac 940e 292a 	CALL SUBOPT_0x1
0010ae c037      	RJMP _0x4008E
                 ; 0002 0166                 case 1: mode.run = 2;
                 _0x4008F:
0010af 30e1      	CPI  R30,LOW(0x1)
0010b0 f4b1      	BRNE _0x40090
0010b1 e0e2      	LDI  R30,LOW(2)
                +
0010b2 93e0 01b9+STS _mode + 1 , R30
                 	__PUTB1MN _mode,1
                 ; 0002 0167                         timer_start = 0;
0010b4 e0e0      	LDI  R30,LOW(0)
0010b5 93e0 01d5 	STS  _timer_start,R30
0010b7 93e0 01d6 	STS  _timer_start+1,R30
                 ; 0002 0168                         signal_green(SHORT);  signal_buz(LONG);
0010b9 940e 2a64 	CALL SUBOPT_0x33
0010bb 940e 2a60 	CALL SUBOPT_0x32
                 ; 0002 0169                         printf ("Включен режим Остановки\r\n");
                +
0010bd e0ed     +LDI R30 , LOW ( 2 * _0x40000 + 555 )
0010be e0f7     +LDI R31 , HIGH ( 2 * _0x40000 + 555 )
                 	__POINTW1FN _0x40000,555
0010bf 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 016A                         timer_stop = TIME_STOP;    // Запускаем таймер STOP
0010c1 e0ea      	LDI  R30,LOW(10)
0010c2 93e0 01d7 	STS  _timer_stop,R30
                 ; 0002 016B                         time_integration = 0; break; //mode.run=1;
0010c4 940e 2a5a 	CALL SUBOPT_0x31
0010c6 c01f      	RJMP _0x4008E
                 ; 0002 016C                 case 2: signal_buz(SHORT); time_integration = 0; printf("Режим Остановки.\r\n"); break; //mode.run=2 ;
                 _0x40090:
0010c7 30e2      	CPI  R30,LOW(0x2)
0010c8 f449      	BRNE _0x40091
0010c9 940e 2a30 	CALL SUBOPT_0x2A
0010cb 940e 2a5a 	CALL SUBOPT_0x31
                +
0010cd ece8     +LDI R30 , LOW ( 2 * _0x40000 + 486 )
0010ce e0f6     +LDI R31 , HIGH ( 2 * _0x40000 + 486 )
                 	__POINTW1FN _0x40000,486
0010cf 940e 292a 	CALL SUBOPT_0x1
0010d1 c014      	RJMP _0x4008E
                 ; 0002 016D                 case 3: mode.run = 2;
                 _0x40091:
0010d2 30e3      	CPI  R30,LOW(0x3)
0010d3 f491      	BRNE _0x40093
0010d4 e0e2      	LDI  R30,LOW(2)
                +
0010d5 93e0 01b9+STS _mode + 1 , R30
                 	__PUTB1MN _mode,1
                 ; 0002 016E                         signal_green(LONG); signal_buz(LONG);
0010d7 e0e3      	LDI  R30,LOW(3)
0010d8 93ea      	ST   -Y,R30
0010d9 940e 25b4 	CALL _signal_green
0010db 940e 2a60 	CALL SUBOPT_0x32
                 ; 0002 016F                         printf ("Включен режим Остановки\r\n");
                +
0010dd e0ed     +LDI R30 , LOW ( 2 * _0x40000 + 555 )
0010de e0f7     +LDI R31 , HIGH ( 2 * _0x40000 + 555 )
                 	__POINTW1FN _0x40000,555
0010df 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 0170                         timer_stop = TIME_STOP;    // Запускаем таймер STOP
0010e1 e0ea      	LDI  R30,LOW(10)
0010e2 93e0 01d7 	STS  _timer_stop,R30
                 ; 0002 0171                         time_integration = 0; break; //mode.run=3
0010e4 940e 2a5a 	CALL SUBOPT_0x31
                 ; 0002 0172             default: break;
                 _0x40093:
                 ; 0002 0173             };
                 _0x4008E:
                 ; 0002 0174             mode.fan = 0;  // Выключение Вентилятора
0010e6 e0e0      	LDI  R30,LOW(0)
                +
0010e7 93e0 01bc+STS _mode + 4 , R30
                 	__PUTB1MN _mode,4
                 ; 0002 0175             event = ev_none;
0010e9 93e0 01cb 	STS  _event,R30
                 ; 0002 0176             break;
0010eb c146      	RJMP _0x40051
                 ; 0002 0177         case ev_alarm1:   // Пожар, перегрев вентилятора, авария частотника
                 _0x4008B:
0010ec 30e9      	CPI  R30,LOW(0x9)
0010ed f531      	BRNE _0x40094
                 ; 0002 0178             signal_red(ON); signal_buz(MEANDR);
0010ee 940e 2a68 	CALL SUBOPT_0x34
                 ; 0002 0179             mode.run = 0;
0010f0 940e 2935 	CALL SUBOPT_0x3
                 ; 0002 017A             mode.fan = 0;
                 ; 0002 017B             if (prim_par.season) mode.pomp = 1; // Проверить
                +
0010f2 91e0 0190+LDS R30 , _prim_par + 48
                 	__GETB1MN _prim_par,48
0010f4 30e0      	CPI  R30,0
0010f5 f019      	BREQ _0x40095
0010f6 e0e1      	LDI  R30,LOW(1)
                +
0010f7 93e0 01bb+STS _mode + 3 , R30
                 	__PUTB1MN _mode,3
                 ; 0002 017C             TAP_ANGLE = PWM_MAX;
                 _0x40095:
0010f9 940e 2a44 	CALL SUBOPT_0x2E
                 ; 0002 017D             signal_white(SHORT);
0010fb e0e2      	LDI  R30,LOW(2)
0010fc 93ea      	ST   -Y,R30
0010fd 940e 25c1 	CALL _signal_white
                 ; 0002 017E             signal_green(OFF);
0010ff 940e 293b 	CALL SUBOPT_0x4
                 ; 0002 017F             alarm_reg(0, 1, get_alert_str(0), 0);
001101 940e 2a70 	CALL SUBOPT_0x35
001103 e0e0      	LDI  R30,LOW(0)
001104 940e 2a79 	CALL SUBOPT_0x36
001106 e0e0      	LDI  R30,LOW(0)
001107 93ea      	ST   -Y,R30
001108 940e 23ba 	CALL _alarm_reg
                 ; 0002 0180             printf ("Авария: %s\r\n", get_alert_str(0));
                +
00110a e2e7     +LDI R30 , LOW ( 2 * _0x40000 + 581 )
00110b e0f7     +LDI R31 , HIGH ( 2 * _0x40000 + 581 )
                 	__POINTW1FN _0x40000,581
00110c 940e 2a7f 	CALL SUBOPT_0x37
00110e 940e 2a84 	CALL SUBOPT_0x38
                 ; 0002 0181             event = ev_none;
001110 e0e0      	LDI  R30,LOW(0)
001111 93e0 01cb 	STS  _event,R30
                 ; 0002 0182             break;
001113 c11e      	RJMP _0x40051
                 ; 0002 0183         case ev_alarm2:   // Угроза замораживания от внешнего датчика
                 _0x40094:
001114 30ea      	CPI  R30,LOW(0xA)
001115 f4f1      	BRNE _0x40096
                 ; 0002 0184             signal_red(ON); signal_buz(MEANDR);
001116 940e 2a68 	CALL SUBOPT_0x34
                 ; 0002 0185             signal_green(SHORT);
001118 940e 2a64 	CALL SUBOPT_0x33
                 ; 0002 0186             mode.run = 0;
00111a 940e 2935 	CALL SUBOPT_0x3
                 ; 0002 0187             mode.fan = 0;
                 ; 0002 0188             mode.pomp = 1;
00111c e0e1      	LDI  R30,LOW(1)
                +
00111d 93e0 01bb+STS _mode + 3 , R30
                 	__PUTB1MN _mode,3
                 ; 0002 0189             TAP_ANGLE = PWM_MAX;
00111f 940e 2a44 	CALL SUBOPT_0x2E
                 ; 0002 018A             alarm_reg(0, 1, get_alert_str(1), 1);
001121 940e 2a70 	CALL SUBOPT_0x35
001123 e0e1      	LDI  R30,LOW(1)
001124 940e 2a79 	CALL SUBOPT_0x36
001126 e0e1      	LDI  R30,LOW(1)
001127 93ea      	ST   -Y,R30
001128 940e 23ba 	CALL _alarm_reg
                 ; 0002 018B             printf ("АВАРИЯ: %s\r\n", get_alert_str(1));
00112a 940e 2a8b 	CALL SUBOPT_0x39
00112c e0e1      	LDI  R30,LOW(1)
00112d 93ea      	ST   -Y,R30
00112e 940e 2a84 	CALL SUBOPT_0x38
                 ; 0002 018C             event = ev_none;
001130 e0e0      	LDI  R30,LOW(0)
001131 93e0 01cb 	STS  _event,R30
                 ; 0002 018D             break;
001133 c0fe      	RJMP _0x40051
                 ; 0002 018E         case ev_freezing1:  // Температура на улице ниже критической UL_T   (Если не повторяется в течении часа восстановление)
                 _0x40096:
001134 30ec      	CPI  R30,LOW(0xC)
001135 f4e1      	BRNE _0x40097
                 ; 0002 018F             alarm_reg(0, 1, get_alert_str(2), 2);
001136 940e 2a70 	CALL SUBOPT_0x35
001138 e0e2      	LDI  R30,LOW(2)
001139 940e 2a79 	CALL SUBOPT_0x36
00113b e0e2      	LDI  R30,LOW(2)
00113c 93ea      	ST   -Y,R30
00113d 940e 23ba 	CALL _alarm_reg
                 ; 0002 0190             //signal_red(SHORT); signal_buz(MEANDR);
                 ; 0002 0191             //signal_green(SHORT);
                 ; 0002 0192             //mode.run = 0; // Режим оттаивания
                 ; 0002 0193             //mode.fan = 0;
                 ; 0002 0194             if (prim_par.season) mode.pomp = 1;
                +
00113f 91e0 0190+LDS R30 , _prim_par + 48
                 	__GETB1MN _prim_par,48
001141 30e0      	CPI  R30,0
001142 f019      	BREQ _0x40098
001143 e0e1      	LDI  R30,LOW(1)
                +
001144 93e0 01bb+STS _mode + 3 , R30
                 	__PUTB1MN _mode,3
                 ; 0002 0195             TAP_ANGLE = PWM_MAX;
                 _0x40098:
001146 940e 2a44 	CALL SUBOPT_0x2E
                 ; 0002 0196             printf ("АВАРИЯ: %s\r\n", get_alert_str(2));
001148 940e 2a8b 	CALL SUBOPT_0x39
00114a e0e2      	LDI  R30,LOW(2)
00114b 93ea      	ST   -Y,R30
00114c 940e 2a84 	CALL SUBOPT_0x38
                 ; 0002 0197             event = ev_none;
00114e e0e0      	LDI  R30,LOW(0)
00114f 93e0 01cb 	STS  _event,R30
                 ; 0002 0198             break;
001151 c0e0      	RJMP _0x40051
                 ; 0002 0199         case ev_freezing2: // Температура в помещения ниже критической POM_T
                 _0x40097:
001152 30ed      	CPI  R30,LOW(0xD)
001153 f4f9      	BRNE _0x40099
                 ; 0002 019A             alarm_reg(0, 1, get_alert_str(3), 3);
001154 940e 2a70 	CALL SUBOPT_0x35
001156 e0e3      	LDI  R30,LOW(3)
001157 940e 2a79 	CALL SUBOPT_0x36
001159 e0e3      	LDI  R30,LOW(3)
00115a 940e 2a90 	CALL SUBOPT_0x3A
                 ; 0002 019B             signal_red(ON); signal_buz(MEANDR);
                 ; 0002 019C             signal_green(OFF);
00115c 940e 293b 	CALL SUBOPT_0x4
                 ; 0002 019D             mode.run = 0;  // Режим оттаивания
00115e 940e 2935 	CALL SUBOPT_0x3
                 ; 0002 019E             mode.fan = 0;
                 ; 0002 019F             if (prim_par.season) mode.pomp = 1;
                +
001160 91e0 0190+LDS R30 , _prim_par + 48
                 	__GETB1MN _prim_par,48
001162 30e0      	CPI  R30,0
001163 f019      	BREQ _0x4009A
001164 e0e1      	LDI  R30,LOW(1)
                +
001165 93e0 01bb+STS _mode + 3 , R30
                 	__PUTB1MN _mode,3
                 ; 0002 01A0             TAP_ANGLE = PWM_MAX;
                 _0x4009A:
001167 940e 2a44 	CALL SUBOPT_0x2E
                 ; 0002 01A1             printf ("АВАРИЯ: %s\r\n", get_alert_str(3));
001169 940e 2a8b 	CALL SUBOPT_0x39
00116b e0e3      	LDI  R30,LOW(3)
00116c 93ea      	ST   -Y,R30
00116d 940e 2a84 	CALL SUBOPT_0x38
                 ; 0002 01A2             event = ev_none;
00116f e0e0      	LDI  R30,LOW(0)
001170 93e0 01cb 	STS  _event,R30
                 ; 0002 01A3             break;
001172 c0bf      	RJMP _0x40051
                 ; 0002 01A4         case ev_freezing3: // Температура воды обратки ниже критической POM_T
                 _0x40099:
001173 30ee      	CPI  R30,LOW(0xE)
001174 f4f9      	BRNE _0x4009B
                 ; 0002 01A5             alarm_reg(0, 1, get_alert_str(5), 5);
001175 940e 2a70 	CALL SUBOPT_0x35
001177 e0e5      	LDI  R30,LOW(5)
001178 940e 2a79 	CALL SUBOPT_0x36
00117a e0e5      	LDI  R30,LOW(5)
00117b 940e 2a90 	CALL SUBOPT_0x3A
                 ; 0002 01A6             signal_red(ON); signal_buz(MEANDR);
                 ; 0002 01A7             signal_green(OFF);
00117d 940e 293b 	CALL SUBOPT_0x4
                 ; 0002 01A8             mode.run = 0;  // Режим оттаивания
00117f 940e 2935 	CALL SUBOPT_0x3
                 ; 0002 01A9             mode.fan = 0;
                 ; 0002 01AA             if (prim_par.season) mode.pomp = 1;
                +
001181 91e0 0190+LDS R30 , _prim_par + 48
                 	__GETB1MN _prim_par,48
001183 30e0      	CPI  R30,0
001184 f019      	BREQ _0x4009C
001185 e0e1      	LDI  R30,LOW(1)
                +
001186 93e0 01bb+STS _mode + 3 , R30
                 	__PUTB1MN _mode,3
                 ; 0002 01AB             TAP_ANGLE = PWM_MAX;
                 _0x4009C:
001188 940e 2a44 	CALL SUBOPT_0x2E
                 ; 0002 01AC             printf ("АВАРИЯ: %s\r\n", get_alert_str(5));
00118a 940e 2a8b 	CALL SUBOPT_0x39
00118c e0e5      	LDI  R30,LOW(5)
00118d 93ea      	ST   -Y,R30
00118e 940e 2a84 	CALL SUBOPT_0x38
                 ; 0002 01AD             event = ev_none;
001190 e0e0      	LDI  R30,LOW(0)
001191 93e0 01cb 	STS  _event,R30
                 ; 0002 01AE             break;
001193 c09e      	RJMP _0x40051
                 ; 0002 01AF         case ev_term1_nf:   // Термометр В1 помещение
                 _0x4009B:
001194 30ef      	CPI  R30,LOW(0xF)
001195 f519      	BRNE _0x4009D
                 ; 0002 01B0             alarm_reg(MAX_OFFLINES, termometers[0].err, get_alert_str(7), 7);
001196 940e 2a94 	CALL SUBOPT_0x3B
                +
001198 91e0 01e8+LDS R30 , _termometers + 5
                 	__GETB1MN _termometers,5
00119a 940e 2a99 	CALL SUBOPT_0x3C
00119c e0e7      	LDI  R30,LOW(7)
00119d 940e 2a79 	CALL SUBOPT_0x36
00119f e0e7      	LDI  R30,LOW(7)
0011a0 940e 2a90 	CALL SUBOPT_0x3A
                 ; 0002 01B1             signal_red(ON); signal_buz(MEANDR);
                 ; 0002 01B2             signal_green(OFF);
0011a2 940e 293b 	CALL SUBOPT_0x4
                 ; 0002 01B3             mode.run = 0;
0011a4 940e 2935 	CALL SUBOPT_0x3
                 ; 0002 01B4             mode.fan = 0;
                 ; 0002 01B5             if (prim_par.season) mode.pomp = 1;
                +
0011a6 91e0 0190+LDS R30 , _prim_par + 48
                 	__GETB1MN _prim_par,48
0011a8 30e0      	CPI  R30,0
0011a9 f019      	BREQ _0x4009E
0011aa e0e1      	LDI  R30,LOW(1)
                +
0011ab 93e0 01bb+STS _mode + 3 , R30
                 	__PUTB1MN _mode,3
                 ; 0002 01B6             TAP_ANGLE = PWM_MAX;
                 _0x4009E:
0011ad 940e 2a44 	CALL SUBOPT_0x2E
                 ; 0002 01B7             printf ("АВАРИЯ: %s\r\n", get_alert_str(7));
0011af 940e 2a8b 	CALL SUBOPT_0x39
0011b1 e0e7      	LDI  R30,LOW(7)
0011b2 93ea      	ST   -Y,R30
0011b3 940e 2a84 	CALL SUBOPT_0x38
                 ; 0002 01B8             event = ev_none;
0011b5 e0e0      	LDI  R30,LOW(0)
0011b6 93e0 01cb 	STS  _event,R30
                 ; 0002 01B9             break;
0011b8 c079      	RJMP _0x40051
                 ; 0002 01BA         case ev_term2_nf:  // Термометр В2 Улица
                 _0x4009D:
0011b9 31e0      	CPI  R30,LOW(0x10)
0011ba f509      	BRNE _0x4009F
                 ; 0002 01BB             alarm_reg(MAX_OFFLINES, termometers[1].err, get_alert_str(8), 8);
0011bb 940e 2a94 	CALL SUBOPT_0x3B
                +
0011bd 91e0 01ee+LDS R30 , _termometers + 11
                 	__GETB1MN _termometers,11
0011bf 940e 2a99 	CALL SUBOPT_0x3C
0011c1 e0e8      	LDI  R30,LOW(8)
0011c2 940e 2a79 	CALL SUBOPT_0x36
0011c4 e0e8      	LDI  R30,LOW(8)
0011c5 940e 2a9d 	CALL SUBOPT_0x3D
                 ; 0002 01BC             signal_red(LONG); signal_buz(MEANDR);
                 ; 0002 01BD             signal_green(OFF);
                 ; 0002 01BE             mode.run = 0;
0011c7 940e 2935 	CALL SUBOPT_0x3
                 ; 0002 01BF             mode.fan = 0;
                 ; 0002 01C0             if (prim_par.season) mode.pomp = 1;
                +
0011c9 91e0 0190+LDS R30 , _prim_par + 48
                 	__GETB1MN _prim_par,48
0011cb 30e0      	CPI  R30,0
0011cc f019      	BREQ _0x400A0
0011cd e0e1      	LDI  R30,LOW(1)
                +
0011ce 93e0 01bb+STS _mode + 3 , R30
                 	__PUTB1MN _mode,3
                 ; 0002 01C1             TAP_ANGLE = PWM_MAX;
                 _0x400A0:
0011d0 940e 2a44 	CALL SUBOPT_0x2E
                 ; 0002 01C2             printf ("АВАРИЯ: %s\r\n", get_alert_str(8));
0011d2 940e 2a8b 	CALL SUBOPT_0x39
0011d4 e0e8      	LDI  R30,LOW(8)
0011d5 93ea      	ST   -Y,R30
0011d6 940e 2a84 	CALL SUBOPT_0x38
                 ; 0002 01C3             event = ev_none;
0011d8 e0e0      	LDI  R30,LOW(0)
0011d9 93e0 01cb 	STS  _event,R30
                 ; 0002 01C4             break;
0011db c056      	RJMP _0x40051
                 ; 0002 01C5         case ev_term3_nf:  // Термометр В3 Подача
                 _0x4009F:
0011dc 31e1      	CPI  R30,LOW(0x11)
0011dd f4c9      	BRNE _0x400A1
                 ; 0002 01C6             // Нет его, ну и хрен с ним
                 ; 0002 01C7             alarm_reg(MAX_OFFLINES, termometers[2].err, get_alert_str(9), 9);
0011de 940e 2a94 	CALL SUBOPT_0x3B
                +
0011e0 91e0 01f4+LDS R30 , _termometers + 17
                 	__GETB1MN _termometers,17
0011e2 940e 2a99 	CALL SUBOPT_0x3C
0011e4 e0e9      	LDI  R30,LOW(9)
0011e5 940e 2a79 	CALL SUBOPT_0x36
0011e7 e0e9      	LDI  R30,LOW(9)
0011e8 93ea      	ST   -Y,R30
0011e9 940e 23ba 	CALL _alarm_reg
                 ; 0002 01C8             printf ("ПРЕДУПРЕЖДЕНИЕ: %s\r\n", get_alert_str(9));
                +
0011eb e4e1     +LDI R30 , LOW ( 2 * _0x40000 + 607 )
0011ec e0f7     +LDI R31 , HIGH ( 2 * _0x40000 + 607 )
                 	__POINTW1FN _0x40000,607
0011ed 93fa      	ST   -Y,R31
0011ee 93ea      	ST   -Y,R30
0011ef e0e9      	LDI  R30,LOW(9)
0011f0 93ea      	ST   -Y,R30
0011f1 940e 2a84 	CALL SUBOPT_0x38
                 ; 0002 01C9             event = ev_none;
0011f3 e0e0      	LDI  R30,LOW(0)
0011f4 93e0 01cb 	STS  _event,R30
                 ; 0002 01CA             break;
0011f6 c03b      	RJMP _0x40051
                 ; 0002 01CB         case ev_term4_nf:  // Термометр В4 Обратка
                 _0x400A1:
0011f7 31e2      	CPI  R30,LOW(0x12)
0011f8 f509      	BRNE _0x400A2
                 ; 0002 01CC             alarm_reg(MAX_OFFLINES, termometers[3].err, get_alert_str(10), 10);
0011f9 940e 2a94 	CALL SUBOPT_0x3B
                +
0011fb 91e0 01fa+LDS R30 , _termometers + 23
                 	__GETB1MN _termometers,23
0011fd 940e 2a99 	CALL SUBOPT_0x3C
0011ff e0ea      	LDI  R30,LOW(10)
001200 940e 2a79 	CALL SUBOPT_0x36
001202 e0ea      	LDI  R30,LOW(10)
001203 940e 2a9d 	CALL SUBOPT_0x3D
                 ; 0002 01CD             signal_red(LONG); signal_buz(MEANDR);
                 ; 0002 01CE             signal_green(OFF);
                 ; 0002 01CF             mode.run = 0;
001205 940e 2935 	CALL SUBOPT_0x3
                 ; 0002 01D0             mode.fan = 0;
                 ; 0002 01D1             if (prim_par.season) mode.pomp = 1;
                +
001207 91e0 0190+LDS R30 , _prim_par + 48
                 	__GETB1MN _prim_par,48
001209 30e0      	CPI  R30,0
00120a f019      	BREQ _0x400A3
00120b e0e1      	LDI  R30,LOW(1)
                +
00120c 93e0 01bb+STS _mode + 3 , R30
                 	__PUTB1MN _mode,3
                 ; 0002 01D2             TAP_ANGLE = PWM_MAX;
                 _0x400A3:
00120e 940e 2a44 	CALL SUBOPT_0x2E
                 ; 0002 01D3             printf ("АВАРИЯ: %s\r\n", get_alert_str(10));
001210 940e 2a8b 	CALL SUBOPT_0x39
001212 e0ea      	LDI  R30,LOW(10)
001213 93ea      	ST   -Y,R30
001214 940e 2a84 	CALL SUBOPT_0x38
                 ; 0002 01D4             event = ev_none;
001216 e0e0      	LDI  R30,LOW(0)
001217 93e0 01cb 	STS  _event,R30
                 ; 0002 01D5             break;
001219 c018      	RJMP _0x40051
                 ; 0002 01D6         case ev_filter:  // Загрязнение фильтра.
                 _0x400A2:
00121a 30eb      	CPI  R30,LOW(0xB)
00121b f4b1      	BRNE _0x400A5
                 ; 0002 01D7             alarm_reg(0, 1, get_alert_str(11), 11);
00121c 940e 2a70 	CALL SUBOPT_0x35
00121e e0eb      	LDI  R30,LOW(11)
00121f 940e 2a79 	CALL SUBOPT_0x36
001221 e0eb      	LDI  R30,LOW(11)
001222 93ea      	ST   -Y,R30
001223 940e 23ba 	CALL _alarm_reg
                 ; 0002 01D8             event = ev_none;
001225 e0e0      	LDI  R30,LOW(0)
001226 93e0 01cb 	STS  _event,R30
                 ; 0002 01D9             printf ("АВАРИЯ: %s\r\n", get_alert_str(11));
001228 940e 2a8b 	CALL SUBOPT_0x39
00122a e0eb      	LDI  R30,LOW(11)
00122b 93ea      	ST   -Y,R30
00122c 940e 2a84 	CALL SUBOPT_0x38
                 ; 0002 01DA             signal_red(SHORT);
00122e e0e2      	LDI  R30,LOW(2)
00122f 93ea      	ST   -Y,R30
001230 940e 25a7 	CALL _signal_red
                 ; 0002 01DB             break;
                 ; 0002 01DC         default:
                 _0x400A5:
                 ; 0002 01DD             break;
                 ; 0002 01DE     };
                 _0x40051:
                 ; 0002 01DF }
001232 9508      	RET
                 ;// Обработка режима работы системы
                 ;void mode_processing(void) {
                 ; 0002 01E1 void mode_processing(void) {
                 _mode_processing:
                 ; 0002 01E2     // В ЭТОЙ ФУНКЦИИ ЗАПРЕЩЕНО ИЗМЕНЕНИЕ РЕЖИМОВ И ГЕНЕРАЦИЯ СОБЫТИЙ. ТОЛЬКО ПОДДЕРЖКА!
                 ; 0002 01E3     int water_out_bound;
                 ; 0002 01E4     int water_out_bound_1;
                 ; 0002 01E5     static int error_w_stop = 0;
                 ; 0002 01E6     POM_T = termometers[0].t;
001233 940e 3144 	CALL __SAVELOCR4
                 ;	water_out_bound -> R16,R17
                 ;	water_out_bound_1 -> R18,R19
001235 91e0 01e3 	LDS  R30,_termometers
001237 91f0 01e4 	LDS  R31,_termometers+1
                +
001239 93e0 025c+STS _parameters + 5 , R30
00123b 93f0 025d+STS _parameters + 5 + 1 , R31
                 	__PUTW1MN _parameters,5
                 ; 0002 01E7     UL_T = termometers[1].t;
                +
00123d 91e0 01e9+LDS R30 , _termometers + 6
00123f 91f0 01ea+LDS R31 , _termometers + 6 + 1
                 	__GETW1MN _termometers,6
                +
001241 93e0 0261+STS _parameters + 10 , R30
001243 93f0 0262+STS _parameters + 10 + 1 , R31
                 	__PUTW1MN _parameters,10
                 ; 0002 01E8     SET_T = prim_par.TA_out_prs;
001245 940e 2aa9 	CALL SUBOPT_0x3E
                 ; 0002 01E9     WIN_T = termometers[2].t;
                +
001247 91e0 01ef+LDS R30 , _termometers + 12
001249 91f0 01f0+LDS R31 , _termometers + 12 + 1
                 	__GETW1MN _termometers,12
                +
00124b 93e0 0266+STS _parameters + 15 , R30
00124d 93f0 0267+STS _parameters + 15 + 1 , R31
                 	__PUTW1MN _parameters,15
                 ; 0002 01EA     WOUT_T = termometers[3].t;
                +
00124f 91e0 01f5+LDS R30 , _termometers + 18
001251 91f0 01f6+LDS R31 , _termometers + 18 + 1
                 	__GETW1MN _termometers,18
                +
001253 93e0 026b+STS _parameters + 20 , R30
001255 93f0 026c+STS _parameters + 20 + 1 , R31
                 	__PUTW1MN _parameters,20
                 ; 0002 01EB     OCR0 = (unsigned char)TAP_ANGLE;
                +
001257 91e0 0275+LDS R30 , _parameters + 30
                 	__GETB1MN _parameters,30
001259 bfec      	OUT  0x3C,R30
                 ; 0002 01EC     OCR2 = (unsigned char)FAN_SPEED;
                +
00125a 91e0 027f+LDS R30 , _parameters + 40
                 	__GETB1MN _parameters,40
00125c bde3      	OUT  0x23,R30
                 ; 0002 01ED 
                 ; 0002 01EE     // WHITE = prim_par.season;
                 ; 0002 01EF     MOTOR = mode.fan;
                +
00125d 91e0 01bc+LDS R30 , _mode + 4
                 	__GETB1MN _mode,4
00125f 30e0      	CPI  R30,0
001260 f411      	BRNE _0x400A6
001261 9894      	CBI  0x12,4
001262 c001      	RJMP _0x400A7
                 _0x400A6:
001263 9a94      	SBI  0x12,4
                 _0x400A7:
                 ; 0002 01F0     POMP = mode.pomp;
                +
001264 91e0 01bb+LDS R30 , _mode + 3
                 	__GETB1MN _mode,3
001266 30e0      	CPI  R30,0
001267 f411      	BRNE _0x400A8
001268 9895      	CBI  0x12,5
001269 c001      	RJMP _0x400A9
                 _0x400A8:
00126a 9a95      	SBI  0x12,5
                 _0x400A9:
                 ; 0002 01F1     FAN_VAR = mode.fan;
                +
00126b e8a4     +LDI R26 , LOW ( _parameters + 45 )
00126c e0b2     +LDI R27 , HIGH ( _parameters + 45 )
                 	__POINTW2MN _parameters,45
                +
00126d 91e0 01bc+LDS R30 , _mode + 4
                 	__GETB1MN _mode,4
00126f 940e 2ab2 	CALL SUBOPT_0x3F
                 ; 0002 01F2     POMP_VAR = mode.pomp;
001271 940e 2ab6 	CALL SUBOPT_0x40
                 ; 0002 01F3     switch (mode.run) {
                +
001273 91e0 01b9+LDS R30 , _mode + 1
                 	__GETB1MN _mode,1
                 ; 0002 01F4         case 0:
001275 30e0      	CPI  R30,0
001276 f011      	BREQ PC+3
001277 940c 136c 	JMP _0x400AD
                 ; 0002 01F5             time_integration = 0;
001279 940e 2a5a 	CALL SUBOPT_0x31
                 ; 0002 01F6             if (prim_par.season) {
                +
00127b 91e0 0190+LDS R30 , _prim_par + 48
                 	__GETB1MN _prim_par,48
00127d 30e0      	CPI  R30,0
00127e f411      	BRNE PC+3
00127f 940c 1364 	JMP _0x400AE
                 ; 0002 01F7             // Вычисление ограничения закрытия крана TAP_ANGLE = tap_angle_min
                 ; 0002 01F8                 if (prim_par.season && (UL_T < TA_IN_NOLIMIT)) {
                +
001281 91e0 0190+LDS R30 , _prim_par + 48
                 	__GETB1MN _prim_par,48
001283 30e0      	CPI  R30,0
001284 f029      	BREQ _0x400B0
001285 940e 29c8 	CALL SUBOPT_0x1D
001287 940e 29cf 	CALL SUBOPT_0x1E
001289 f00c      	BRLT _0x400B1
                 _0x400B0:
00128a c008      	RJMP _0x400AF
                 _0x400B1:
                 ; 0002 01F9                     //int tmp_delta = abs(prim_par.TA_in_Min) + TA_IN_NOLIMIT;
                 ; 0002 01FA                     //mode.k_angle_limit = (TAP_ANGLE_LIMIT / tmp_delta) * 1000;
                 ; 0002 01FB                     tap_angle_min = ((long int)((TA_IN_NOLIMIT - UL_T) * mode.k_angle_limit))/1000;   // вычисление ограничения крана по температуре воздуха на входе и коэффициенту mode.k_angle_limit
00128b 940e 29c8 	CALL SUBOPT_0x1D
00128d 940e 29d7 	CALL SUBOPT_0x1F
                 ; 0002 01FC                     if (tap_angle_min < 100) tap_angle_min = 100 ;
00128f e6e4      	LDI  R30,LOW(100)
001290 166e      	CP   R6,R30
001291 f408      	BRSH _0x400B2
001292 2e6e      	MOV  R6,R30
                 ; 0002 01FD                 }
                 _0x400B2:
                 ; 0002 01FE                 // Процесс поддержания температуры калорифера в режиме СТОП Зимой
                 ; 0002 01FF                 error_w_stop = (prim_par.TW_out_Stop - WOUT_T)/100;
                 _0x400AF:
                +
001293 91a0 017c+LDS R26 , _prim_par + 28
001295 91b0 017d+LDS R27 , _prim_par + 28 + 1
                 	__GETW2MN _prim_par,28
                +
001297 91e0 026b+LDS R30 , _parameters + 20
001299 91f0 026c+LDS R31 , _parameters + 20 + 1
                 	__GETW1MN _parameters,20
00129b 1bae      	SUB  R26,R30
00129c 0bbf      	SBC  R27,R31
00129d 940e 2abb 	CALL SUBOPT_0x41
00129f 93e0 02dd 	STS  _error_w_stop_S0020003,R30
0012a1 93f0 02de 	STS  _error_w_stop_S0020003+1,R31
                 ; 0002 0200                 water_out_bound = prim_par.TW_out_Stop - 200;
0012a3 940e 2ac0 	CALL SUBOPT_0x42
0012a5 5ce8      	SUBI R30,LOW(200)
0012a6 40f0      	SBCI R31,HIGH(200)
0012a7 018f      	MOVW R16,R30
                 ; 0002 0201                 water_out_bound_1 = prim_par.TW_out_Stop - 500;
0012a8 940e 2ac0 	CALL SUBOPT_0x42
0012aa 5fe4      	SUBI R30,LOW(500)
0012ab 40f1      	SBCI R31,HIGH(500)
0012ac 940e 2ac5 	CALL SUBOPT_0x43
                 ; 0002 0202                 // Разогрев калорифера
                 ; 0002 0203                 if ((WOUT_T <= water_out_bound) && (timer_fan == 0)) {
0012ae f024      	BRLT _0x400B4
0012af 91a0 01d8 	LDS  R26,_timer_fan
0012b1 30a0      	CPI  R26,LOW(0x0)
0012b2 f009      	BREQ _0x400B5
                 _0x400B4:
0012b3 c038      	RJMP _0x400B3
                 _0x400B5:
                 ; 0002 0204                     timer_fan = TIME_COOL_STOP;
0012b4 e1e4      	LDI  R30,LOW(20)
0012b5 93e0 01d8 	STS  _timer_fan,R30
                 ; 0002 0205                     // forcheck_event = ev_pomp;
                 ; 0002 0206                     TAP_ANGLE = TAP_ANGLE + error_w_stop;
0012b7 940e 2a03 	CALL SUBOPT_0x22
0012b9 940e 2acd 	CALL SUBOPT_0x44
                 ; 0002 0207                     if (TAP_ANGLE < tap_angle_min) TAP_ANGLE = tap_angle_min ;   // TAP_ANGLE - Состояние выхода на PWM
0012bb 940e 29ef 	CALL SUBOPT_0x20
0012bd f414      	BRGE _0x400B6
0012be 940e 2ad8 	CALL SUBOPT_0x45
                 ; 0002 0208                     if (TAP_ANGLE > PWM_MAX) TAP_ANGLE = PWM_MAX;         // TAP_ANGLE - Состояние выхода на PWM
                 _0x400B6:
0012c0 940e 2adc 	CALL SUBOPT_0x46
0012c2 f014      	BRLT _0x400B7
0012c3 940e 2a44 	CALL SUBOPT_0x2E
                 ; 0002 0209                     if (WOUT_T < water_out_bound_1) {
                 _0x400B7:
0012c5 940e 2ae4 	CALL SUBOPT_0x47
0012c7 17a2      	CP   R26,R18
0012c8 07b3      	CPC  R27,R19
0012c9 f434      	BRGE _0x400B8
                 ; 0002 020A                         //if (!mode.print) printf("Разогрев калорифера: %d, Угол крана расчетный :%d, Угол крана измеренный :%d, угол ограничения: %d, t обратки :%d  \r\n",  error_w_stop, TAP_ANGLE, ADC_VAR1, tap_angle_min, WOUT_T/10);
                 ; 0002 020B                         // if (mode.print) printf("Разогрев калорифера: %d, Угол крана расчетный :%d, Угол крана измеренный :%d, угол ограничения: %d, t обратки :%d  \r\n",  error_w_stop, TAP_ANGLE, ADC_VAR1, tap_angle_min, WOUT_T/10);
                 ; 0002 020C                         signal_white(LONG);
0012ca e0e3      	LDI  R30,LOW(3)
0012cb 93ea      	ST   -Y,R30
0012cc 940e 25c1 	CALL _signal_white
                 ; 0002 020D                         mode.pomp = 1;
0012ce e0e1      	LDI  R30,LOW(1)
0012cf c003      	RJMP _0x40163
                 ; 0002 020E                     } else {
                 _0x400B8:
                 ; 0002 020F                         signal_white(ON);
0012d0 940e 2a3b 	CALL SUBOPT_0x2C
                 ; 0002 0210                         mode.pomp = 0;
0012d2 e0e0      	LDI  R30,LOW(0)
                 _0x40163:
                +
0012d3 93e0 01bb+STS _mode + 3 , R30
                 	__PUTB1MN _mode,3
                 ; 0002 0211                     }
                 ; 0002 0212                     if (mode.print) printf("Разогрев калорифера: %d, Угол крана расчетный :%d, Угол крана измеренный :%d, угол ограничения: %d, t обратки :%d  \r\n",  error_w_stop, TAP_ANGLE, ADC_VAR1, tap_angle_min, WOUT_T/10);
                +
0012d5 91e0 01ca+LDS R30 , _mode + 18
                 	__GETB1MN _mode,18
0012d7 30e0      	CPI  R30,0
0012d8 f099      	BREQ _0x400BA
                +
0012d9 e5e6     +LDI R30 , LOW ( 2 * _0x40000 + 628 )
0012da e0f7     +LDI R31 , HIGH ( 2 * _0x40000 + 628 )
                 	__POINTW1FN _0x40000,628
0012db 940e 2ae9 	CALL SUBOPT_0x48
0012dd 940e 2a03 	CALL SUBOPT_0x22
0012df 940e 2a08 	CALL SUBOPT_0x23
0012e1 940e 2af0 	CALL SUBOPT_0x49
0012e3 2de6      	MOV  R30,R6
0012e4 940e 2a21 	CALL SUBOPT_0x28
0012e6 940e 2ae4 	CALL SUBOPT_0x47
0012e8 940e 2af5 	CALL SUBOPT_0x4A
0012ea 940e 2afa 	CALL SUBOPT_0x4B
                 ; 0002 0213                 }
                 _0x400BA:
                 ; 0002 0214                 // Охлаждение калорифера
                 ; 0002 0215                 water_out_bound = prim_par.TW_out_Stop + 250;
                 _0x400B3:
0012ec 940e 2ac0 	CALL SUBOPT_0x42
0012ee 50e6      	SUBI R30,LOW(-250)
0012ef 4fff      	SBCI R31,HIGH(-250)
0012f0 018f      	MOVW R16,R30
                 ; 0002 0216                 water_out_bound_1 = prim_par.TW_out_Stop + 500;
0012f1 940e 2ac0 	CALL SUBOPT_0x42
0012f3 50ec      	SUBI R30,LOW(-500)
0012f4 4ffe      	SBCI R31,HIGH(-500)
0012f5 940e 2ac5 	CALL SUBOPT_0x43
                 ; 0002 0217                 if ((WOUT_T > water_out_bound) && (timer_fan == 0)) {
0012f7 f424      	BRGE _0x400BC
0012f8 91a0 01d8 	LDS  R26,_timer_fan
0012fa 30a0      	CPI  R26,LOW(0x0)
0012fb f009      	BREQ _0x400BD
                 _0x400BC:
0012fc c03c      	RJMP _0x400BB
                 _0x400BD:
                 ; 0002 0218                     timer_fan = TIME_COOL_STOP;
0012fd e1e4      	LDI  R30,LOW(20)
0012fe 93e0 01d8 	STS  _timer_fan,R30
                 ; 0002 0219                     // printf("Угол крана расчетный :%d  \r\n",   TAP_ANGLE);
                 ; 0002 021A                     if (TAP_ANGLE < tap_angle_min) TAP_ANGLE = tap_angle_min;         // TAP_ANGLE - Состояние выхода на PWM
001300 940e 29ef 	CALL SUBOPT_0x20
001302 f414      	BRGE _0x400BE
001303 940e 2ad8 	CALL SUBOPT_0x45
                 ; 0002 021B                     if (TAP_ANGLE > PWM_MAX) TAP_ANGLE = PWM_MAX;         // TAP_ANGLE - Состояние выхода на PWM
                 _0x400BE:
001305 940e 2adc 	CALL SUBOPT_0x46
001307 f014      	BRLT _0x400BF
001308 940e 2a44 	CALL SUBOPT_0x2E
                 ; 0002 021C                     if ((WOUT_T >= water_out_bound) && (mode.pomp == 1)) {
                 _0x400BF:
00130a 940e 2ae4 	CALL SUBOPT_0x47
00130c 17a0      	CP   R26,R16
00130d 07b1      	CPC  R27,R17
00130e f024      	BRLT _0x400C1
                +
00130f 91a0 01bb+LDS R26 , _mode + 3
                 	__GETB2MN _mode,3
001311 30a1      	CPI  R26,LOW(0x1)
001312 f009      	BREQ _0x400C2
                 _0x400C1:
001313 c005      	RJMP _0x400C0
                 _0x400C2:
                 ; 0002 021D                         //if (!mode.print) printf("Охлаждение калорифера: %d, Угол крана расчетный :%d, Угол крана измеренный :%d, угол ограничения: %d, t обратки :%d  \r\n",  error_w_stop, TAP_ANGLE, ADC_VAR1, tap_angle_min, WOUT_T/10);
                 ; 0002 021E                         //if (mode.print) printf("Охлаждение калорифера: %d, Угол крана расчетный :%d, Угол крана измеренный :%d, угол ограничения: %d, t обратки :%d  \r\n",  error_w_stop, TAP_ANGLE, ADC_VAR1, tap_angle_min, WOUT_T/10);
                 ; 0002 021F                         signal_white(ON);
001314 940e 2a3b 	CALL SUBOPT_0x2C
                 ; 0002 0220                         mode.pomp = 0;
001316 e0e0      	LDI  R30,LOW(0)
                +
001317 93e0 01bb+STS _mode + 3 , R30
                 	__PUTB1MN _mode,3
                 ; 0002 0221                     };
                 _0x400C0:
                 ; 0002 0222                     if (WOUT_T >= water_out_bound_1)  TAP_ANGLE = TAP_ANGLE + error_w_stop;
001319 940e 2ae4 	CALL SUBOPT_0x47
00131b 17a2      	CP   R26,R18
00131c 07b3      	CPC  R27,R19
00131d f024      	BRLT _0x400C3
00131e 940e 2a03 	CALL SUBOPT_0x22
001320 940e 2acd 	CALL SUBOPT_0x44
                 ; 0002 0223                     if (mode.print) printf("Охлаждение калорифера: %d, Угол крана расчетный :%d, Угол крана измеренный :%d, угол ограничения: %d, t обратки :%d  \r\n",  error_w_stop, TAP_ANGLE, ADC_VAR1, tap_angle_min, WOUT_T/10);
                 _0x400C3:
                +
001322 91e0 01ca+LDS R30 , _mode + 18
                 	__GETB1MN _mode,18
001324 30e0      	CPI  R30,0
001325 f099      	BREQ _0x400C4
                +
001326 ecec     +LDI R30 , LOW ( 2 * _0x40000 + 746 )
001327 e0f7     +LDI R31 , HIGH ( 2 * _0x40000 + 746 )
                 	__POINTW1FN _0x40000,746
001328 940e 2ae9 	CALL SUBOPT_0x48
00132a 940e 2a03 	CALL SUBOPT_0x22
00132c 940e 2a08 	CALL SUBOPT_0x23
00132e 940e 2af0 	CALL SUBOPT_0x49
001330 2de6      	MOV  R30,R6
001331 940e 2a21 	CALL SUBOPT_0x28
001333 940e 2ae4 	CALL SUBOPT_0x47
001335 940e 2af5 	CALL SUBOPT_0x4A
001337 940e 2afa 	CALL SUBOPT_0x4B
                 ; 0002 0224                 }
                 _0x400C4:
                 ; 0002 0225                 // Поддержание калорифера
                 ; 0002 0226                 if (timer_fan == 0) {
                 _0x400BB:
001339 91e0 01d8 	LDS  R30,_timer_fan
00133b 30e0      	CPI  R30,0
00133c f531      	BRNE _0x400C5
                 ; 0002 0227                     timer_fan = TIME_COOL_STOP;
00133d e1e4      	LDI  R30,LOW(20)
00133e 93e0 01d8 	STS  _timer_fan,R30
                 ; 0002 0228                     if (WIN_T >= prim_par.TW_out_Stop)  mode.pomp = 0;
                +
001340 91a0 0266+LDS R26 , _parameters + 15
001342 91b0 0267+LDS R27 , _parameters + 15 + 1
                 	__GETW2MN _parameters,15
001344 940e 2ac0 	CALL SUBOPT_0x42
001346 17ae      	CP   R26,R30
001347 07bf      	CPC  R27,R31
001348 f01c      	BRLT _0x400C6
001349 e0e0      	LDI  R30,LOW(0)
                +
00134a 93e0 01bb+STS _mode + 3 , R30
                 	__PUTB1MN _mode,3
                 ; 0002 0229                     //if (!mode.print) printf("Поддержание калорифера: %d,  Угол крана расчетный :%d, Угол крана измеренный :%d, угол ограничения: %d, t обратки :%d  \r\n",  error_w_stop, TAP_ANGLE, ADC_VAR1, tap_angle_min, WOUT_T/10);
                 ; 0002 022A                     if (mode.print) printf("Поддержание калорифера: %d,  Угол крана расчетный :%d, Угол крана измеренный :%d, угол ограничения: %d, t обратки :%d  \r\n",  error_w_stop, TAP_ANGLE, ADC_VAR1, tap_angle_min, WOUT_T/10);
                 _0x400C6:
                +
00134c 91e0 01ca+LDS R30 , _mode + 18
                 	__GETB1MN _mode,18
00134e 30e0      	CPI  R30,0
00134f f099      	BREQ _0x400C7
                +
001350 e4e4     +LDI R30 , LOW ( 2 * _0x40000 + 866 )
001351 e0f8     +LDI R31 , HIGH ( 2 * _0x40000 + 866 )
                 	__POINTW1FN _0x40000,866
001352 940e 2ae9 	CALL SUBOPT_0x48
001354 940e 2a03 	CALL SUBOPT_0x22
001356 940e 2a08 	CALL SUBOPT_0x23
001358 940e 2af0 	CALL SUBOPT_0x49
00135a 2de6      	MOV  R30,R6
00135b 940e 2a21 	CALL SUBOPT_0x28
00135d 940e 2ae4 	CALL SUBOPT_0x47
00135f 940e 2af5 	CALL SUBOPT_0x4A
001361 940e 2afa 	CALL SUBOPT_0x4B
                 ; 0002 022B                 }
                 _0x400C7:
                 ; 0002 022C             } else {
                 _0x400C5:
001363 c005      	RJMP _0x400C8
                 _0x400AE:
                 ; 0002 022D                 signal_white(OFF);
001364 940e 2979 	CALL SUBOPT_0xF
                 ; 0002 022E                 mode.pomp = 0;
001366 e0e0      	LDI  R30,LOW(0)
                +
001367 93e0 01bb+STS _mode + 3 , R30
                 	__PUTB1MN _mode,3
                 ; 0002 022F 
                 ; 0002 0230             }
                 _0x400C8:
                 ; 0002 0231             signal_green(OFF);
001369 940e 293b 	CALL SUBOPT_0x4
                 ; 0002 0232             break;
00136b c0be      	RJMP _0x400AC
                 ; 0002 0233         //case 1:
                 ; 0002 0234         //         if (!mode.print) printf("-");
                 ; 0002 0235         //    break;
                 ; 0002 0236         case 3:
                 _0x400AD:
00136c 30e3      	CPI  R30,LOW(0x3)
00136d f011      	BREQ PC+3
00136e 940c 142a 	JMP _0x400E0
                 ; 0002 0237             //if (IS_ALERT == 0) {
                 ; 0002 0238                 if (prim_par.season)
                +
001370 91e0 0190+LDS R30 , _prim_par + 48
                 	__GETB1MN _prim_par,48
001372 30e0      	CPI  R30,0
001373 f019      	BREQ _0x400CA
                 ; 0002 0239                     signal_white(ON);
001374 940e 2a3b 	CALL SUBOPT_0x2C
                 ; 0002 023A                 else {
001376 c004      	RJMP _0x400CB
                 _0x400CA:
                 ; 0002 023B                     signal_white(OFF);
001377 940e 2979 	CALL SUBOPT_0xF
                 ; 0002 023C                     FAN_SPEED = prim_par.fan_speed;
001379 940e 29b7 	CALL SUBOPT_0x1A
                 ; 0002 023D                 }
                 _0x400CB:
                 ; 0002 023E                 //  Простой алгоритм обработки
                 ; 0002 023F                 if (1 == 0) {
                 ; 0002 0240                     update_P(SET_T - POM_T); // Разница между T Уст и Т помещения
                 ; 0002 0241                     time_integration = prim_par.T_int;
                 ; 0002 0242                 }
                 ; 0002 0243                 if (time_integration == 0) {
00137b 940e 293f 	CALL SUBOPT_0x5
00137d 9730      	SBIW R30,0
00137e f011      	BREQ PC+3
00137f 940c 1428 	JMP _0x400CD
                 ; 0002 0244                     update_PID(SET_T - POM_T, -5000, 5000); // Разница между T Уст и Т помещения
001381 940e 2aff 	CALL SUBOPT_0x4C
001383 91a0 0257 	LDS  R26,_parameters
001385 91b0 0258 	LDS  R27,_parameters+1
001387 1bae      	SUB  R26,R30
001388 0bbf      	SBC  R27,R31
001389 93ba      	ST   -Y,R27
00138a 93aa      	ST   -Y,R26
00138b e7e8      	LDI  R30,LOW(60536)
00138c eefc      	LDI  R31,HIGH(60536)
00138d 93fa      	ST   -Y,R31
00138e 93ea      	ST   -Y,R30
00138f e8e8      	LDI  R30,LOW(5000)
001390 e1f3      	LDI  R31,HIGH(5000)
001391 93fa      	ST   -Y,R31
001392 93ea      	ST   -Y,R30
001393 d0df      	RCALL _update_PID
                 ; 0002 0245                     time_integration = prim_par.T_int;
                +
001394 91e0 0178+LDS R30 , _prim_par + 24
001396 91f0 0179+LDS R31 , _prim_par + 24 + 1
                 	__GETW1MN _prim_par,24
001398 93e0 01d2 	STS  _time_integration,R30
00139a 93f0 01d3 	STS  _time_integration+1,R31
                 ; 0002 0246                     if (prim_par.season && (UL_T < TA_IN_NOLIMIT)) {
                +
00139c 91e0 0190+LDS R30 , _prim_par + 48
                 	__GETB1MN _prim_par,48
00139e 30e0      	CPI  R30,0
00139f f029      	BREQ _0x400CF
0013a0 940e 29c8 	CALL SUBOPT_0x1D
0013a2 940e 29cf 	CALL SUBOPT_0x1E
0013a4 f00c      	BRLT _0x400D0
                 _0x400CF:
0013a5 c082      	RJMP _0x400CE
                 _0x400D0:
                 ; 0002 0247                         // Вычисление ограничения закрытия крана TAP_ANGLE = tap_angle_min
                 ; 0002 0248                         //tap_angle_min = ((long int)((TA_IN_NOLIMIT - UL_T) * mode.k_angle_limit))/1000;
                 ; 0002 0249                         //printf("Пересчет ограничения: %d, Ул. т :%d, Коэффициент :%d \r\n",  (TA_IN_NOLIMIT - UL_T), UL_T, mode.k_angle_limit);
                 ; 0002 024A                         // Вычисление скорсти вентилятора
                 ; 0002 024B                         //#define FAN_SPEED_T_UP 300
                 ; 0002 024C                         //#define FAN_SPEED_T_DOWN 100
                 ; 0002 024D                         if ((TAP_ANGLE == PWM_MAX) && ((POM_T - FAN_SPEED_T_DOWN) < SET_T)) {
0013a6 940e 2a03 	CALL SUBOPT_0x22
0013a8 3fef      	CPI  R30,LOW(0xFF)
0013a9 e0a0      	LDI  R26,HIGH(0xFF)
0013aa 07fa      	CPC  R31,R26
0013ab f451      	BRNE _0x400D2
0013ac 940e 2aff 	CALL SUBOPT_0x4C
0013ae 5ce8      	SUBI R30,LOW(200)
0013af 40f0      	SBCI R31,HIGH(200)
0013b0 01df      	MOVW R26,R30
0013b1 940e 2b04 	CALL SUBOPT_0x4D
0013b3 17ae      	CP   R26,R30
0013b4 07bf      	CPC  R27,R31
0013b5 f00c      	BRLT _0x400D3
                 _0x400D2:
0013b6 c022      	RJMP _0x400D1
                 _0x400D3:
                 ; 0002 024E                             count_fan++;
0013b7 940e 2b09 	CALL SUBOPT_0x4E
                 ; 0002 024F                             if (count_fan == COUNT_FAN_MAX) {
0013b9 f4f1      	BRNE _0x400D4
                 ; 0002 0250                                FAN_SPEED = FAN_SPEED - FAN_SPEED_STEP;
0013ba 940e 2b12 	CALL SUBOPT_0x4F
0013bc 973a      	SBIW R30,10
0013bd 940e 2b17 	CALL SUBOPT_0x50
                 ; 0002 0251                                count_fan = 0;
                 ; 0002 0252                                if  (FAN_SPEED <= FAN_SPEED_MIN) FAN_SPEED = FAN_SPEED_MIN;
0013bf 940e 2a4b 	CALL SUBOPT_0x2F
0013c1 f414      	BRGE _0x400D5
0013c2 940e 2a53 	CALL SUBOPT_0x30
                 ; 0002 0253                             //if (!mode.print) printf("Понижение скорости вентилятора расчетное : %d, измеренное : %d, Счетчик циклов :%d, POM_T :%d \r\n",  FAN_SPEED, ADC_VAR2, count_fan, POM_T);
                 ; 0002 0254                             if (mode.print) printf("Понижение скорости вентилятора расчетное : %d, измеренное : %d, Счетчик циклов :%d, POM_T :%d \r\n",  FAN_SPEED, ADC_VAR2, count_fan, POM_T);
                 _0x400D5:
                +
0013c4 91e0 01ca+LDS R30 , _mode + 18
                 	__GETB1MN _mode,18
0013c6 30e0      	CPI  R30,0
0013c7 f081      	BREQ _0x400D6
                +
0013c8 ebee     +LDI R30 , LOW ( 2 * _0x40000 + 988 )
0013c9 e0f8     +LDI R31 , HIGH ( 2 * _0x40000 + 988 )
                 	__POINTW1FN _0x40000,988
0013ca 940e 29f8 	CALL SUBOPT_0x21
0013cc 940e 2b1f 	CALL SUBOPT_0x51
0013ce 91e0 01d9 	LDS  R30,_count_fan
0013d0 940e 2a21 	CALL SUBOPT_0x28
0013d2 940e 2aff 	CALL SUBOPT_0x4C
0013d4 940e 2a08 	CALL SUBOPT_0x23
0013d6 940e 2b24 	CALL SUBOPT_0x52
                 ; 0002 0255                             }
                 _0x400D6:
                 ; 0002 0256                         } else  {// count_fan = 0;
                 _0x400D4:
0013d8 c038      	RJMP _0x400D7
                 _0x400D1:
                 ; 0002 0257                             if ((FAN_SPEED < prim_par.fan_speed) && ((POM_T + FAN_SPEED_T_UP) > SET_T)) {   //&& (TAP_ANGLE == tap_angle_min
0013d9 940e 2b29 	CALL SUBOPT_0x53
0013db 17ae      	CP   R26,R30
0013dc 07bf      	CPC  R27,R31
0013dd f45c      	BRGE _0x400D9
                +
0013de 91a0 025c+LDS R26 , _parameters + 5
0013e0 91b0 025d+LDS R27 , _parameters + 5 + 1
                 	__GETW2MN _parameters,5
0013e2 5da4      	SUBI R26,LOW(-300)
0013e3 4fbe      	SBCI R27,HIGH(-300)
0013e4 940e 2b04 	CALL SUBOPT_0x4D
0013e6 17ea      	CP   R30,R26
0013e7 07fb      	CPC  R31,R27
0013e8 f00c      	BRLT _0x400DA
                 _0x400D9:
0013e9 c024      	RJMP _0x400D8
                 _0x400DA:
                 ; 0002 0258                                 count_fan++;
0013ea 940e 2b09 	CALL SUBOPT_0x4E
                 ; 0002 0259                                 if (count_fan == COUNT_FAN_MAX) {
0013ec f501      	BRNE _0x400DB
                 ; 0002 025A                                    FAN_SPEED = FAN_SPEED + FAN_SPEED_STEP;
0013ed 940e 2b12 	CALL SUBOPT_0x4F
0013ef 963a      	ADIW R30,10
0013f0 940e 2b17 	CALL SUBOPT_0x50
                 ; 0002 025B                                    count_fan = 0;
                 ; 0002 025C                                    //if  (prim_par.fan_speed <= FAN_SPEED) FAN_SPEED = prim_par.fan_speed;
                 ; 0002 025D                                    if  (FAN_SPEED > prim_par.fan_speed ) FAN_SPEED = prim_par.fan_speed;
0013f2 940e 2b29 	CALL SUBOPT_0x53
0013f4 17ea      	CP   R30,R26
0013f5 07fb      	CPC  R31,R27
0013f6 f414      	BRGE _0x400DC
0013f7 940e 29b7 	CALL SUBOPT_0x1A
                 ; 0002 025E                                    //if (!mode.print) printf("Увеличение скорости вентилятора расчетная: %d, измеренная : %d, Счетчик циклов :%d, Заданная скорость :%d \r\n",  FAN_SPEED, ADC_VAR2, count_fan, prim_par.fan_speed);
                 ; 0002 025F                                    if (mode.print) printf("Увеличение скорости вентилятора расчетная: %d, измеренная : %d, Счетчик циклов :%d, Заданная скорость :%d \r\n",  FAN_SPEED, ADC_VAR2, count_fan, prim_par.fan_speed);
                 _0x400DC:
                +
0013f9 91e0 01ca+LDS R30 , _mode + 18
                 	__GETB1MN _mode,18
0013fb 30e0      	CPI  R30,0
0013fc f081      	BREQ _0x400DD
                +
0013fd e1ef     +LDI R30 , LOW ( 2 * _0x40000 + 1085 )
0013fe e0f9     +LDI R31 , HIGH ( 2 * _0x40000 + 1085 )
                 	__POINTW1FN _0x40000,1085
0013ff 940e 29f8 	CALL SUBOPT_0x21
001401 940e 2b1f 	CALL SUBOPT_0x51
001403 91e0 01d9 	LDS  R30,_count_fan
001405 940e 2a21 	CALL SUBOPT_0x28
                +
001407 91e0 016d+LDS R30 , _prim_par + 13
                 	__GETB1MN _prim_par,13
001409 940e 2a21 	CALL SUBOPT_0x28
00140b 940e 2b24 	CALL SUBOPT_0x52
                 ; 0002 0260                                 }
                 _0x400DD:
                 ; 0002 0261 
                 ; 0002 0262                             } else count_fan = 0;
                 _0x400DB:
00140d c003      	RJMP _0x400DE
                 _0x400D8:
00140e e0e0      	LDI  R30,LOW(0)
00140f 93e0 01d9 	STS  _count_fan,R30
                 ; 0002 0263                         }
                 _0x400DE:
                 _0x400D7:
                 ; 0002 0264                         //if (!mode.print) printf("Скорость вентилятора расчетная: %d, измеренная : %d, Заданная скорость: %d, POM_T: %d, TAP_ANGLE_MIN = %d \r\n",  FAN_SPEED, ADC_VAR2, prim_par.fan_speed, POM_T, tap_angle_min);
                 ; 0002 0265                         if (mode.print) printf("Скорость вентилятора расчетная: %d, измеренная : %d, Заданная скорость: %d, POM_T: %d, TAP_ANGLE_MIN = %d \r\n",  FAN_SPEED, ADC_VAR2, prim_par.fan_speed, POM_T, tap_angle_min);
                +
001411 91e0 01ca+LDS R30 , _mode + 18
                 	__GETB1MN _mode,18
001413 30e0      	CPI  R30,0
001414 f099      	BREQ _0x400DF
                +
001415 e8ec     +LDI R30 , LOW ( 2 * _0x40000 + 1194 )
001416 e0f9     +LDI R31 , HIGH ( 2 * _0x40000 + 1194 )
                 	__POINTW1FN _0x40000,1194
001417 940e 29f8 	CALL SUBOPT_0x21
001419 940e 2b1f 	CALL SUBOPT_0x51
                +
00141b 91e0 016d+LDS R30 , _prim_par + 13
                 	__GETB1MN _prim_par,13
00141d 940e 2a21 	CALL SUBOPT_0x28
00141f 940e 2aff 	CALL SUBOPT_0x4C
001421 940e 2a08 	CALL SUBOPT_0x23
001423 2de6      	MOV  R30,R6
001424 940e 2a21 	CALL SUBOPT_0x28
001426 940e 2afa 	CALL SUBOPT_0x4B
                 ; 0002 0266                     }
                 _0x400DF:
                 ; 0002 0267                 }
                 _0x400CE:
                 ; 0002 0268                 signal_green(ON);
                 _0x400CD:
001428 940e 2931 	CALL SUBOPT_0x2
                 ; 0002 0269             // }
                 ; 0002 026A             break;
                 ; 0002 026B         default:
                 _0x400E0:
                 ; 0002 026C             break;
                 ; 0002 026D     };
                 _0x400AC:
                 ; 0002 026E 
                 ; 0002 026F }
00142a 940e 314b 	CALL __LOADLOCR4
00142c 9624      	ADIW R28,4
00142d 9508      	RET
                 ;void check_range(void) {
                 ; 0002 0270 void check_range(void) {
                 _check_range:
                 ; 0002 0271     // Проверяем на принадлежность диапазону
                 ; 0002 0272     // Вычисление ограничения закрытия крана TAP_ANGLE = tap_angle_min
                 ; 0002 0273     if (UL_T < TA_IN_NOLIMIT)  tap_angle_min = ((long int)((TA_IN_NOLIMIT - UL_T) * mode.k_angle_limit))/1000;
00142e 940e 29c8 	CALL SUBOPT_0x1D
001430 940e 29cf 	CALL SUBOPT_0x1E
001432 f424      	BRGE _0x400E1
001433 940e 29c8 	CALL SUBOPT_0x1D
001435 940e 29d7 	CALL SUBOPT_0x1F
                 ; 0002 0274     //printf("Пересчет ограничения: %d, Ул. т :%d, Коэффициент :%d \r\n",  (TA_IN_NOLIMIT - UL_T), UL_T, mode.k_angle_limit);
                 ; 0002 0275     if (TAP_ANGLE < tap_angle_min)
                 _0x400E1:
001437 940e 29ef 	CALL SUBOPT_0x20
001439 f41c      	BRGE _0x400E2
                 ; 0002 0276         TAP_ANGLE = tap_angle_min;
00143a 940e 2ad8 	CALL SUBOPT_0x45
                 ; 0002 0277     else
00143c c005      	RJMP _0x400E3
                 _0x400E2:
                 ; 0002 0278         if (TAP_ANGLE > PWM_MAX)
00143d 940e 2adc 	CALL SUBOPT_0x46
00143f f014      	BRLT _0x400E4
                 ; 0002 0279             TAP_ANGLE = PWM_MAX;
001440 940e 2a44 	CALL SUBOPT_0x2E
                 ; 0002 027A     // TAP_ANGLE - Состояние выхода на PWM
                 ; 0002 027B }
                 _0x400E4:
                 _0x400E3:
001442 9508      	RET
                 ;// Функция пропорционального регулирования
                 ;void update_P(int error) {
                 ; 0002 027D void update_P(int error) {
                 _update_P:
                 ; 0002 027E     // TAP_ANGLE = TAP_ANGLE + error/100;          // TAP_ANGLE - Состояние выхода на PWM
                 ; 0002 027F     if ((TAP_ANGLE >=0) && (TAP_ANGLE <= PWM_MAX))
                 ;	error -> Y+0
                +
001443 91a0 0276+LDS R26 , _parameters + 31
                 	__GETB2MN _parameters,31
001445 23aa      	TST  R26
001446 f01a      	BRMI _0x400E6
001447 940e 2adc 	CALL SUBOPT_0x46
001449 f00c      	BRLT _0x400E7
                 _0x400E6:
00144a c013      	RJMP _0x400E5
                 _0x400E7:
                 ; 0002 0280         TAP_ANGLE = TAP_ANGLE + (error / 100) * prim_par.Ku;
                +
00144b 9160 0275+LDS R22 , _parameters + 30
00144d 9170 0276+LDS R23 , _parameters + 30 + 1
                 	__GETWRMN 22,23,_parameters,30
00144f 81a8      	LD   R26,Y
001450 81b9      	LDD  R27,Y+1
001451 940e 2abb 	CALL SUBOPT_0x41
001453 01df      	MOVW R26,R30
001454 940e 2b31 	CALL SUBOPT_0x54
001456 940e 2f86 	CALL __MULW12
001458 0fe6      	ADD  R30,R22
001459 1ff7      	ADC  R31,R23
                +
00145a 93e0 0275+STS _parameters + 30 , R30
00145c 93f0 0276+STS _parameters + 30 + 1 , R31
                 	__PUTW1MN _parameters,30
                 ; 0002 0281     check_range();
                 _0x400E5:
00145e dfcf      	RCALL _check_range
                 ; 0002 0282     printf("Разность температур: %d, TAP_ANGLE :%d, time_integration :%d \r\n",  error, ((TAP_ANGLE*100)/0xFF),time_integration);
                +
00145f efe9     +LDI R30 , LOW ( 2 * _0x40000 + 1303 )
001460 e0f9     +LDI R31 , HIGH ( 2 * _0x40000 + 1303 )
                 	__POINTW1FN _0x40000,1303
001461 93fa      	ST   -Y,R31
001462 93ea      	ST   -Y,R30
001463 81ea      	LDD  R30,Y+2
001464 81fb      	LDD  R31,Y+2+1
001465 940e 2a08 	CALL SUBOPT_0x23
001467 940e 2a03 	CALL SUBOPT_0x22
001469 e6a4      	LDI  R26,LOW(100)
00146a e0b0      	LDI  R27,HIGH(100)
00146b 940e 2b36 	CALL SUBOPT_0x55
00146d 940e 2a1b 	CALL SUBOPT_0x27
00146f 940e 2989 	CALL SUBOPT_0x12
                 ; 0002 0283 }
001471 9622      	ADIW R28,2
001472 9508      	RET
                 ;void update_PID(int error, int iMin, int iMax) {
                 ; 0002 0284 void update_PID(int error, int iMin, int iMax) {
                 _update_PID:
                 ; 0002 0285     static int dState = 0, iState = 0;
                 ; 0002 0286     int pTerm, dTerm, iTerm;
                 ; 0002 0287     int result;
                 ; 0002 0288 
                 ; 0002 0289     pTerm = (prim_par.Ku * error) / 10;    // calculate the proportional term
001473 9722      	SBIW R28,2
001474 940e 3142 	CALL __SAVELOCR6
                 ;	error -> Y+12
                 ;	iMin -> Y+10
                 ;	iMax -> Y+8
                 ;	pTerm -> R16,R17
                 ;	dTerm -> R18,R19
                 ;	iTerm -> R20,R21
                 ;	result -> Y+6
001476 940e 2b31 	CALL SUBOPT_0x54
001478 85ac      	LDD  R26,Y+12
001479 85bd      	LDD  R27,Y+12+1
00147a 940e 2f86 	CALL __MULW12
00147c 01df      	MOVW R26,R30
00147d e0ea      	LDI  R30,LOW(10)
00147e e0f0      	LDI  R31,HIGH(10)
00147f 940e 2fa3 	CALL __DIVW21
001481 018f      	MOVW R16,R30
                 ; 0002 028A     iState += error;                // calculate the integral state with appropriate limiting
001482 85ec      	LDD  R30,Y+12
001483 85fd      	LDD  R31,Y+12+1
001484 940e 2b3e 	CALL SUBOPT_0x56
001486 0fea      	ADD  R30,R26
001487 1ffb      	ADC  R31,R27
001488 93e0 02e1 	STS  _iState_S0020006,R30
00148a 93f0 02e2 	STS  _iState_S0020006+1,R31
                 ; 0002 028B     // Проверяем на принадлежность диапазону
                 ; 0002 028C     if (FAN_SPEED >= prim_par.fan_speed) {
00148c 940e 2b29 	CALL SUBOPT_0x53
00148e 17ae      	CP   R26,R30
00148f 07bf      	CPC  R27,R31
001490 f414      	BRGE PC+3
001491 940c 14e1 	JMP _0x400E8
                 ; 0002 028D         if ((iState > iMax) || (iState < iMin)) {
001493 940e 2b43 	CALL SUBOPT_0x57
001495 f03c      	BRLT _0x400EA
001496 85ea      	LDD  R30,Y+10
001497 85fb      	LDD  R31,Y+10+1
001498 940e 2b3e 	CALL SUBOPT_0x56
00149a 17ae      	CP   R26,R30
00149b 07bf      	CPC  R27,R31
00149c f464      	BRGE _0x400E9
                 _0x400EA:
                 ; 0002 028E             if (iState > iMax)
00149d 940e 2b43 	CALL SUBOPT_0x57
00149f f41c      	BRGE _0x400EC
                 ; 0002 028F                 iState = iMax;
0014a0 85e8      	LDD  R30,Y+8
0014a1 85f9      	LDD  R31,Y+8+1
0014a2 c002      	RJMP _0x40164
                 ; 0002 0290             else
                 _0x400EC:
                 ; 0002 0291                 iState = iMin;
0014a3 85ea      	LDD  R30,Y+10
0014a4 85fb      	LDD  R31,Y+10+1
                 _0x40164:
0014a5 93e0 02e1 	STS  _iState_S0020006,R30
0014a7 93f0 02e2 	STS  _iState_S0020006+1,R31
                 ; 0002 0292         }
                 ; 0002 0293         iTerm = (prim_par.Ki * iState) / 100;    // calculate the integral term
                 _0x400E9:
                +
0014a9 91e0 0172+LDS R30 , _prim_par + 18
0014ab 91f0 0173+LDS R31 , _prim_par + 18 + 1
                 	__GETW1MN _prim_par,18
0014ad 940e 2b3e 	CALL SUBOPT_0x56
0014af 940e 2f86 	CALL __MULW12
0014b1 01df      	MOVW R26,R30
0014b2 940e 2abb 	CALL SUBOPT_0x41
0014b4 01af      	MOVW R20,R30
                 ; 0002 0294         dTerm = prim_par.Kd * (POM_T - dState);
                +
0014b5 9000 0174+LDS R0 , _prim_par + 20
0014b7 9010 0175+LDS R1 , _prim_par + 20 + 1
                 	__GETWRMN 0,1,_prim_par,20
0014b9 940e 2aff 	CALL SUBOPT_0x4C
0014bb 91a0 02df 	LDS  R26,_dState_S0020006
0014bd 91b0 02e0 	LDS  R27,_dState_S0020006+1
0014bf 1bea      	SUB  R30,R26
0014c0 0bfb      	SBC  R31,R27
0014c1 01d0      	MOVW R26,R0
0014c2 940e 2f86 	CALL __MULW12
0014c4 019f      	MOVW R18,R30
                 ; 0002 0295         dState = POM_T;
0014c5 940e 2aff 	CALL SUBOPT_0x4C
0014c7 93e0 02df 	STS  _dState_S0020006,R30
0014c9 93f0 02e0 	STS  _dState_S0020006+1,R31
                 ; 0002 0296         result = pTerm + iTerm - dTerm;
0014cb 01fa      	MOVW R30,R20
0014cc 0fe0      	ADD  R30,R16
0014cd 1ff1      	ADC  R31,R17
0014ce 1be2      	SUB  R30,R18
0014cf 0bf3      	SBC  R31,R19
0014d0 83ee      	STD  Y+6,R30
0014d1 83ff      	STD  Y+6+1,R31
                 ; 0002 0297         TAP_ANGLE += result / 100;
0014d2 81ae      	LDD  R26,Y+6
0014d3 81bf      	LDD  R27,Y+6+1
0014d4 940e 2abb 	CALL SUBOPT_0x41
                +
0014d6 91a0 0275+LDS R26 , _parameters + 30
0014d8 91b0 0276+LDS R27 , _parameters + 30 + 1
                 	__GETW2MN _parameters,30
0014da 0fea      	ADD  R30,R26
0014db 1ffb      	ADC  R31,R27
                +
0014dc 93e0 0275+STS _parameters + 30 , R30
0014de 93f0 0276+STS _parameters + 30 + 1 , R31
                 	__PUTW1MN _parameters,30
                 ; 0002 0298         check_range();
0014e0 df4d      	RCALL _check_range
                 ; 0002 0299     }
                 ; 0002 029A     if (!mode.print)
                 _0x400E8:
                +
0014e1 91e0 01ca+LDS R30 , _mode + 18
                 	__GETB1MN _mode,18
0014e3 30e0      	CPI  R30,0
0014e4 f5a9      	BRNE _0x400EE
                 ; 0002 029B     // Температура заданная, Температура измеренная, Delta, Угол крана расчетный, Угол кранаизмеренный, Угол ограничения, result, pTerm, iTerm, dTerm, Обороты расчетные,Обороты измеренныее\r\n"
                 ; 0002 029C         printf("%02u:%02u:%02u, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
                 ; 0002 029D             s_dt.cHH, s_dt.cMM, s_dt.cSS,
                 ; 0002 029E             SET_T, POM_T, error,
                 ; 0002 029F             TAP_ANGLE, ADC_VAR1, tap_angle_min, result,
                 ; 0002 02A0             pTerm, iTerm, dTerm,
                 ; 0002 02A1             FAN_SPEED, ADC_VAR2);
                +
0014e5 e3e9     +LDI R30 , LOW ( 2 * _0x40000 + 1367 )
0014e6 e0fa     +LDI R31 , HIGH ( 2 * _0x40000 + 1367 )
                 	__POINTW1FN _0x40000,1367
0014e7 940e 2b49 	CALL SUBOPT_0x58
0014e9 940e 2b4e 	CALL SUBOPT_0x59
0014eb 940e 2b51 	CALL SUBOPT_0x5A
0014ed 940e 2b04 	CALL SUBOPT_0x4D
0014ef 940e 2a08 	CALL SUBOPT_0x23
0014f1 940e 2aff 	CALL SUBOPT_0x4C
0014f3 940e 2a08 	CALL SUBOPT_0x23
0014f5 a1ea      	LDD  R30,Y+34
0014f6 a1fb      	LDD  R31,Y+34+1
0014f7 940e 2a08 	CALL SUBOPT_0x23
0014f9 940e 2a03 	CALL SUBOPT_0x22
0014fb 940e 2a08 	CALL SUBOPT_0x23
0014fd 940e 2af0 	CALL SUBOPT_0x49
0014ff 2de6      	MOV  R30,R6
001500 940e 2a21 	CALL SUBOPT_0x28
001502 a5ec      	LDD  R30,Y+44
001503 a5fd      	LDD  R31,Y+44+1
001504 940e 2a08 	CALL SUBOPT_0x23
001506 01f8      	MOVW R30,R16
001507 940e 2a08 	CALL SUBOPT_0x23
001509 01fa      	MOVW R30,R20
00150a 940e 2a08 	CALL SUBOPT_0x23
00150c 01f9      	MOVW R30,R18
00150d 940e 2a08 	CALL SUBOPT_0x23
00150f 940e 2b12 	CALL SUBOPT_0x4F
001511 940e 2a08 	CALL SUBOPT_0x23
001513 940e 2b1f 	CALL SUBOPT_0x51
001515 e38c      	LDI  R24,60
001516 940e 28c5 	CALL _printf
001518 96ee      	ADIW R28,62
                 ; 0002 02A2     else
001519 c021      	RJMP _0x400EF
                 _0x400EE:
                 ; 0002 02A3         printf("Delta (x100) = %d, result = %d, TAP_ANGLE = %d, pTerm = %d, iTerm = %d, dTerm = %d\r\n",
                 ; 0002 02A4             error, result, TAP_ANGLE, pTerm, iTerm, dTerm, POM_T);
                +
00151a e7ea     +LDI R30 , LOW ( 2 * _0x40000 + 1432 )
00151b e0fa     +LDI R31 , HIGH ( 2 * _0x40000 + 1432 )
                 	__POINTW1FN _0x40000,1432
00151c 93fa      	ST   -Y,R31
00151d 93ea      	ST   -Y,R30
00151e 85ee      	LDD  R30,Y+14
00151f 85ff      	LDD  R31,Y+14+1
001520 940e 2a08 	CALL SUBOPT_0x23
001522 85ec      	LDD  R30,Y+12
001523 85fd      	LDD  R31,Y+12+1
001524 940e 2a08 	CALL SUBOPT_0x23
001526 940e 2a03 	CALL SUBOPT_0x22
001528 940e 2a08 	CALL SUBOPT_0x23
00152a 01f8      	MOVW R30,R16
00152b 940e 2a08 	CALL SUBOPT_0x23
00152d 01fa      	MOVW R30,R20
00152e 940e 2a08 	CALL SUBOPT_0x23
001530 01f9      	MOVW R30,R18
001531 940e 2a08 	CALL SUBOPT_0x23
001533 940e 2aff 	CALL SUBOPT_0x4C
001535 940e 2a08 	CALL SUBOPT_0x23
001537 e18c      	LDI  R24,28
001538 940e 28c5 	CALL _printf
00153a 966e      	ADIW R28,30
                 ; 0002 02A5 }
                 _0x400EF:
00153b 940e 3149 	CALL __LOADLOCR6
00153d 962e      	ADIW R28,14
00153e 9508      	RET
                 ;// Печать всех термометров
                 ;void printallterms(void) {
                 ; 0002 02A7 void printallterms(void) {
                 _printallterms:
                 ; 0002 02A8     int term;
                 ; 0002 02A9     register byte i;
                 ; 0002 02AA     unsigned char resolution;
                 ; 0002 02AB     signed char th, tl;
                 ; 0002 02AC     unsigned char *spd;
                 ; 0002 02AD 
                 ; 0002 02AE     if(!ds1820_devices) return;			// если термометры не обнаружены - просто выходим из функции
00153f 9722      	SBIW R28,2
001540 940e 3142 	CALL __SAVELOCR6
                 ;	term -> R16,R17
                 ;	i -> R18
                 ;	resolution -> R19
                 ;	th -> R20
                 ;	tl -> R21
                 ;	*spd -> Y+6
                +
001542 91e0 0193+LDS R30 , _prim_par + 51
                 	__GETB1MN _prim_par,51
001544 30e0      	CPI  R30,0
001545 f409      	BRNE _0x400F0
001546 c1b3      	RJMP _0x20E0018
                 ; 0002 02AF     spd = ds1820_show_spd();
                 _0x400F0:
001547 d464      	RCALL _ds1820_show_spd
001548 83ee      	STD  Y+6,R30
001549 83ff      	STD  Y+6+1,R31
                 ; 0002 02B0     // printf("\t");						// печатаем знак табуляции в терминале
                 ; 0002 02B1     for(i=0; i<ds1820_devices; i++) {
00154a e020      	LDI  R18,LOW(0)
                 _0x400F2:
                +
00154b 91e0 0193+LDS R30 , _prim_par + 51
                 	__GETB1MN _prim_par,51
00154d 172e      	CP   R18,R30
00154e f010      	BRLO PC+3
00154f 940c 159f 	JMP _0x400F3
                 ; 0002 02B2         ds1820_get_resolution(&ds1820_rom_codes[i][0], &resolution);
001551 940e 2b54 	CALL SUBOPT_0x5B
001553 b7ed      	IN   R30,SPL
001554 b7fe      	IN   R31,SPH
001555 93fa      	ST   -Y,R31
001556 93ea      	ST   -Y,R30
001557 933f      	PUSH R19
001558 d594      	RCALL _ds1820_get_resolution
001559 913f      	POP  R19
                 ; 0002 02B3     	term = ds1820_temperature(&ds1820_rom_codes[i][0]);
00155a 940e 2b54 	CALL SUBOPT_0x5B
00155c d4d2      	RCALL _ds1820_temperature
00155d 018f      	MOVW R16,R30
                 ; 0002 02B4         tl = th = 0;
00155e e0e0      	LDI  R30,LOW(0)
00155f 2f4e      	MOV  R20,R30
001560 2f5e      	MOV  R21,R30
                 ; 0002 02B5         ds1820_get_alarm(&ds1820_rom_codes[i][0], &tl, &th);
001561 940e 2b54 	CALL SUBOPT_0x5B
001563 b7ed      	IN   R30,SPL
001564 b7fe      	IN   R31,SPH
001565 93fa      	ST   -Y,R31
001566 93ea      	ST   -Y,R30
001567 935f      	PUSH R21
001568 b7ed      	IN   R30,SPL
001569 b7fe      	IN   R31,SPH
00156a 93fa      	ST   -Y,R31
00156b 93ea      	ST   -Y,R30
00156c 934f      	PUSH R20
00156d d53e      	RCALL _ds1820_get_alarm
00156e 914f      	POP  R20
00156f 915f      	POP  R21
                 ; 0002 02B6         printf(" t%-u = %i(%-i.%-u)C[%02X%02X:%02x]%d:%d; ", i+1, term, term/100, abs(term%100), spd[1], spd[0], resolution, tl, th);
                +
001570 ecef     +LDI R30 , LOW ( 2 * _0x40000 + 1517 )
001571 e0fa     +LDI R31 , HIGH ( 2 * _0x40000 + 1517 )
                 	__POINTW1FN _0x40000,1517
001572 93fa      	ST   -Y,R31
001573 93ea      	ST   -Y,R30
001574 2fe2      	MOV  R30,R18
001575 5fef      	SUBI R30,-LOW(1)
001576 940e 2a21 	CALL SUBOPT_0x28
001578 01f8      	MOVW R30,R16
001579 940e 2a08 	CALL SUBOPT_0x23
00157b 01d8      	MOVW R26,R16
00157c 940e 2abb 	CALL SUBOPT_0x41
00157e 940e 2a08 	CALL SUBOPT_0x23
001580 01d8      	MOVW R26,R16
001581 940e 2b5c 	CALL SUBOPT_0x5C
001583 940e 2b61 	CALL SUBOPT_0x5D
001585 8da8      	LDD  R26,Y+24
001586 8db9      	LDD  R27,Y+24+1
001587 9611      	ADIW R26,1
001588 91ec      	LD   R30,X
001589 940e 2a21 	CALL SUBOPT_0x28
00158b 8dac      	LDD  R26,Y+28
00158c 8dbd      	LDD  R27,Y+28+1
00158d 91ec      	LD   R30,X
00158e 940e 2a21 	CALL SUBOPT_0x28
001590 2fe3      	MOV  R30,R19
001591 940e 2a21 	CALL SUBOPT_0x28
001593 2fe5      	MOV  R30,R21
001594 940e 2b66 	CALL SUBOPT_0x5E
001596 2fe4      	MOV  R30,R20
001597 940e 2b66 	CALL SUBOPT_0x5E
001599 e284      	LDI  R24,36
00159a 940e 28c5 	CALL _printf
00159c 96a6      	ADIW R28,38
                 ; 0002 02B7     }
00159d 5f2f      	SUBI R18,-1
00159e cfac      	RJMP _0x400F2
                 _0x400F3:
                 ; 0002 02B8     printf("\r\n");
00159f 940e 2b6b 	CALL SUBOPT_0x5F
                 ; 0002 02B9 }
0015a1 c158      	RJMP _0x20E0018
                 ;// Чтение температуры (аргумент - номер термометра начиная с 0)
                 ;int read_term(byte num) {
                 ; 0002 02BB int read_term(byte num) {
                 _read_term:
                 ; 0002 02BC     // float lt;
                 ; 0002 02BD     // lt = termometers[num].scale / 127;
                 ; 0002 02BE     // lt = (float)prim_par.elims[num].scale / 128 + 1;
                 ; 0002 02BF     // lt = (termometers[num].t * lt) + prim_par.elims[num].shift;
                 ; 0002 02C0     return termometers[num].t;
                 ;	num -> Y+0
0015a2 81e8      	LD   R30,Y
0015a3 940e 2b6e 	CALL SUBOPT_0x60
0015a5 01df      	MOVW R26,R30
0015a6 940e 3004 	CALL __GETW1P
0015a8 9621      	ADIW R28,1
0015a9 9508      	RET
                 ; 0002 02C1 };
                 ;// Полностью прорисовать главный экран
                 ;void lcd_primary_screen(void) {
                 ; 0002 02C3 void lcd_primary_screen(void) {
                 _lcd_primary_screen:
                 ; 0002 02C4     char run_mod [8];
                 ; 0002 02C5     register unsigned char i;
                 ; 0002 02C6     unsigned char c_alerts = 0;
                 ; 0002 02C7     unsigned char sign = '+';
                 ; 0002 02C8     int lcd_term = main_menu[0].val_data;
                 ; 0002 02C9     #ifndef NODEBUG
                 ; 0002 02CA     // printf ("%02u:%02u Начало прорисовки экрана...", s_dt.cMM, s_dt.cSS);
                 ; 0002 02CB     #endif
                 ; 0002 02CC     for (i = 0; i < MAX_ALERTS; i++) {
0015aa 9728      	SBIW R28,8
0015ab 940e 3143 	CALL __SAVELOCR5
                 ;	run_mod -> Y+5
                 ;	i -> R16
                 ;	c_alerts -> R17
                 ;	sign -> R18
                 ;	lcd_term -> R19,R20
0015ad e010      	LDI  R17,0
0015ae e22b      	LDI  R18,43
                +
0015af 9130 0234+LDS R19 , 0 + _main_menu
0015b1 9140 0235+LDS R20 , 0 + _main_menu + 1
                 	__GETWRMN 19,20,0,_main_menu
0015b3 e000      	LDI  R16,LOW(0)
                 _0x400F5:
0015b4 300c      	CPI  R16,12
0015b5 f448      	BRSH _0x400F6
                 ; 0002 02CD         // 9-й алерт (отсутствие 3-го термометра) нам не интересен
                 ; 0002 02CE         if (prim_par.alert_status[i] && i != 9) c_alerts++;
0015b6 940e 2b74 	CALL SUBOPT_0x61
0015b8 f011      	BREQ _0x400F8
0015b9 3009      	CPI  R16,9
0015ba f409      	BRNE _0x400F9
                 _0x400F8:
0015bb c001      	RJMP _0x400F7
                 _0x400F9:
0015bc 5f1f      	SUBI R17,-1
                 ; 0002 02CF     }
                 _0x400F7:
0015bd 5f0f      	SUBI R16,-1
0015be cff5      	RJMP _0x400F5
                 _0x400F6:
                 ; 0002 02D0     switch (mode.run) {
                +
0015bf 91e0 01b9+LDS R30 , _mode + 1
                 	__GETB1MN _mode,1
                 ; 0002 02D1         case 0: sprintf(run_mod, "СТОП   "); break; //mode.run=0 ;
0015c1 30e0      	CPI  R30,0
0015c2 f439      	BRNE _0x400FD
0015c3 940e 2b7c 	CALL SUBOPT_0x62
                +
0015c5 efea     +LDI R30 , LOW ( 2 * _0x40000 + 1560 )
0015c6 e0fa     +LDI R31 , HIGH ( 2 * _0x40000 + 1560 )
                 	__POINTW1FN _0x40000,1560
0015c7 940e 2b81 	CALL SUBOPT_0x63
0015c9 c01a      	RJMP _0x400FC
                 ; 0002 02D2         case 1: sprintf(run_mod, "ПРОГРЕВ"); break; //mode.run=1;
                 _0x400FD:
0015ca 30e1      	CPI  R30,LOW(0x1)
0015cb f439      	BRNE _0x400FE
0015cc 940e 2b7c 	CALL SUBOPT_0x62
                +
0015ce e0e2     +LDI R30 , LOW ( 2 * _0x40000 + 1568 )
0015cf e0fb     +LDI R31 , HIGH ( 2 * _0x40000 + 1568 )
                 	__POINTW1FN _0x40000,1568
0015d0 940e 2b81 	CALL SUBOPT_0x63
0015d2 c011      	RJMP _0x400FC
                 ; 0002 02D3         case 2: sprintf(run_mod, "ОСТАНОВ"); break; //mode.run=2 ;
                 _0x400FE:
0015d3 30e2      	CPI  R30,LOW(0x2)
0015d4 f439      	BRNE _0x400FF
0015d5 940e 2b7c 	CALL SUBOPT_0x62
                +
0015d7 e0ea     +LDI R30 , LOW ( 2 * _0x40000 + 1576 )
0015d8 e0fb     +LDI R31 , HIGH ( 2 * _0x40000 + 1576 )
                 	__POINTW1FN _0x40000,1576
0015d9 940e 2b81 	CALL SUBOPT_0x63
0015db c008      	RJMP _0x400FC
                 ; 0002 02D4         case 3: sprintf(run_mod, "ПУСК   "); break; //mode.run=3
                 _0x400FF:
0015dc 30e3      	CPI  R30,LOW(0x3)
0015dd f431      	BRNE _0x40101
0015de 940e 2b7c 	CALL SUBOPT_0x62
                +
0015e0 e1e2     +LDI R30 , LOW ( 2 * _0x40000 + 1584 )
0015e1 e0fb     +LDI R31 , HIGH ( 2 * _0x40000 + 1584 )
                 	__POINTW1FN _0x40000,1584
0015e2 940e 2b81 	CALL SUBOPT_0x63
                 ; 0002 02D5         default: break;
                 _0x40101:
                 ; 0002 02D6     };
                 _0x400FC:
                 ; 0002 02D7     if (c_alerts)
0015e4 3010      	CPI  R17,0
0015e5 f039      	BREQ _0x40102
                 ; 0002 02D8         sprintf(run_mod, "Авария ");
0015e6 940e 2b7c 	CALL SUBOPT_0x62
                +
0015e8 e1ea     +LDI R30 , LOW ( 2 * _0x40000 + 1592 )
0015e9 e0fb     +LDI R31 , HIGH ( 2 * _0x40000 + 1592 )
                 	__POINTW1FN _0x40000,1592
0015ea 940e 2b81 	CALL SUBOPT_0x63
                 ; 0002 02D9     else {
0015ec c002      	RJMP _0x40103
                 _0x40102:
                 ; 0002 02DA         signal_red(OFF);  signal_buz(OFF); // signal_green(OFF);
0015ed 940e 2971 	CALL SUBOPT_0xE
                 ; 0002 02DB     }
                 _0x40103:
                 ; 0002 02DC     lcd_command(LCD_DISP_ON);       // Убираем курсор с LCD
0015ef e0ec      	LDI  R30,LOW(12)
0015f0 93ea      	ST   -Y,R30
0015f1 940e 0cbf 	CALL _lcd_command
                 ; 0002 02DD     lcd_gotoxy(0,0);        // Устанавливаем курсор в позицию 0 первой строки
0015f3 940e 2b88 	CALL SUBOPT_0x64
                 ; 0002 02DE     sprintf(linestr, "%02u:%02u:%02u %02u.%02u  ", s_dt.cHH, s_dt.cMM, s_dt.cSS, s_dt.cdd, s_dt.cmo);
0015f5 940e 2b8d 	CALL SUBOPT_0x65
                +
0015f7 e2e2     +LDI R30 , LOW ( 2 * _0x40000 + 1600 )
0015f8 e0fb     +LDI R31 , HIGH ( 2 * _0x40000 + 1600 )
                 	__POINTW1FN _0x40000,1600
0015f9 940e 2b49 	CALL SUBOPT_0x58
0015fb 940e 2b4e 	CALL SUBOPT_0x59
0015fd 940e 2b51 	CALL SUBOPT_0x5A
0015ff 940e 2b92 	CALL SUBOPT_0x66
001601 940e 2b95 	CALL SUBOPT_0x67
001603 e184      	LDI  R24,20
001604 940e 28b1 	CALL _sprintf
001606 9668      	ADIW R28,24
                 ; 0002 02DF     lcd_puts(linestr);
001607 940e 2b8d 	CALL SUBOPT_0x65
001609 940e 0d08 	CALL _lcd_puts
                 ; 0002 02E0     lcd_gotoxy(0,1);                // Устанавливаем курсор в позицию 0 строки 2
00160b 940e 294a 	CALL SUBOPT_0x7
00160d 940e 0cc6 	CALL _lcd_gotoxy
                 ; 0002 02E1     // Выводим информацию о термометрах
                 ; 0002 02E2     if(ds1820_devices) {
                +
00160f 91e0 0193+LDS R30 , _prim_par + 51
                 	__GETB1MN _prim_par,51
001611 30e0      	CPI  R30,0
001612 f119      	BREQ _0x40104
                 ; 0002 02E3         sign = (lcd_term < 0) ? '-' : '+';
001613 2344      	TST  R20
001614 f412      	BRPL _0x40105
001615 e2ed      	LDI  R30,LOW(45)
001616 c001      	RJMP _0x40106
                 _0x40105:
001617 e2eb      	LDI  R30,LOW(43)
                 _0x40106:
001618 2f2e      	MOV  R18,R30
                 ; 0002 02E4         sprintf(linestr, "t=%c%02u.%01uC %s", sign, abs(lcd_term)/100, (abs(lcd_term)%100)/10, run_mod);
001619 940e 2b8d 	CALL SUBOPT_0x65
                +
00161b e3ed     +LDI R30 , LOW ( 2 * _0x40000 + 1627 )
00161c e0fb     +LDI R31 , HIGH ( 2 * _0x40000 + 1627 )
                 	__POINTW1FN _0x40000,1627
00161d 93fa      	ST   -Y,R31
00161e 93ea      	ST   -Y,R30
00161f 2fe2      	MOV  R30,R18
001620 940e 2a21 	CALL SUBOPT_0x28
001622 940e 2b98 	CALL SUBOPT_0x68
001624 940e 2ba0 	CALL SUBOPT_0x69
001626 940e 2b98 	CALL SUBOPT_0x68
001628 940e 2fd2 	CALL __MODW21U
00162a 01df      	MOVW R26,R30
00162b e0ea      	LDI  R30,LOW(10)
00162c e0f0      	LDI  R31,HIGH(10)
00162d 940e 2ba0 	CALL SUBOPT_0x69
00162f 01fe      	MOVW R30,R28
001630 9675      	ADIW R30,21
001631 940e 2b61 	CALL SUBOPT_0x5D
001633 940e 2ba3 	CALL SUBOPT_0x6A
                 ; 0002 02E5         // linestr += "panarin";
                 ; 0002 02E6     } else {
001635 c006      	RJMP _0x40108
                 _0x40104:
                 ; 0002 02E7         sprintf(linestr, "Нет термометров");
001636 940e 2b8d 	CALL SUBOPT_0x65
                +
001638 e4ef     +LDI R30 , LOW ( 2 * _0x40000 + 1645 )
001639 e0fb     +LDI R31 , HIGH ( 2 * _0x40000 + 1645 )
                 	__POINTW1FN _0x40000,1645
00163a 940e 2b81 	CALL SUBOPT_0x63
                 ; 0002 02E8     }
                 _0x40108:
                 ; 0002 02E9     lcd_puts(linestr);
00163c 940e 2b8d 	CALL SUBOPT_0x65
00163e 940e 0d08 	CALL _lcd_puts
                 ; 0002 02EA     #ifndef NODEBUG
                 ; 0002 02EB     // printf ("конец в %02u:%02u\r\n", s_dt.cMM, s_dt.cSS);
                 ; 0002 02EC     #endif
                 ; 0002 02ED }
001640 940e 314a 	CALL __LOADLOCR5
001642 962d      	ADIW R28,13
001643 9508      	RET
                 ;// Печать структуры prim_par
                 ;void print_prim_par(unsigned char *struct_data, unsigned char size) {
                 ; 0002 02EF void print_prim_par(unsigned char *struct_data, unsigned char size) {
                 _print_prim_par:
                 ; 0002 02F0     register unsigned char i;
                 ; 0002 02F1     unsigned char s_byte;
                 ; 0002 02F2     printf("Состояние prim_par [%d bytes]: ", size);
001644 931a      	ST   -Y,R17
001645 930a      	ST   -Y,R16
                 ;	*struct_data -> Y+3
                 ;	size -> Y+2
                 ;	i -> R16
                 ;	s_byte -> R17
                +
001646 e5ef     +LDI R30 , LOW ( 2 * _0x40000 + 1661 )
001647 e0fb     +LDI R31 , HIGH ( 2 * _0x40000 + 1661 )
                 	__POINTW1FN _0x40000,1661
001648 940e 2ba8 	CALL SUBOPT_0x6B
00164a 940e 295f 	CALL SUBOPT_0xA
                 ; 0002 02F3     for (i=0; i<size; i++) {
00164c e000      	LDI  R16,LOW(0)
                 _0x4010A:
00164d 81ea      	LDD  R30,Y+2
00164e 170e      	CP   R16,R30
00164f f4b0      	BRSH _0x4010B
                 ; 0002 02F4         s_byte = *struct_data++;
001650 81ab      	LDD  R26,Y+3
001651 81bc      	LDD  R27,Y+3+1
001652 911d      	LD   R17,X+
001653 83ab      	STD  Y+3,R26
001654 83bc      	STD  Y+3+1,R27
                 ; 0002 02F5         if (i < (size - 36))
001655 52e4      	SUBI R30,LOW(36)
001656 170e      	CP   R16,R30
001657 f418      	BRSH _0x4010C
                 ; 0002 02F6             printf(" %d", s_byte);
                +
001658 e7ef     +LDI R30 , LOW ( 2 * _0x40000 + 1693 )
001659 e0fb     +LDI R31 , HIGH ( 2 * _0x40000 + 1693 )
                 	__POINTW1FN _0x40000,1693
00165a c002      	RJMP _0x40165
                 ; 0002 02F7         else
                 _0x4010C:
                 ; 0002 02F8             printf(" %X", s_byte);
                +
00165b e8e3     +LDI R30 , LOW ( 2 * _0x40000 + 1697 )
00165c e0fb     +LDI R31 , HIGH ( 2 * _0x40000 + 1697 )
                 	__POINTW1FN _0x40000,1697
                 _0x40165:
00165d 93fa      	ST   -Y,R31
00165e 93ea      	ST   -Y,R30
00165f 2fe1      	MOV  R30,R17
001660 940e 2a21 	CALL SUBOPT_0x28
001662 940e 295f 	CALL SUBOPT_0xA
                 ; 0002 02F9         //
                 ; 0002 02FA     }
001664 5f0f      	SUBI R16,-1
001665 cfe7      	RJMP _0x4010A
                 _0x4010B:
                 ; 0002 02FB     printf("\r\n");
001666 940e 2b6b 	CALL SUBOPT_0x5F
                 ; 0002 02FC }
001668 8119      	LDD  R17,Y+1
001669 8108      	LDD  R16,Y+0
00166a c3b2      	RJMP _0x20E0014
                 ;// Функция инициализирующая новые термометры. !!! Надо здесь разбираться.
                 ;void init_new_terms(unsigned char number) {
                 ; 0002 02FE void init_new_terms(unsigned char number) {
                 _init_new_terms:
                 ; 0002 02FF     register unsigned char i;
                 ; 0002 0300     unsigned char is_found = 0, is_new = 0;
                 ; 0002 0301     signed char th, tl, index;
                 ; 0002 0302     unsigned char newterms;
                 ; 0002 0303     // Ищем по новой все термометры
                 ; 0002 0304     newterms = w1_search(0xf0, ds1820_rom_codes);
00166b 9721      	SBIW R28,1
00166c 940e 3142 	CALL __SAVELOCR6
                 ;	number -> Y+7
                 ;	i -> R16
                 ;	is_found -> R17
                 ;	is_new -> R18
                 ;	th -> R19
                 ;	tl -> R20
                 ;	index -> R21
                 ;	newterms -> Y+6
00166e e010      	LDI  R17,0
00166f e020      	LDI  R18,0
001670 940e 294f 	CALL SUBOPT_0x8
001672 83ee      	STD  Y+6,R30
                 ; 0002 0305     delay_ms (DS1820_ALL_DELAY);
001673 940e 2944 	CALL SUBOPT_0x6
                 ; 0002 0306     printallterms();
001675 dec9      	RCALL _printallterms
                 ; 0002 0307     // Вычитываем TH, TL. Иными словами вычисляем индекс.
                 ; 0002 0308     for(i = 0; i < newterms; i++) {
001676 e000      	LDI  R16,LOW(0)
                 _0x4010F:
001677 81ee      	LDD  R30,Y+6
001678 170e      	CP   R16,R30
001679 f588      	BRSH _0x40110
                 ; 0002 0309         ds1820_get_alarm(&ds1820_rom_codes[i][0], &tl, &th);
00167a 940e 2bac 	CALL SUBOPT_0x6C
00167c b7ed      	IN   R30,SPL
00167d b7fe      	IN   R31,SPH
00167e 93fa      	ST   -Y,R31
00167f 93ea      	ST   -Y,R30
001680 934f      	PUSH R20
001681 b7ed      	IN   R30,SPL
001682 b7fe      	IN   R31,SPH
001683 93fa      	ST   -Y,R31
001684 93ea      	ST   -Y,R30
001685 933f      	PUSH R19
001686 d425      	RCALL _ds1820_get_alarm
001687 913f      	POP  R19
001688 914f      	POP  R20
                 ; 0002 030A         index = (th == OUR_SIGNATURE) ? abs(tl) - 2 : -1;
001689 3b3b      	CPI  R19,187
00168a f429      	BRNE _0x40111
00168b 2fe4      	MOV  R30,R20
00168c 940e 2a12 	CALL SUBOPT_0x25
00168e 9732      	SBIW R30,2
00168f c001      	RJMP _0x40112
                 _0x40111:
001690 efef      	LDI  R30,LOW(255)
                 _0x40112:
001691 2f5e      	MOV  R21,R30
                 ; 0002 030B         // Проверяем на совпадение с number
                 ; 0002 030C         if (!is_found) is_found = (index == number) ? i + 1 : 0;
001692 3010      	CPI  R17,0
001693 f461      	BRNE _0x40114
001694 81ef      	LDD  R30,Y+7
001695 2fa5      	MOV  R26,R21
001696 940e 2bb4 	CALL SUBOPT_0x6D
001698 17ea      	CP   R30,R26
001699 07fb      	CPC  R31,R27
00169a f419      	BRNE _0x40115
00169b 2fe0      	MOV  R30,R16
00169c 5fef      	SUBI R30,-LOW(1)
00169d c001      	RJMP _0x40116
                 _0x40115:
00169e e0e0      	LDI  R30,LOW(0)
                 _0x40116:
00169f 2f1e      	MOV  R17,R30
                 ; 0002 030D         // Проверяем свободность
                 ; 0002 030E         if (!is_new) is_new = (index == -1) ? 0 : i + 1;
                 _0x40114:
0016a0 3020      	CPI  R18,0
0016a1 f439      	BRNE _0x40118
0016a2 3f5f      	CPI  R21,255
0016a3 f411      	BRNE _0x40119
0016a4 e0e0      	LDI  R30,LOW(0)
0016a5 c002      	RJMP _0x4011A
                 _0x40119:
0016a6 2fe0      	MOV  R30,R16
0016a7 5fef      	SUBI R30,-LOW(1)
                 _0x4011A:
0016a8 2f2e      	MOV  R18,R30
                 ; 0002 030F     }
                 _0x40118:
0016a9 5f0f      	SUBI R16,-1
0016aa cfcc      	RJMP _0x4010F
                 _0x40110:
                 ; 0002 0310     #ifndef NODEBUG
                 ; 0002 0311     printf ("Задан N%u (number), нашли N%u (is_found), свободный N%u (is_new)\r\n", number, is_found, is_new);
                +
0016ab e8e7     +LDI R30 , LOW ( 2 * _0x40000 + 1701 )
0016ac e0fb     +LDI R31 , HIGH ( 2 * _0x40000 + 1701 )
                 	__POINTW1FN _0x40000,1701
0016ad 940e 2bb9 	CALL SUBOPT_0x6E
0016af 2fe1      	MOV  R30,R17
0016b0 940e 2a21 	CALL SUBOPT_0x28
0016b2 2fe2      	MOV  R30,R18
0016b3 940e 2a21 	CALL SUBOPT_0x28
0016b5 940e 2989 	CALL SUBOPT_0x12
                 ; 0002 0312     #endif
                 ; 0002 0313     // Если есть, то выходим из функции с соотвествующим сообщением
                 ; 0002 0314     if (is_found) {
0016b7 3010      	CPI  R17,0
0016b8 f051      	BREQ _0x4011C
                 ; 0002 0315         printf ("Термометр N%u существует по порядковому номеру %u\r\n", number, is_found);
                +
0016b9 ecea     +LDI R30 , LOW ( 2 * _0x40000 + 1768 )
0016ba e0fb     +LDI R31 , HIGH ( 2 * _0x40000 + 1768 )
                 	__POINTW1FN _0x40000,1768
0016bb 940e 2bb9 	CALL SUBOPT_0x6E
0016bd 2fe1      	MOV  R30,R17
0016be 940e 2a21 	CALL SUBOPT_0x28
0016c0 940e 2a0d 	CALL SUBOPT_0x24
                 ; 0002 0316         return;
0016c2 c037      	RJMP _0x20E0018
                 ; 0002 0317     }
                 ; 0002 0318     // Если нет свободных, выходим с соотвествующим сообщением
                 ; 0002 0319     if (!is_new) {
                 _0x4011C:
0016c3 3020      	CPI  R18,0
0016c4 f429      	BRNE _0x4011D
                 ; 0002 031A         printf ("Свободных термометров нет\r\n");
                +
0016c5 efee     +LDI R30 , LOW ( 2 * _0x40000 + 1820 )
0016c6 e0fb     +LDI R31 , HIGH ( 2 * _0x40000 + 1820 )
                 	__POINTW1FN _0x40000,1820
0016c7 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 031B         return;
0016c9 c030      	RJMP _0x20E0018
                 ; 0002 031C     }
                 ; 0002 031D     // Если нашли, то прописываем TH, TL
                 ; 0002 031E     tl = -2 - number; i = is_new - 1;
                 _0x4011D:
0016ca 81af      	LDD  R26,Y+7
0016cb efee      	LDI  R30,LOW(254)
0016cc 1bea      	SUB  R30,R26
0016cd 2f4e      	MOV  R20,R30
0016ce 2fe2      	MOV  R30,R18
0016cf 50e1      	SUBI R30,LOW(1)
0016d0 2f0e      	MOV  R16,R30
                 ; 0002 031F     #ifndef NODEBUG
                 ; 0002 0320     printf ("Новый TL = %d[%02x] по номеру %u\r\n", tl, tl, i);
                +
0016d1 e1ea     +LDI R30 , LOW ( 2 * _0x40000 + 1848 )
0016d2 e0fc     +LDI R31 , HIGH ( 2 * _0x40000 + 1848 )
                 	__POINTW1FN _0x40000,1848
0016d3 93fa      	ST   -Y,R31
0016d4 93ea      	ST   -Y,R30
0016d5 2fe4      	MOV  R30,R20
0016d6 940e 2b66 	CALL SUBOPT_0x5E
0016d8 2fe4      	MOV  R30,R20
0016d9 940e 2b66 	CALL SUBOPT_0x5E
0016db 2fe0      	MOV  R30,R16
0016dc 940e 2a21 	CALL SUBOPT_0x28
0016de 940e 2989 	CALL SUBOPT_0x12
                 ; 0002 0321     #endif
                 ; 0002 0322     if (ds1820_set_alarm(&ds1820_rom_codes[i][0], tl, OUR_SIGNATURE)) {
0016e0 940e 2bac 	CALL SUBOPT_0x6C
0016e2 934a      	ST   -Y,R20
0016e3 ebeb      	LDI  R30,LOW(187)
0016e4 940e 2bbd 	CALL SUBOPT_0x6F
0016e6 f069      	BREQ _0x4011E
                 ; 0002 0323         printf ("Проинициализировали термометр N%u по порядковому номеру %u\r\n", number, is_new);
                +
0016e7 e3ed     +LDI R30 , LOW ( 2 * _0x40000 + 1883 )
0016e8 e0fc     +LDI R31 , HIGH ( 2 * _0x40000 + 1883 )
                 	__POINTW1FN _0x40000,1883
0016e9 940e 2bb9 	CALL SUBOPT_0x6E
0016eb 2fe2      	MOV  R30,R18
0016ec 940e 2a21 	CALL SUBOPT_0x28
0016ee 940e 2a0d 	CALL SUBOPT_0x24
                 ; 0002 0324         delay_ms (DS1820_ALL_DELAY);
0016f0 940e 2944 	CALL SUBOPT_0x6
                 ; 0002 0325         // Запускаем перезагрузку
                 ; 0002 0326         #asm
                 ; 0002 0327             JMP  __RESET
0016f2 940c 0a95             JMP  __RESET
                 ; 0002 0328         #endasm
                 ; 0002 0329     }
                 ; 0002 032A     printf ("Не могу проинициализировать новый термометр N%u\r\n", number);
                 _0x4011E:
                +
0016f4 e7ea     +LDI R30 , LOW ( 2 * _0x40000 + 1944 )
0016f5 e0fc     +LDI R31 , HIGH ( 2 * _0x40000 + 1944 )
                 	__POINTW1FN _0x40000,1944
0016f6 940e 2bb9 	CALL SUBOPT_0x6E
0016f8 940e 295f 	CALL SUBOPT_0xA
                 ; 0002 032B     return;
                 _0x20E0018:
0016fa 940e 3149 	CALL __LOADLOCR6
0016fc 9628      	ADIW R28,8
0016fd 9508      	RET
                 ; 0002 032C }
                 ;void ask_turn_off(void) {
                 ; 0002 032D void ask_turn_off(void) {
                 _ask_turn_off:
                 ; 0002 032E     printf("Выключите питание и подключите все оборудование\r\n");
                +
0016fe eaec     +LDI R30 , LOW ( 2 * _0x40000 + 1994 )
0016ff e0fc     +LDI R31 , HIGH ( 2 * _0x40000 + 1994 )
                 	__POINTW1FN _0x40000,1994
001700 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 032F     while(1);
                 _0x4011F:
001702 cfff      	RJMP _0x4011F
                 ; 0002 0330 }
                 ;// Установка номера термометра принудительно на 1-й попавшийся.
                 ;void init_force_term(signed char number) {
                 ; 0002 0332 void init_force_term(signed char number) {
                 _init_force_term:
                 ; 0002 0333     // Описание локальных переменных
                 ; 0002 0334     byte inbyte = 0;
                 ; 0002 0335     // Начало
                 ; 0002 0336     #asm("cli")
001703 930a      	ST   -Y,R16
                 ;	number -> Y+1
                 ;	inbyte -> R16
001704 e000      	LDI  R16,0
001705 94f8      	cli
                 ; 0002 0337     printf("Отключите все термометры, кроме [%02x] и нажмите клавишу SHIFT-'~'\r\nВыход из режима - выключение питания\r\n", number);
                +
001706 edee     +LDI R30 , LOW ( 2 * _0x40000 + 2044 )
001707 e0fc     +LDI R31 , HIGH ( 2 * _0x40000 + 2044 )
                 	__POINTW1FN _0x40000,2044
001708 93fa      	ST   -Y,R31
001709 93ea      	ST   -Y,R30
00170a 81eb      	LDD  R30,Y+3
00170b 940e 2b66 	CALL SUBOPT_0x5E
00170d 940e 295f 	CALL SUBOPT_0xA
                 ; 0002 0338     do
                 _0x40123:
                 ; 0002 0339         if (UCSRA & RX_COMPLETE) inbyte = UDR;
00170f 995f      	SBIC 0xB,7
001710 b10c      	IN   R16,12
                 ; 0002 033A     while (inbyte != 0x7E);
001711 370e      	CPI  R16,126
001712 f7e1      	BRNE _0x40123
                 ; 0002 033B     ds1820_devices = w1_search(0xf0, ds1820_rom_codes);
001713 940e 294f 	CALL SUBOPT_0x8
                +
001715 93e0 0193+STS _prim_par + 51 , R30
                 	__PUTB1MN _prim_par,51
                 ; 0002 033C     delay_ms (DS1820_ALL_DELAY);
001717 940e 2944 	CALL SUBOPT_0x6
                 ; 0002 033D     printallterms();
001719 de25      	RCALL _printallterms
                 ; 0002 033E     if (!ds1820_devices)
                +
00171a 91e0 0193+LDS R30 , _prim_par + 51
                 	__GETB1MN _prim_par,51
00171c 30e0      	CPI  R30,0
00171d f429      	BRNE _0x40126
                 ; 0002 033F         printf("Термометры не найдены\r\n");
                +
00171e e4e9     +LDI R30 , LOW ( 2 * _0x40000 + 2151 )
00171f e0fd     +LDI R31 , HIGH ( 2 * _0x40000 + 2151 )
                 	__POINTW1FN _0x40000,2151
001720 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 0340     else
001722 c016      	RJMP _0x40127
                 _0x40126:
                 ; 0002 0341         if (ds1820_set_alarm(&ds1820_rom_codes[0][0], number, OUR_SIGNATURE))
001723 efeb      	LDI  R30,LOW(_ds1820_rom_codes)
001724 e0f1      	LDI  R31,HIGH(_ds1820_rom_codes)
001725 93fa      	ST   -Y,R31
001726 93ea      	ST   -Y,R30
001727 81eb      	LDD  R30,Y+3
001728 93ea      	ST   -Y,R30
001729 ebeb      	LDI  R30,LOW(187)
00172a 940e 2bbd 	CALL SUBOPT_0x6F
00172c f019      	BREQ _0x40128
                 ; 0002 0342             printf("Термометр [%02x] успешно проинициализирован\r\n", number);
                +
00172d e6e1     +LDI R30 , LOW ( 2 * _0x40000 + 2175 )
00172e e0fd     +LDI R31 , HIGH ( 2 * _0x40000 + 2175 )
                 	__POINTW1FN _0x40000,2175
00172f c002      	RJMP _0x40166
                 ; 0002 0343         else
                 _0x40128:
                 ; 0002 0344             printf("Не могу проинициализировать новый термометр [%02x]\r\n", number);
                +
001730 e8ef     +LDI R30 , LOW ( 2 * _0x40000 + 2221 )
001731 e0fd     +LDI R31 , HIGH ( 2 * _0x40000 + 2221 )
                 	__POINTW1FN _0x40000,2221
                 _0x40166:
001732 93fa      	ST   -Y,R31
001733 93ea      	ST   -Y,R30
001734 81eb      	LDD  R30,Y+3
001735 940e 2b66 	CALL SUBOPT_0x5E
001737 940e 295f 	CALL SUBOPT_0xA
                 ; 0002 0345     ask_turn_off();
                 _0x40127:
001739 dfc4      	RCALL _ask_turn_off
                 ; 0002 0346     #asm("sei")
00173a 9478      	sei
                 ; 0002 0347 }
00173b 8108      	LDD  R16,Y+0
00173c c2f0      	RJMP _0x20E0012
                 ;void set_term(signed char number, signed char sign) {
                 ; 0002 0348 void set_term(signed char number, signed char sign) {
                 _set_term:
                 ; 0002 0349     if (sign == OUR_SIGNATURE) {
                 ;	number -> Y+1
                 ;	sign -> Y+0
00173d 81a8      	LD   R26,Y
00173e 3bab      	CPI  R26,LOW(0xBB)
00173f f4b9      	BRNE _0x4012A
                 ; 0002 034A         if (ds1820_set_alarm(&ds1820_rom_codes[number][0], -2 - number, sign))
001740 940e 2bc2 	CALL SUBOPT_0x70
001742 81ab      	LDD  R26,Y+3
001743 efee      	LDI  R30,LOW(254)
001744 1bea      	SUB  R30,R26
001745 93ea      	ST   -Y,R30
001746 81eb      	LDD  R30,Y+3
001747 940e 2bbd 	CALL SUBOPT_0x6F
001749 f019      	BREQ _0x4012B
                 ; 0002 034B             printf("Термометр [%02x] успешно проинициализирован\r\n", number);
                +
00174a e6e1     +LDI R30 , LOW ( 2 * _0x40000 + 2175 )
00174b e0fd     +LDI R31 , HIGH ( 2 * _0x40000 + 2175 )
                 	__POINTW1FN _0x40000,2175
00174c c002      	RJMP _0x40167
                 ; 0002 034C         else
                 _0x4012B:
                 ; 0002 034D             printf("Не могу проинициализировать термометр [%02x]\r\n", number);
                +
00174d ece4     +LDI R30 , LOW ( 2 * _0x40000 + 2274 )
00174e e0fd     +LDI R31 , HIGH ( 2 * _0x40000 + 2274 )
                 	__POINTW1FN _0x40000,2274
                 _0x40167:
00174f 93fa      	ST   -Y,R31
001750 93ea      	ST   -Y,R30
001751 81eb      	LDD  R30,Y+3
001752 940e 2b66 	CALL SUBOPT_0x5E
001754 940e 295f 	CALL SUBOPT_0xA
                 ; 0002 034E     } else {
001756 c014      	RJMP _0x4012D
                 _0x4012A:
                 ; 0002 034F         if (ds1820_set_alarm(&ds1820_rom_codes[number][0], 1, sign))
001757 940e 2bc2 	CALL SUBOPT_0x70
001759 e0e1      	LDI  R30,LOW(1)
00175a 93ea      	ST   -Y,R30
00175b 81eb      	LDD  R30,Y+3
00175c 940e 2bbd 	CALL SUBOPT_0x6F
00175e f019      	BREQ _0x4012E
                 ; 0002 0350             printf("Термометр [%02x] успешно очищен\r\n", number);
                +
00175f efe3     +LDI R30 , LOW ( 2 * _0x40000 + 2321 )
001760 e0fd     +LDI R31 , HIGH ( 2 * _0x40000 + 2321 )
                 	__POINTW1FN _0x40000,2321
001761 c002      	RJMP _0x40168
                 ; 0002 0351         else
                 _0x4012E:
                 ; 0002 0352             printf("Не могу очистить термометр [%02x]\r\n", number);
                +
001762 e1e5     +LDI R30 , LOW ( 2 * _0x40000 + 2355 )
001763 e0fe     +LDI R31 , HIGH ( 2 * _0x40000 + 2355 )
                 	__POINTW1FN _0x40000,2355
                 _0x40168:
001764 93fa      	ST   -Y,R31
001765 93ea      	ST   -Y,R30
001766 81eb      	LDD  R30,Y+3
001767 940e 2b66 	CALL SUBOPT_0x5E
001769 940e 295f 	CALL SUBOPT_0xA
                 ; 0002 0353     }
                 _0x4012D:
                 ; 0002 0354 }
00176b c2c1      	RJMP _0x20E0012
                 ;// Переключение звука
                 ;void toggle_sound(void) {
                 ; 0002 0356 void toggle_sound(void) {
                 _toggle_sound:
                 ; 0002 0357     if (mode.sound)
                +
00176c 91e0 01be+LDS R30 , _mode + 6
                 	__GETB1MN _mode,6
00176e 30e0      	CPI  R30,0
00176f f019      	BREQ _0x40130
                 ; 0002 0358         printf("Звук выключен\r\n");
                +
001770 e3e9     +LDI R30 , LOW ( 2 * _0x40000 + 2391 )
001771 e0fe     +LDI R31 , HIGH ( 2 * _0x40000 + 2391 )
                 	__POINTW1FN _0x40000,2391
001772 c002      	RJMP _0x40169
                 ; 0002 0359     else
                 _0x40130:
                 ; 0002 035A         printf("Звук включен\r\n");
                +
001773 e4e9     +LDI R30 , LOW ( 2 * _0x40000 + 2407 )
001774 e0fe     +LDI R31 , HIGH ( 2 * _0x40000 + 2407 )
                 	__POINTW1FN _0x40000,2407
                 _0x40169:
001775 93fa      	ST   -Y,R31
001776 93ea      	ST   -Y,R30
001777 e080      	LDI  R24,0
001778 940e 28c5 	CALL _printf
00177a 9622      	ADIW R28,2
                 ; 0002 035B     mode.sound = !mode.sound;
                +
00177b 91e0 01be+LDS R30 , _mode + 6
                 	__GETB1MN _mode,6
00177d 940e 2f59 	CALL __LNEGB1
                +
00177f 93e0 01be+STS _mode + 6 , R30
                 	__PUTB1MN _mode,6
                 ; 0002 035C }
001781 9508      	RET
                 ;// Переключение печати
                 ;void toggle_print(void) {
                 ; 0002 035E void toggle_print(void) {
                 _toggle_print:
                 ; 0002 035F     mode.print = !mode.print;
                +
001782 91e0 01ca+LDS R30 , _mode + 18
                 	__GETB1MN _mode,18
001784 940e 2f59 	CALL __LNEGB1
                +
001786 93e0 01ca+STS _mode + 18 , R30
                 	__PUTB1MN _mode,18
                 ; 0002 0360     if (mode.print)
                +
001788 91e0 01ca+LDS R30 , _mode + 18
                 	__GETB1MN _mode,18
00178a 30e0      	CPI  R30,0
00178b f019      	BREQ _0x40132
                 ; 0002 0361         printf("Печать включена\r\n");
                +
00178c e5e8     +LDI R30 , LOW ( 2 * _0x40000 + 2422 )
00178d e0fe     +LDI R31 , HIGH ( 2 * _0x40000 + 2422 )
                 	__POINTW1FN _0x40000,2422
00178e c002      	RJMP _0x4016A
                 ; 0002 0362         //printf("Печать выключена\r\n Время, Температура заданная, Температура измеренная, Delta, Угол крана расчетный, Угол кранаизмеренный, Угол ограничения, result, pTerm, iTerm, dTerm, Обороты расчетные, Обороты измеренныее\r\n");
                 ; 0002 0363     else
                 _0x40132:
                 ; 0002 0364         printf("Печать выключена\r\n Время, Температура заданная, Температура измеренная, Delta, Угол крана расчетный, Угол кранаизмеренный, Угол ограничения, result, pTerm, iTerm, dTerm, Обороты расчетные, Обороты измеренныее\r\n");
                +
00178f e6ea     +LDI R30 , LOW ( 2 * _0x40000 + 2440 )
001790 e0fe     +LDI R31 , HIGH ( 2 * _0x40000 + 2440 )
                 	__POINTW1FN _0x40000,2440
                 _0x4016A:
001791 93fa      	ST   -Y,R31
001792 93ea      	ST   -Y,R30
001793 e080      	LDI  R24,0
001794 940e 28c5 	CALL _printf
001796 9622      	ADIW R28,2
                 ; 0002 0365         //printf("Печать включена\r\n");
                 ; 0002 0366 }
001797 9508      	RET
                 ;// Обработка событий от серийного порта
                 ;void check_serial(void) {
                 ; 0002 0368 void check_serial(void) {
                 _check_serial:
                 ; 0002 0369     byte inbyte;    // Описание локальных переменных
                 ; 0002 036A     register byte i;
                 ; 0002 036B     // Обрабатываем последовательный порт
                 ; 0002 036C     if (UCSRA & RX_COMPLETE) { // Пришло ли что-нибудь
001798 931a      	ST   -Y,R17
001799 930a      	ST   -Y,R16
                 ;	inbyte -> R16
                 ;	i -> R17
00179a 9b5f      	SBIS 0xB,7
00179b c108      	RJMP _0x40134
                 ; 0002 036D         inbyte = UDR;
00179c b10c      	IN   R16,12
                 ; 0002 036E         switch (inbyte) {
00179d 2fe0      	MOV  R30,R16
                 ; 0002 036F             case 0x7A:  /* 'z' */
00179e 37ea      	CPI  R30,LOW(0x7A)
00179f f4c1      	BRNE _0x40138
                 ; 0002 0370                 printf("Время: %02u:%02u:%02u, дата:%02u.%02u.%02u, найдено %u термометров\r\n",
                 ; 0002 0371                         s_dt.cHH, s_dt.cMM, s_dt.cSS, s_dt.cdd, s_dt.cmo, s_dt.cyy, ds1820_devices);
                +
0017a0 e3ed     +LDI R30 , LOW ( 2 * _0x40000 + 2651 )
0017a1 e0ff     +LDI R31 , HIGH ( 2 * _0x40000 + 2651 )
                 	__POINTW1FN _0x40000,2651
0017a2 940e 2b49 	CALL SUBOPT_0x58
0017a4 940e 2b4e 	CALL SUBOPT_0x59
0017a6 940e 2b51 	CALL SUBOPT_0x5A
0017a8 940e 2b92 	CALL SUBOPT_0x66
0017aa 940e 2b95 	CALL SUBOPT_0x67
                +
0017ac 91e0 01cf+LDS R30 , _s_dt + 3
                 	__GETB1MN _s_dt,3
0017ae 940e 2a21 	CALL SUBOPT_0x28
0017b0 940e 2957 	CALL SUBOPT_0x9
0017b2 e18c      	LDI  R24,28
0017b3 940e 28c5 	CALL _printf
0017b5 966e      	ADIW R28,30
                 ; 0002 0372                 printallterms();
0017b6 dd88      	RCALL _printallterms
                 ; 0002 0373                 break;
0017b7 c0ec      	RJMP _0x40137
                 ; 0002 0374             case 0x73:  /* 's' */     // переключение звука
                 _0x40138:
0017b8 37e3      	CPI  R30,LOW(0x73)
0017b9 f411      	BRNE _0x40139
                 ; 0002 0375                 toggle_sound(); break;
0017ba dfb1      	RCALL _toggle_sound
0017bb c0e8      	RJMP _0x40137
                 ; 0002 0376             case 0x77:  /* 'w' */     // символ
                 _0x40139:
0017bc 37e7      	CPI  R30,LOW(0x77)
0017bd f439      	BRNE _0x4013A
                 ; 0002 0377                 printf ("Cаабытие = %u\r\n", (unsigned char)event);
                +
0017be e8e2     +LDI R30 , LOW ( 2 * _0x40000 + 2720 )
0017bf e0ff     +LDI R31 , HIGH ( 2 * _0x40000 + 2720 )
                 	__POINTW1FN _0x40000,2720
0017c0 93fa      	ST   -Y,R31
0017c1 93ea      	ST   -Y,R30
0017c2 91e0 01cb 	LDS  R30,_event
0017c4 c0d8      	RJMP _0x4016B
                 ; 0002 0378                 break;
                 ; 0002 0379             case 0x78:  // символ 'x'
                 _0x4013A:
0017c5 37e8      	CPI  R30,LOW(0x78)
0017c6 f411      	BRNE _0x4013B
                 ; 0002 037A                 toggle_print(); break;
0017c7 dfba      	RCALL _toggle_print
0017c8 c0db      	RJMP _0x40137
                 ; 0002 037B                 // print_curr_menu(); break; // Печатаем текущее меню
                 ; 0002 037C             case 0x65:  // символ 'e'
                 _0x4013B:
0017c9 36e5      	CPI  R30,LOW(0x65)
0017ca f419      	BRNE _0x4013C
                 ; 0002 037D                 alarm_all_print();
0017cb 940e 245d 	CALL _alarm_all_print
                 ; 0002 037E                 break;
0017cd c0d6      	RJMP _0x40137
                 ; 0002 037F             case 0x64:  // символ 'd'
                 _0x4013C:
0017ce 36e4      	CPI  R30,LOW(0x64)
0017cf f4c1      	BRNE _0x4013D
                 ; 0002 0380                 for (i=0; i < MAX_ALERTS; i++) {
0017d0 e010      	LDI  R17,LOW(0)
                 _0x4013F:
0017d1 301c      	CPI  R17,12
0017d2 f470      	BRSH _0x40140
                 ; 0002 0381                     if (!(alarm_unreg(i))) {
0017d3 931a      	ST   -Y,R17
0017d4 940e 2418 	CALL _alarm_unreg
0017d6 30e0      	CPI  R30,0
0017d7 f439      	BRNE _0x40141
                 ; 0002 0382                        printf ("Удалили активную тревогу: %s\r\n", get_alert_str(i));
                +
0017d8 e9e2     +LDI R30 , LOW ( 2 * _0x40000 + 2736 )
0017d9 e0ff     +LDI R31 , HIGH ( 2 * _0x40000 + 2736 )
                 	__POINTW1FN _0x40000,2736
0017da 93fa      	ST   -Y,R31
0017db 93ea      	ST   -Y,R30
0017dc 931a      	ST   -Y,R17
0017dd 940e 2a84 	CALL SUBOPT_0x38
                 ; 0002 0383                     }
                 ; 0002 0384                 }
                 _0x40141:
0017df 5f1f      	SUBI R17,-1
0017e0 cff0      	RJMP _0x4013F
                 _0x40140:
                 ; 0002 0385                 printf ("Инициализируем все термометры!\r\n");
                +
0017e1 ebe1     +LDI R30 , LOW ( 2 * _0x40000 + 2767 )
0017e2 e0ff     +LDI R31 , HIGH ( 2 * _0x40000 + 2767 )
                 	__POINTW1FN _0x40000,2767
0017e3 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 0386                 read_all_terms(INIT_MODE);
0017e5 940e 29af 	CALL SUBOPT_0x18
                 ; 0002 0387                 break;
0017e7 c0bc      	RJMP _0x40137
                 ; 0002 0388             case 0x63:                // символ 'c'
                 _0x4013D:
0017e8 36e3      	CPI  R30,LOW(0x63)
0017e9 f431      	BRNE _0x40142
                 ; 0002 0389                 print_prim_par((unsigned char *)&prim_par, sizeof(prim_par));
0017ea 940e 29a1 	CALL SUBOPT_0x16
0017ec e5e8      	LDI  R30,LOW(88)
0017ed 93ea      	ST   -Y,R30
0017ee de55      	RCALL _print_prim_par
                 ; 0002 038A                 break;
0017ef c0b4      	RJMP _0x40137
                 ; 0002 038B             case 0x6D:                // символ 'm'
                 _0x40142:
0017f0 36ed      	CPI  R30,LOW(0x6D)
0017f1 f4a9      	BRNE _0x40143
                 ; 0002 038C                 for(i=0; i<NUM_PARAMETERS; i++) printf("%s\t", param_str(i, parameters));
0017f2 e010      	LDI  R17,LOW(0)
                 _0x40145:
0017f3 301b      	CPI  R17,11
0017f4 f478      	BRSH _0x40146
                +
0017f5 ede2     +LDI R30 , LOW ( 2 * _0x40000 + 2800 )
0017f6 e0ff     +LDI R31 , HIGH ( 2 * _0x40000 + 2800 )
                 	__POINTW1FN _0x40000,2800
0017f7 93fa      	ST   -Y,R31
0017f8 93ea      	ST   -Y,R30
0017f9 931a      	ST   -Y,R17
0017fa e5e7      	LDI  R30,LOW(_parameters)
0017fb e0f2      	LDI  R31,HIGH(_parameters)
0017fc 940e 2bcb 	CALL SUBOPT_0x71
0017fe 940e 2b61 	CALL SUBOPT_0x5D
001800 940e 295f 	CALL SUBOPT_0xA
001802 5f1f      	SUBI R17,-1
001803 cfef      	RJMP _0x40145
                 _0x40146:
                 ; 0002 038D printf("\r\n");
001804 940e 2b6b 	CALL SUBOPT_0x5F
                 ; 0002 038E                 break;
001806 c09d      	RJMP _0x40137
                 ; 0002 038F             case 0x6E:                // символ 'n'
                 _0x40143:
001807 36ee      	CPI  R30,LOW(0x6E)
001808 f4a9      	BRNE _0x40147
                 ; 0002 0390                 for(i=0; i<NUM_MENU; i++) printf("%s\t", param_str(i, main_menu));
001809 e010      	LDI  R17,LOW(0)
                 _0x40149:
00180a 3017      	CPI  R17,7
00180b f478      	BRSH _0x4014A
                +
00180c ede2     +LDI R30 , LOW ( 2 * _0x40000 + 2800 )
00180d e0ff     +LDI R31 , HIGH ( 2 * _0x40000 + 2800 )
                 	__POINTW1FN _0x40000,2800
00180e 93fa      	ST   -Y,R31
00180f 93ea      	ST   -Y,R30
001810 931a      	ST   -Y,R17
001811 940e 2968 	CALL SUBOPT_0xC
001813 940e 1d9a 	CALL _param_str
001815 940e 2b61 	CALL SUBOPT_0x5D
001817 940e 295f 	CALL SUBOPT_0xA
001819 5f1f      	SUBI R17,-1
00181a cfef      	RJMP _0x40149
                 _0x4014A:
                 ; 0002 0391 printf("\r\n");
00181b 940e 2b6b 	CALL SUBOPT_0x5F
                 ; 0002 0392                 break;
00181d c086      	RJMP _0x40137
                 ; 0002 0393             case 0x4a:              // символ 'j'
                 _0x40147:
00181e 34ea      	CPI  R30,LOW(0x4A)
00181f f419      	BRNE _0x4014B
                 ; 0002 0394                 poll_keys();
001820 940e 2643 	CALL _poll_keys
                 ; 0002 0395                 break;
001822 c081      	RJMP _0x40137
                 ; 0002 0396             case 0x75:                // символ 'u' Воздух в помещении
                 _0x4014B:
001823 37e5      	CPI  R30,LOW(0x75)
001824 f421      	BRNE _0x4014C
                 ; 0002 0397                 init_force_term(0xFE); break;
001825 efee      	LDI  R30,LOW(254)
001826 93ea      	ST   -Y,R30
001827 dedb      	RCALL _init_force_term
001828 c07b      	RJMP _0x40137
                 ; 0002 0398             case 0x69:                // символ 'i' Воздух на улице
                 _0x4014C:
001829 36e9      	CPI  R30,LOW(0x69)
00182a f421      	BRNE _0x4014D
                 ; 0002 0399                 init_force_term(0xFD); break;
00182b efed      	LDI  R30,LOW(253)
00182c 93ea      	ST   -Y,R30
00182d ded5      	RCALL _init_force_term
00182e c075      	RJMP _0x40137
                 ; 0002 039A             case 0x6F:                // символ 'o' Вода
                 _0x4014D:
00182f 36ef      	CPI  R30,LOW(0x6F)
001830 f421      	BRNE _0x4014E
                 ; 0002 039B                 init_force_term(0xFC); break;
001831 efec      	LDI  R30,LOW(252)
001832 93ea      	ST   -Y,R30
001833 decf      	RCALL _init_force_term
001834 c06f      	RJMP _0x40137
                 ; 0002 039C             case 0x70:                // символ 'p'
                 _0x4014E:
001835 37e0      	CPI  R30,LOW(0x70)
001836 f421      	BRNE _0x4014F
                 ; 0002 039D                 init_force_term(0xFB); break;
001837 efeb      	LDI  R30,LOW(251)
001838 93ea      	ST   -Y,R30
001839 dec9      	RCALL _init_force_term
00183a c069      	RJMP _0x40137
                 ; 0002 039E             case 0x30:              // символ '0'
                 _0x4014F:
00183b 33e0      	CPI  R30,LOW(0x30)
00183c f441      	BRNE _0x40150
                 ; 0002 039F                 printf("Всем найденым термометрам прописываем 0x69 0xFE - Термометр в помещении\r\n");
                +
00183d ede6     +LDI R30 , LOW ( 2 * _0x40000 + 2804 )
00183e e0ff     +LDI R31 , HIGH ( 2 * _0x40000 + 2804 )
                 	__POINTW1FN _0x40000,2804
00183f 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 03A0                 init_new_terms(0);   // Находим непроинициализированные термометры и первому попавшему прописываем 0x69 0xFE
001841 e0e0      	LDI  R30,LOW(0)
001842 93ea      	ST   -Y,R30
001843 de27      	RCALL _init_new_terms
                 ; 0002 03A1                 break;
001844 c05f      	RJMP _0x40137
                 ; 0002 03A2             case 0x31:              // символ '1'
                 _0x40150:
001845 33e1      	CPI  R30,LOW(0x31)
001846 f441      	BRNE _0x40151
                 ; 0002 03A3                 printf("Всем найденым термометрам прописываем 0x69 0xFD - Термометр на улице\r\n");
                +
001847 e2e0     +LDI R30 , LOW ( 2 * _0x40000 + 2878 )
001848 e1f0     +LDI R31 , HIGH ( 2 * _0x40000 + 2878 )
                 	__POINTW1FN _0x40000,2878
001849 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 03A4                 init_new_terms(1);
00184b e0e1      	LDI  R30,LOW(1)
00184c 93ea      	ST   -Y,R30
00184d de1d      	RCALL _init_new_terms
                 ; 0002 03A5                 break;
00184e c055      	RJMP _0x40137
                 ; 0002 03A6             case 0x32:              // символ '2'
                 _0x40151:
00184f 33e2      	CPI  R30,LOW(0x32)
001850 f441      	BRNE _0x40152
                 ; 0002 03A7                 printf("Всем найденым термометрам прописываем 0x69 0xFC - Термометр на подаче воды\r\n");
                +
001851 e6e7     +LDI R30 , LOW ( 2 * _0x40000 + 2949 )
001852 e1f0     +LDI R31 , HIGH ( 2 * _0x40000 + 2949 )
                 	__POINTW1FN _0x40000,2949
001853 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 03A8                 init_new_terms(2);
001855 e0e2      	LDI  R30,LOW(2)
001856 93ea      	ST   -Y,R30
001857 de13      	RCALL _init_new_terms
                 ; 0002 03A9                 break;
001858 c04b      	RJMP _0x40137
                 ; 0002 03AA             case 0x33:              // символ '3'
                 _0x40152:
001859 33e3      	CPI  R30,LOW(0x33)
00185a f441      	BRNE _0x40153
                 ; 0002 03AB                 printf("Всем найденым термометрам прописываем 0x69 0xFB - Термометр на обратке воды\r\n");
                +
00185b ebe4     +LDI R30 , LOW ( 2 * _0x40000 + 3026 )
00185c e1f0     +LDI R31 , HIGH ( 2 * _0x40000 + 3026 )
                 	__POINTW1FN _0x40000,3026
00185d 940e 292a 	CALL SUBOPT_0x1
                 ; 0002 03AC                 init_new_terms(3);
00185f e0e3      	LDI  R30,LOW(3)
001860 93ea      	ST   -Y,R30
001861 de09      	RCALL _init_new_terms
                 ; 0002 03AD                 break;
001862 c041      	RJMP _0x40137
                 ; 0002 03AE             case 0x3f:              /* Shift + '?'*/
                 _0x40153:
001863 33ef      	CPI  R30,LOW(0x3F)
001864 f421      	BRNE _0x40154
                 ; 0002 03AF                 set_term(3, 1); break;
001865 e0e3      	LDI  R30,LOW(3)
001866 940e 2bcf 	CALL SUBOPT_0x72
001868 c03b      	RJMP _0x40137
                 ; 0002 03B0             case 0x3e:              /* Shift + '>' */
                 _0x40154:
001869 33ee      	CPI  R30,LOW(0x3E)
00186a f421      	BRNE _0x40155
                 ; 0002 03B1                 set_term(2, 1); break;
00186b e0e2      	LDI  R30,LOW(2)
00186c 940e 2bcf 	CALL SUBOPT_0x72
00186e c035      	RJMP _0x40137
                 ; 0002 03B2             case 0x3c:              /* Shift + '<' */
                 _0x40155:
00186f 33ec      	CPI  R30,LOW(0x3C)
001870 f421      	BRNE _0x40156
                 ; 0002 03B3                 set_term(1, 1); break;
001871 e0e1      	LDI  R30,LOW(1)
001872 940e 2bcf 	CALL SUBOPT_0x72
001874 c02f      	RJMP _0x40137
                 ; 0002 03B4             case 0x4d:              /* Shift + 'M' */
                 _0x40156:
001875 34ed      	CPI  R30,LOW(0x4D)
001876 f421      	BRNE _0x40157
                 ; 0002 03B5                 set_term(0, 1); break;
001877 940e 294a 	CALL SUBOPT_0x7
001879 dec3      	RCALL _set_term
00187a c029      	RJMP _0x40137
                 ; 0002 03B6             case 0x22:              /* Shift + '"'*/
                 _0x40157:
00187b 32e2      	CPI  R30,LOW(0x22)
00187c f421      	BRNE _0x40158
                 ; 0002 03B7                 set_term(3, OUR_SIGNATURE); break;
00187d e0e3      	LDI  R30,LOW(3)
00187e 940e 2bd4 	CALL SUBOPT_0x73
001880 c023      	RJMP _0x40137
                 ; 0002 03B8             case 0x3a:              /* Shift + ':' */
                 _0x40158:
001881 33ea      	CPI  R30,LOW(0x3A)
001882 f421      	BRNE _0x40159
                 ; 0002 03B9                 set_term(2, OUR_SIGNATURE); break;
001883 e0e2      	LDI  R30,LOW(2)
001884 940e 2bd4 	CALL SUBOPT_0x73
001886 c01d      	RJMP _0x40137
                 ; 0002 03BA             case 0x4c:              /* Shift + 'L' */
                 _0x40159:
001887 34ec      	CPI  R30,LOW(0x4C)
001888 f421      	BRNE _0x4015A
                 ; 0002 03BB                 set_term(1, OUR_SIGNATURE); break;
001889 e0e1      	LDI  R30,LOW(1)
00188a 940e 2bd4 	CALL SUBOPT_0x73
00188c c017      	RJMP _0x40137
                 ; 0002 03BC             case 0x4b:              /* Shift + 'K' */
                 _0x4015A:
00188d 34eb      	CPI  R30,LOW(0x4B)
00188e f421      	BRNE _0x4015B
                 ; 0002 03BD                 set_term(0, OUR_SIGNATURE); break;
00188f e0e0      	LDI  R30,LOW(0)
001890 940e 2bd4 	CALL SUBOPT_0x73
001892 c011      	RJMP _0x40137
                 ; 0002 03BE             case 0x39:              // символ '9'
                 _0x4015B:
001893 33e9      	CPI  R30,LOW(0x39)
001894 f419      	BRNE _0x4015D
                 ; 0002 03BF                 signal_printallbytes();
001895 940e 248e 	CALL _signal_printallbytes
                 ; 0002 03C0                 break;
001897 c00c      	RJMP _0x40137
                 ; 0002 03C1             default:
                 _0x4015D:
                 ; 0002 03C2                 printf("Нажат символ 0x%x\r\n", inbyte);
                +
001898 e0e2     +LDI R30 , LOW ( 2 * _0x40000 + 3104 )
001899 e1f1     +LDI R31 , HIGH ( 2 * _0x40000 + 3104 )
                 	__POINTW1FN _0x40000,3104
00189a 93fa      	ST   -Y,R31
00189b 93ea      	ST   -Y,R30
00189c 2fe0      	MOV  R30,R16
                 _0x4016B:
00189d 27ff      	CLR  R31
00189e 2766      	CLR  R22
00189f 2777      	CLR  R23
0018a0 940e 300c 	CALL __PUTPARD1
0018a2 940e 295f 	CALL SUBOPT_0xA
                 ; 0002 03C3         };
                 _0x40137:
                 ; 0002 03C4     }
                 ; 0002 03C5 }
                 _0x40134:
0018a4 c07b      	RJMP _0x20E0017
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include <1wire.h>
                 ;#include "robowater.h"
                 ;#include "spd1820.h"
                 ;// #define NODEBUG             // Комментируя эту строку, даем возможность компилятору включить отладочный сервис
                 ;/* #ifndef NODEBUG
                 ;// Функция печатающая значение __ds1820_scratch_pad
                 ;void print_scratch_pad (void) {
                 ;    register unsigned char i;
                 ;    unsigned char *pointer;
                 ;    pointer = (char *) &__ds1820_scratch_pad;
                 ;    printf("[ ");
                 ;    for (i=0; i<9; i++) printf ("%02X ", *pointer++);
                 ;    printf("]");
                 ;}
                 ;#endif */
                 ;// DS1820 devices ROM code storage area, 9 bytes are used for each device (see the w1_search function description in the help)
                 ;byte ds1820_rom_codes[MAX_DS1820][9];
                 ;struct st_terms termometers[MAX_DS1820];  // Массив значений термометров с их корректировочными параметрами
                 ;// Структура для хранения текущего ОЗУ Dallas
                 ;struct __ds1820_scratch_pad_struct __ds1820_scratch_pad;
                 ;// Функция записи адресов термометра из ds1820_rom_codes в структуру EEPROM, с использованием TH и TL
                 ;unsigned char sync_ds1820_eeprom(void) {
                 ; 0003 0019 unsigned char sync_ds1820_eeprom(void) {
                 
                 	.CSEG
                 _sync_ds1820_eeprom:
                 ; 0003 001A     unsigned char result = 0, i, j;
                 ; 0003 001B     signed char th, tl, get_alarm;
                 ; 0003 001C 
                 ; 0003 001D     for (i = 0; i < ds1820_devices; i++) {
0018a5 940e 3142 	CALL __SAVELOCR6
                 ;	result -> R16
                 ;	i -> R17
                 ;	j -> R18
                 ;	th -> R19
                 ;	tl -> R20
                 ;	get_alarm -> R21
0018a7 e000      	LDI  R16,0
0018a8 e010      	LDI  R17,LOW(0)
                 _0x60004:
                +
0018a9 91e0 0193+LDS R30 , _prim_par + 51
                 	__GETB1MN _prim_par,51
0018ab 171e      	CP   R17,R30
0018ac f010      	BRLO PC+3
0018ad 940c 18ef 	JMP _0x60005
                 ; 0003 001E         get_alarm = ds1820_get_alarm(&ds1820_rom_codes[i][0], &tl, &th);
0018af e0a9      	LDI  R26,LOW(9)
0018b0 9f1a      	MUL  R17,R26
0018b1 01f0      	MOVW R30,R0
0018b2 50e5      	SUBI R30,LOW(-_ds1820_rom_codes)
0018b3 4ffe      	SBCI R31,HIGH(-_ds1820_rom_codes)
0018b4 93fa      	ST   -Y,R31
0018b5 93ea      	ST   -Y,R30
0018b6 b7ed      	IN   R30,SPL
0018b7 b7fe      	IN   R31,SPH
0018b8 93fa      	ST   -Y,R31
0018b9 93ea      	ST   -Y,R30
0018ba 934f      	PUSH R20
0018bb b7ed      	IN   R30,SPL
0018bc b7fe      	IN   R31,SPH
0018bd 93fa      	ST   -Y,R31
0018be 93ea      	ST   -Y,R30
0018bf 933f      	PUSH R19
0018c0 d1eb      	RCALL _ds1820_get_alarm
0018c1 913f      	POP  R19
0018c2 914f      	POP  R20
0018c3 2f5e      	MOV  R21,R30
                 ; 0003 001F         if (get_alarm > 0) {
0018c4 3051      	CPI  R21,1
0018c5 f13c      	BRLT _0x60006
                 ; 0003 0020             // Адрес термометра [i] начинается с нулевой позиции [0]
                 ; 0003 0021             // Если термометр имеет необходимую сигнатуру, то присваеваем значение по смещению. tl
                 ; 0003 0022             // Иначе присваиваем в нулевой элемент (температура в помещении)
                 ; 0003 0023             for (j = 0; j < 9; j++)
0018c6 e020      	LDI  R18,LOW(0)
                 _0x60008:
0018c7 3029      	CPI  R18,9
0018c8 f520      	BRSH _0x60009
                 ; 0003 0024                 // Если термометр имеет "левую" сигнатуру, то переписываем его в массив ufo
                 ; 0003 0025                 if (th == OUR_SIGNATURE)
0018c9 3b3b      	CPI  R19,187
0018ca f461      	BRNE _0x6000A
                 ; 0003 0026                     prim_par.addr[abs(tl) - 2][j] = ds1820_rom_codes[i][j];
0018cb 2fe4      	MOV  R30,R20
0018cc 940e 2a12 	CALL SUBOPT_0x25
0018ce 9732      	SBIW R30,2
0018cf e0a9      	LDI  R26,LOW(9)
0018d0 e0b0      	LDI  R27,HIGH(9)
0018d1 940e 2f5e 	CALL __MULW12U
                +
0018d3 56ec     +SUBI R30 , LOW ( - _prim_par - ( 52 ) )
0018d4 4ffe     +SBCI R31 , HIGH ( - _prim_par - ( 52 ) )
                 	__ADDW1MN _prim_par,52
0018d5 01df      	MOVW R26,R30
0018d6 c003      	RJMP _0x60041
                 ; 0003 0027                 else {
                 _0x6000A:
                 ; 0003 0028                     result++;
0018d7 5f0f      	SUBI R16,-1
                 ; 0003 0029                     mode.ufo[j] = ds1820_rom_codes[i][j];
                +
0018d8 eca1     +LDI R26 , LOW ( _mode + 9 )
0018d9 e0b1     +LDI R27 , HIGH ( _mode + 9 )
                 	__POINTW2MN _mode,9
                 _0x60041:
0018da 2fe2      	MOV  R30,R18
0018db e0f0      	LDI  R31,0
0018dc 0fea      	ADD  R30,R26
0018dd 1ffb      	ADC  R31,R27
0018de 01bf      	MOVW R22,R30
0018df e0a9      	LDI  R26,LOW(9)
0018e0 9f1a      	MUL  R17,R26
0018e1 01f0      	MOVW R30,R0
0018e2 50e5      	SUBI R30,LOW(-_ds1820_rom_codes)
0018e3 4ffe      	SBCI R31,HIGH(-_ds1820_rom_codes)
0018e4 01df      	MOVW R26,R30
0018e5 27ee      	CLR  R30
0018e6 0fa2      	ADD  R26,R18
0018e7 1fbe      	ADC  R27,R30
0018e8 91ec      	LD   R30,X
0018e9 01db      	MOVW R26,R22
0018ea 93ec      	ST   X,R30
                 ; 0003 002A                 }
0018eb 5f2f      	SUBI R18,-1
0018ec cfda      	RJMP _0x60008
                 _0x60009:
                 ; 0003 002B         }
                 ; 0003 002C     }
                 _0x60006:
0018ed 5f1f      	SUBI R17,-1
0018ee cfba      	RJMP _0x60004
                 _0x60005:
                 ; 0003 002D     return result;
0018ef 2fe0      	MOV  R30,R16
0018f0 940e 3149 	CALL __LOADLOCR6
0018f2 c1c9      	RJMP _0x20E0010
                 ; 0003 002E }
                 ;// Функция чтения адресов термометра из EEPROM в ds1820_rom_codes по порядку
                 ;void sync_eeprom_ds1820(void) {
                 ; 0003 0030 void sync_eeprom_ds1820(void) {
                 _sync_eeprom_ds1820:
                 ; 0003 0031     register byte i, j;
                 ; 0003 0032     // Перегоняем все данные из структуры EEPROM в массив термометров
                 ; 0003 0033     for (i = 0; i < ds1820_devices; i++)
0018f3 931a      	ST   -Y,R17
0018f4 930a      	ST   -Y,R16
                 ;	i -> R16
                 ;	j -> R17
0018f5 e000      	LDI  R16,LOW(0)
                 _0x6000D:
                +
0018f6 91e0 0193+LDS R30 , _prim_par + 51
                 	__GETB1MN _prim_par,51
0018f8 170e      	CP   R16,R30
0018f9 f530      	BRSH _0x6000E
                 ; 0003 0034         for (j = 0; j < 9; j++)
0018fa e010      	LDI  R17,LOW(0)
                 _0x60010:
0018fb 3019      	CPI  R17,9
0018fc f508      	BRSH _0x60011
                 ; 0003 0035             ds1820_rom_codes[i][j] = prim_par.addr[i][j];
0018fd e0a9      	LDI  R26,LOW(9)
0018fe 9f0a      	MUL  R16,R26
0018ff 01f0      	MOVW R30,R0
001900 50e5      	SUBI R30,LOW(-_ds1820_rom_codes)
001901 4ffe      	SBCI R31,HIGH(-_ds1820_rom_codes)
001902 01df      	MOVW R26,R30
001903 2fe1      	MOV  R30,R17
001904 e0f0      	LDI  R31,0
001905 0fea      	ADD  R30,R26
001906 1ffb      	ADC  R31,R27
001907 93ff      	PUSH R31
001908 93ef      	PUSH R30
                +
001909 e9a4     +LDI R26 , LOW ( _prim_par + 52 )
00190a e0b1     +LDI R27 , HIGH ( _prim_par + 52 )
                 	__POINTW2MN _prim_par,52
00190b 2fe0      	MOV  R30,R16
00190c 940e 2bd9 	CALL SUBOPT_0x74
00190e e0a9      	LDI  R26,LOW(9)
00190f e0b0      	LDI  R27,HIGH(9)
001910 940e 2f5e 	CALL __MULW12U
001912 01db      	MOVW R26,R22
001913 0fae      	ADD  R26,R30
001914 1fbf      	ADC  R27,R31
001915 27ee      	CLR  R30
001916 0fa1      	ADD  R26,R17
001917 1fbe      	ADC  R27,R30
001918 91ec      	LD   R30,X
001919 91af      	POP  R26
00191a 91bf      	POP  R27
00191b 93ec      	ST   X,R30
00191c 5f1f      	SUBI R17,-1
00191d cfdd      	RJMP _0x60010
                 _0x60011:
                 ; 0003 0036 }
00191e 5f0f      	SUBI R16,-1
00191f cfd6      	RJMP _0x6000D
                 _0x6000E:
                 _0x20E0017:
001920 9109      	LD   R16,Y+
001921 9119      	LD   R17,Y+
001922 9508      	RET
                 ;// Функция внесения поправки в измерение и сохранения температуры с проверкой на допустимость
                 ;void rectification(int unconverted, unsigned char index, unsigned char measure_mode) {
                 ; 0003 0038 void rectification(int unconverted, unsigned char index, unsigned char measure_mode) {
                 _rectification:
                 ; 0003 0039     // float lt;       // параметр для коррекции температуры
                 ; 0003 003A     if (index >= MAX_DS1820) return;
                 ;	unconverted -> Y+2
                 ;	index -> Y+1
                 ;	measure_mode -> Y+0
001923 81a9      	LDD  R26,Y+1
001924 30a4      	CPI  R26,LOW(0x4)
001925 f008      	BRLO _0x60012
001926 c055      	RJMP _0x20E0016
                 ; 0003 003B     // lt = (float)prim_par.elims[index].scale / 128 + 1;
                 ; 0003 003C     // lt = lt * unconverted + prim_par.elims[index].shift;
                 ; 0003 003D     // termometers[index].t = (int)lt;
                 ; 0003 003E     termometers[index].t = unconverted;
                 _0x60012:
001927 81e9      	LDD  R30,Y+1
001928 940e 2b6e 	CALL SUBOPT_0x60
00192a 81aa      	LDD  R26,Y+2
00192b 81bb      	LDD  R27,Y+2+1
00192c 83a0      	STD  Z+0,R26
00192d 83b1      	STD  Z+1,R27
                 ; 0003 003F     if (measure_mode == INIT_MODE) {
00192e 81a8      	LD   R26,Y
00192f 30a1      	CPI  R26,LOW(0x1)
001930 f4c9      	BRNE _0x60013
                 ; 0003 0040         if (unconverted == NOT_FOUND)
001931 81aa      	LDD  R26,Y+2
001932 81bb      	LDD  R27,Y+2+1
001933 3fa1      	CPI  R26,LOW(0xD8F1)
001934 ede8      	LDI  R30,HIGH(0xD8F1)
001935 07be      	CPC  R27,R30
001936 f421      	BRNE _0x60014
                 ; 0003 0041             termometers[index].err = MAX_OFFLINES;
001937 940e 2bdc 	CALL SUBOPT_0x75
001939 e0a5      	LDI  R26,LOW(5)
00193a c003      	RJMP _0x60042
                 ; 0003 0042         else
                 _0x60014:
                 ; 0003 0043             termometers[index].err = 0;
00193b 940e 2bdc 	CALL SUBOPT_0x75
00193d e0a0      	LDI  R26,LOW(0)
                 _0x60042:
00193e 83a0      	STD  Z+0,R26
                 ; 0003 0044         termometers[index].t_last = termometers[index].t;
00193f 940e 2be3 	CALL SUBOPT_0x76
001941 01bf      	MOVW R22,R30
001942 81e9      	LDD  R30,Y+1
001943 940e 2b6e 	CALL SUBOPT_0x60
001945 940e 2bea 	CALL SUBOPT_0x77
001947 93ed      	ST   X+,R30
001948 93fc      	ST   X,R31
                 ; 0003 0045     } else {
001949 c032      	RJMP _0x60016
                 _0x60013:
                 ; 0003 0046         // Проверяем разницу между предыдущим измерением и текущим
                 ; 0003 0047         if (abs(termometers[index].t - termometers[index].t_last) < DELTA_MAX) {
00194a 81e9      	LDD  R30,Y+1
00194b 940e 2b6e 	CALL SUBOPT_0x60
00194d 8160      	LD   R22,Z
00194e 8171      	LDD  R23,Z+1
00194f 940e 2be3 	CALL SUBOPT_0x76
001951 940e 2bea 	CALL SUBOPT_0x77
001953 1bae      	SUB  R26,R30
001954 0bbf      	SBC  R27,R31
001955 93ba      	ST   -Y,R27
001956 93aa      	ST   -Y,R26
001957 940e 28d4 	CALL _abs
001959 3ee8      	CPI  R30,LOW(0x3E8)
00195a e0a3      	LDI  R26,HIGH(0x3E8)
00195b 07fa      	CPC  R31,R26
00195c f478      	BRSH _0x60017
                 ; 0003 0048             termometers[index].t_last = termometers[index].t;
00195d 940e 2be3 	CALL SUBOPT_0x76
00195f 01bf      	MOVW R22,R30
001960 81e9      	LDD  R30,Y+1
001961 940e 2b6e 	CALL SUBOPT_0x60
001963 940e 2bea 	CALL SUBOPT_0x77
001965 93ed      	ST   X+,R30
001966 93fc      	ST   X,R31
                 ; 0003 0049             termometers[index].err = 0;
001967 940e 2bdc 	CALL SUBOPT_0x75
001969 e0a0      	LDI  R26,LOW(0)
00196a 83a0      	STD  Z+0,R26
                 ; 0003 004A         } else {
00196b c010      	RJMP _0x60018
                 _0x60017:
                 ; 0003 004B             termometers[index].t = termometers[index].t_last;
00196c 81e9      	LDD  R30,Y+1
00196d 940e 2b6e 	CALL SUBOPT_0x60
00196f 01bf      	MOVW R22,R30
001970 940e 2be3 	CALL SUBOPT_0x76
001972 940e 2bea 	CALL SUBOPT_0x77
001974 93ed      	ST   X+,R30
001975 93fc      	ST   X,R31
                 ; 0003 004C             termometers[index].err++;
001976 940e 2bdc 	CALL SUBOPT_0x75
001978 01df      	MOVW R26,R30
001979 91ec      	LD   R30,X
00197a 5fef      	SUBI R30,-LOW(1)
00197b 93ec      	ST   X,R30
                 ; 0003 004D         }
                 _0x60018:
                 ; 0003 004E     }
                 _0x60016:
                 ; 0003 004F }
                 _0x20E0016:
00197c 9624      	ADIW R28,4
00197d 9508      	RET
                 ;// Чтение всех Dallas с коррекцией
                 ;void read_all_terms(unsigned char measure_mode) {
                 ; 0003 0051 void read_all_terms(unsigned char measure_mode) {
                 _read_all_terms:
                 ; 0003 0052     register byte i;
                 ; 0003 0053     // Запись из EEPROM массива адресов термометров в режиме инициализации
                 ; 0003 0054     if (measure_mode == INIT_MODE) {
00197e 930a      	ST   -Y,R16
                 ;	measure_mode -> Y+1
                 ;	i -> R16
00197f 81a9      	LDD  R26,Y+1
001980 30a1      	CPI  R26,LOW(0x1)
001981 f4a1      	BRNE _0x60019
                 ; 0003 0055         sync_eeprom_ds1820();
001982 df70      	RCALL _sync_eeprom_ds1820
                 ; 0003 0056         for(i = 0; i < ds1820_devices; i++) {
001983 e000      	LDI  R16,LOW(0)
                 _0x6001B:
                +
001984 91e0 0193+LDS R30 , _prim_par + 51
                 	__GETB1MN _prim_par,51
001986 170e      	CP   R16,R30
001987 f470      	BRSH _0x6001C
                 ; 0003 0057             ds1820_set_resolution(&ds1820_rom_codes[i][0], MAX_ACCURACY);
001988 940e 2bac 	CALL SUBOPT_0x6C
00198a e0e2      	LDI  R30,LOW(2)
00198b 93ea      	ST   -Y,R30
00198c d131      	RCALL _ds1820_set_resolution
                 ; 0003 0058             delay_ms (DS1820_ALL_DELAY);
00198d 940e 2944 	CALL SUBOPT_0x6
                 ; 0003 0059             // tmp_ret = ds1820_get_resolution(&ds1820_rom_codes[i][0], &resolution);
                 ; 0003 005A             ds1820_run_measure(&ds1820_rom_codes[i][0]);
00198f 940e 2bac 	CALL SUBOPT_0x6C
001991 d08d      	RCALL _ds1820_run_measure
                 ; 0003 005B             delay_ms (DS1820_ALL_DELAY);
001992 940e 2944 	CALL SUBOPT_0x6
                 ; 0003 005C     }    }
001994 5f0f      	SUBI R16,-1
001995 cfee      	RJMP _0x6001B
                 _0x6001C:
                 ; 0003 005D     // Вычитываем значение каждого термометра и сразу запускаем его на измерение
                 ; 0003 005E     for (i = 0; i < ds1820_devices; i++) {
                 _0x60019:
001996 e000      	LDI  R16,LOW(0)
                 _0x6001E:
                +
001997 91e0 0193+LDS R30 , _prim_par + 51
                 	__GETB1MN _prim_par,51
001999 170e      	CP   R16,R30
00199a f478      	BRSH _0x6001F
                 ; 0003 005F         int curr_t = ds1820_temperature_10(&ds1820_rom_codes[i][0]);    // Адрес термометра [i] начинается с нулевой позиции [0]
                 ; 0003 0060         rectification (curr_t, i, measure_mode);
00199b 9722      	SBIW R28,2
                 ;	measure_mode -> Y+3
                 ;	curr_t -> Y+0
00199c 940e 2bac 	CALL SUBOPT_0x6C
00199e d0c9      	RCALL _ds1820_temperature_10
00199f 83e8      	ST   Y,R30
0019a0 83f9      	STD  Y+1,R31
0019a1 93fa      	ST   -Y,R31
0019a2 93ea      	ST   -Y,R30
0019a3 930a      	ST   -Y,R16
0019a4 81ee      	LDD  R30,Y+6
0019a5 93ea      	ST   -Y,R30
0019a6 df7c      	RCALL _rectification
                 ; 0003 0061         // delay_ms(10);
                 ; 0003 0062     }
0019a7 9622      	ADIW R28,2
0019a8 5f0f      	SUBI R16,-1
0019a9 cfed      	RJMP _0x6001E
                 _0x6001F:
                 ; 0003 0063     // Здесь есть возможный баг, связанный с тем, что в датчике температуры не прописан th и tl
                 ; 0003 0064 }
0019aa 8108      	LDD  R16,Y+0
0019ab c081      	RJMP _0x20E0012
                 ;unsigned char *ds1820_show_spd() {
                 ; 0003 0065 unsigned char *ds1820_show_spd() {
                 _ds1820_show_spd:
                 ; 0003 0066     return (char *) &__ds1820_scratch_pad;
0019ac edea      	LDI  R30,LOW(___ds1820_scratch_pad)
0019ad e0f1      	LDI  R31,HIGH(___ds1820_scratch_pad)
0019ae 9508      	RET
                 ; 0003 0067 }
                 ;// Функция выбора конкретного DALLAS
                 ;unsigned char ds1820_select(unsigned char *addr) {
                 ; 0003 0069 unsigned char ds1820_select(unsigned char *addr) {
                 _ds1820_select:
                 ; 0003 006A 	unsigned char i;
                 ; 0003 006B 	if (w1_init()==0) return 0;		// Инициализируем шину 1Wire
0019af 930a      	ST   -Y,R16
                 ;	*addr -> Y+1
                 ;	i -> R16
0019b0 940e 2e35 	CALL _w1_init
0019b2 30e0      	CPI  R30,0
0019b3 f411      	BRNE _0x60020
0019b4 e0e0      	LDI  R30,LOW(0)
0019b5 c018      	RJMP _0x20E0015
                 ; 0003 006C 	if (addr) {						// Если задан адрес dallas
                 _0x60020:
0019b6 81e9      	LDD  R30,Y+1
0019b7 81fa      	LDD  R31,Y+1+1
0019b8 9730      	SBIW R30,0
0019b9 f079      	BREQ _0x60021
                 ; 0003 006D 		w1_write(0x55);				// Выдаем адрес dallas (8 байт) на шину 1Wire
0019ba e5e5      	LDI  R30,LOW(85)
0019bb 940e 2bef 	CALL SUBOPT_0x78
                 ; 0003 006E 		i=0;
                 ; 0003 006F 		do
                 _0x60023:
                 ; 0003 0070 			w1_write(*(addr++));
0019bd 81a9      	LDD  R26,Y+1
0019be 81ba      	LDD  R27,Y+1+1
0019bf 91ed      	LD   R30,X+
0019c0 83a9      	STD  Y+1,R26
0019c1 83ba      	STD  Y+1+1,R27
0019c2 93ea      	ST   -Y,R30
0019c3 940e 2e7b 	CALL _w1_write
                 ; 0003 0071 		while (++i<8);
0019c5 5f0f      	SUBI R16,-LOW(1)
0019c6 3008      	CPI  R16,8
0019c7 f3a8      	BRLO _0x60023
                 ; 0003 0072 	} else
0019c8 c004      	RJMP _0x60025
                 _0x60021:
                 ; 0003 0073 		w1_write(0xcc);
0019c9 ecec      	LDI  R30,LOW(204)
0019ca 93ea      	ST   -Y,R30
0019cb 940e 2e7b 	CALL _w1_write
                 ; 0003 0074 	return 1;
                 _0x60025:
0019cd e0e1      	LDI  R30,LOW(1)
                 _0x20E0015:
0019ce 8108      	LDD  R16,Y+0
0019cf 9623      	ADIW R28,3
0019d0 9508      	RET
                 ; 0003 0075 }
                 ;// Функция чтения ScratchPAD (ОЗУ) Dallas (8 байт + CRC)
                 ;unsigned char ds1820_read_spd(unsigned char *addr) {
                 ; 0003 0077 unsigned char ds1820_read_spd(unsigned char *addr) {
                 _ds1820_read_spd:
                 ; 0003 0078 	unsigned char i, *p;
                 ; 0003 0079     unsigned char count = 0, result;
                 ; 0003 007A     do {
0019d1 940e 3143 	CALL __SAVELOCR5
                 ;	*addr -> Y+5
                 ;	i -> R16
                 ;	*p -> R17,R18
                 ;	count -> R19
                 ;	result -> R20
0019d3 e030      	LDI  R19,0
                 _0x60027:
                 ; 0003 007B         ds1820_select(addr);                	// Выбираем конкретный Dallas
0019d4 81ed      	LDD  R30,Y+5
0019d5 81fe      	LDD  R31,Y+5+1
0019d6 940e 2bf4 	CALL SUBOPT_0x79
                 ; 0003 007C         w1_write(0xbe);							// Даем команду "Чтение памяти"
0019d8 ebee      	LDI  R30,LOW(190)
0019d9 940e 2bef 	CALL SUBOPT_0x78
                 ; 0003 007D         i = 0;
                 ; 0003 007E         p = (char *) &__ds1820_scratch_pad;		// Устанавливаем указатель на ОЗУ текущего Dallas
                +
0019db ed1a     +LDI R17 , LOW ( ___ds1820_scratch_pad )
0019dc e021     +LDI R18 , HIGH ( ___ds1820_scratch_pad )
                 	__POINTWRM 17,18,___ds1820_scratch_pad
                 ; 0003 007F         do
                 _0x6002A:
                 ; 0003 0080             *(p++)=w1_read();
0019dd 932f      	PUSH R18
0019de 931f      	PUSH R17
                +
0019df 5f1f     +SUBI R17 , LOW ( - 1 )
0019e0 4f2f     +SBCI R18 , HIGH ( - 1 )
                 	__ADDWRN 17,18,1
0019e1 940e 2e76 	CALL _w1_read
0019e3 91af      	POP  R26
0019e4 91bf      	POP  R27
0019e5 93ec      	ST   X,R30
                 ; 0003 0081         while (++i<9);
0019e6 5f0f      	SUBI R16,-LOW(1)
0019e7 3009      	CPI  R16,9
0019e8 f3a0      	BRLO _0x6002A
                 ; 0003 0082         // Сравнение контрольной суммы на 9-м байте с подсчитанным в ОЗУ. Если все в порядке, возвращаем ненулевое значение
                 ; 0003 0083         result = !w1_dow_crc8(&__ds1820_scratch_pad,9);
0019e9 edea      	LDI  R30,LOW(___ds1820_scratch_pad)
0019ea e0f1      	LDI  R31,HIGH(___ds1820_scratch_pad)
0019eb 93fa      	ST   -Y,R31
0019ec 93ea      	ST   -Y,R30
0019ed e0e9      	LDI  R30,LOW(9)
0019ee 93ea      	ST   -Y,R30
0019ef 940e 2ef5 	CALL _w1_dow_crc8
0019f1 940e 2f59 	CALL __LNEGB1
0019f3 2f4e      	MOV  R20,R30
                 ; 0003 0084         count++;
0019f4 5f3f      	SUBI R19,-1
                 ; 0003 0085     } while	((result == 0) && (count < 3));
0019f5 3040      	CPI  R20,0
0019f6 f411      	BRNE _0x6002C
0019f7 3033      	CPI  R19,3
0019f8 f008      	BRLO _0x6002D
                 _0x6002C:
0019f9 c001      	RJMP _0x60028
                 _0x6002D:
0019fa cfd9      	RJMP _0x60027
                 _0x60028:
                 ; 0003 0086     return result;
0019fb 2fe4      	MOV  R30,R20
0019fc 940e 314a 	CALL __LOADLOCR5
0019fe 940c 1db1 	JMP  _0x20E000F
                 ; 0003 0087 }
                 ;// Функция загоняющая ScratchPAD в ОЗУ Dallas (3 байта)
                 ;unsigned char ds1820_write_spd(unsigned char *addr) {
                 ; 0003 0089 unsigned char ds1820_write_spd(unsigned char *addr) {
                 _ds1820_write_spd:
                 ; 0003 008A 	register unsigned char i;
                 ; 0003 008B 	unsigned char *p;
                 ; 0003 008C 	if (ds1820_select(addr)==0) return 0;	// Выбираем конкретный Dallas
001a00 940e 3145 	CALL __SAVELOCR3
                 ;	*addr -> Y+3
                 ;	i -> R16
                 ;	*p -> R17,R18
001a02 81eb      	LDD  R30,Y+3
001a03 81fc      	LDD  R31,Y+3+1
001a04 940e 2bf4 	CALL SUBOPT_0x79
001a06 30e0      	CPI  R30,0
001a07 f411      	BRNE _0x6002E
001a08 e0e0      	LDI  R30,LOW(0)
001a09 c011      	RJMP _0x20E0013
                 ; 0003 008D     w1_write(0x4e);                         // Команда на запись в ОЗУ
                 _0x6002E:
001a0a e4ee      	LDI  R30,LOW(78)
001a0b 940e 2bef 	CALL SUBOPT_0x78
                 ; 0003 008E     i=0;
                 ; 0003 008F     p=(char *) &__ds1820_scratch_pad.temp_high; // Устанавливаем указатель на 2-й бат структуры Th
                +
001a0d ed1c     +LDI R17 , LOW ( ___ds1820_scratch_pad + 2 )
001a0e e021     +LDI R18 , HIGH ( ___ds1820_scratch_pad + 2 )
                 	__POINTWRMN 17,18,___ds1820_scratch_pad,2
                 ; 0003 0090     do
                 _0x60030:
                 ; 0003 0091         w1_write(*(p++));
                +
001a0f 2fa1     +MOV R26 , R17
001a10 2fb2     +MOV R27 , R18
                 	__GETW2R 17,18
                +
001a11 5f1f     +SUBI R17 , LOW ( - 1 )
001a12 4f2f     +SBCI R18 , HIGH ( - 1 )
                 	__ADDWRN 17,18,1
001a13 91ec      	LD   R30,X
001a14 93ea      	ST   -Y,R30
001a15 940e 2e7b 	CALL _w1_write
                 ; 0003 0092     while (++i<3);
001a17 5f0f      	SUBI R16,-LOW(1)
001a18 3003      	CPI  R16,3
001a19 f3a8      	BRLO _0x60030
                 ; 0003 0093     return 1;
001a1a e0e1      	LDI  R30,LOW(1)
                 _0x20E0013:
001a1b 940e 314c 	CALL __LOADLOCR3
                 _0x20E0014:
001a1d 9625      	ADIW R28,5
001a1e 9508      	RET
                 ; 0003 0094 }
                 ;// Функция, дающая команду на измерение заданного Dallas
                 ;unsigned char ds1820_run_measure(unsigned char *addr) {
                 ; 0003 0096 unsigned char ds1820_run_measure(unsigned char *addr) {
                 _ds1820_run_measure:
                 ; 0003 0097 	if (ds1820_select(addr)==0) return 0;	// Выбираем конкретный Dallas
                 ;	*addr -> Y+0
001a1f 81e8      	LD   R30,Y
001a20 81f9      	LDD  R31,Y+1
001a21 940e 2bf4 	CALL SUBOPT_0x79
001a23 30e0      	CPI  R30,0
001a24 f411      	BRNE _0x60032
001a25 e0e0      	LDI  R30,LOW(0)
001a26 c006      	RJMP _0x20E0012
                 ; 0003 0098 	w1_write(0x44);
                 _0x60032:
001a27 e4e4      	LDI  R30,LOW(68)
001a28 93ea      	ST   -Y,R30
001a29 940e 2e7b 	CALL _w1_write
                 ; 0003 0099 	return w1_init();
001a2b 940e 2e35 	CALL _w1_init
                 _0x20E0012:
001a2d 9622      	ADIW R28,2
001a2e 9508      	RET
                 ; 0003 009A }
                 ;// Функция, снимающая показания температуры со ScratchPAD (ОЗУ) Dallas
                 ;int ds1820_temperature(unsigned char *addr) {
                 ; 0003 009C int ds1820_temperature(unsigned char *addr) {
                 _ds1820_temperature:
                 ; 0003 009D     unsigned char values[16] = { 0,6,12,19,25,31,38,44,50,56,63,69,75,81,88,94 };
                 ; 0003 009E     unsigned char fract;
                 ; 0003 009F 	int t10;
                 ; 0003 00A0     if (!ds1820_read_spd(addr)) return NOT_FOUND;         // Если безуспешно, то вовращаем -99.98 градусов
001a2f 9760      	SBIW R28,16
001a30 e180      	LDI  R24,16
001a31 e0a0      	LDI  R26,LOW(0)
001a32 e0b0      	LDI  R27,HIGH(0)
001a33 e1e6      	LDI  R30,LOW(_0x60033*2)
001a34 e1f1      	LDI  R31,HIGH(_0x60033*2)
001a35 940e 3150 	CALL __INITLOCB
001a37 940e 3145 	CALL __SAVELOCR3
                 ;	*addr -> Y+19
                 ;	values -> Y+3
                 ;	fract -> R16
                 ;	t10 -> R17,R18
001a39 89eb      	LDD  R30,Y+19
001a3a 89fc      	LDD  R31,Y+19+1
001a3b 940e 2bf8 	CALL SUBOPT_0x7A
001a3d f419      	BRNE _0x60034
001a3e efe1      	LDI  R30,LOW(55537)
001a3f edf8      	LDI  R31,HIGH(55537)
001a40 c023      	RJMP _0x20E0011
                 ; 0003 00A1     fract = __ds1820_scratch_pad.temp_lsb & 0xF;           // values[fract] = нашей дробной части
                 _0x60034:
001a41 91e0 01da 	LDS  R30,___ds1820_scratch_pad
001a43 70ef      	ANDI R30,LOW(0xF)
001a44 2f0e      	MOV  R16,R30
                 ; 0003 00A2     t10 = __ds1820_scratch_pad.temp_msb;
                +
001a45 9110 01db+LDS R17 , ___ds1820_scratch_pad + 1
                 	__GETBRMN 17,___ds1820_scratch_pad,1
001a47 2722      	CLR  R18
                 ; 0003 00A3 	t10 = (((t10 << 8) | __ds1820_scratch_pad.temp_lsb) >> 4) * 100;
001a48 2ff1      	MOV  R31,R17
001a49 e0e0      	LDI  R30,LOW(0)
001a4a 01df      	MOVW R26,R30
001a4b 91e0 01da 	LDS  R30,___ds1820_scratch_pad
001a4d e0f0      	LDI  R31,0
001a4e 2bea      	OR   R30,R26
001a4f 2bfb      	OR   R31,R27
001a50 940e 2f3a 	CALL __ASRW4
001a52 e6a4      	LDI  R26,LOW(100)
001a53 e0b0      	LDI  R27,HIGH(100)
001a54 940e 2f86 	CALL __MULW12
                +
001a56 2f1e     +MOV R17 , R30
001a57 2f2f     +MOV R18 , R31
                 	__PUTW1R 17,18
                 ; 0003 00A4     t10 += values[fract];
001a58 2fe0      	MOV  R30,R16
001a59 e0f0      	LDI  R31,0
001a5a 01de      	MOVW R26,R28
001a5b 9613      	ADIW R26,3
001a5c 0fae      	ADD  R26,R30
001a5d 1fbf      	ADC  R27,R31
001a5e 91ec      	LD   R30,X
001a5f e0f0      	LDI  R31,0
                +
001a60 0f1e     +ADD R17 , R30
001a61 1f2f     +ADC R18 , R31
                 	__ADDWRR 17,18,30,31
                 ; 0003 00A5 	return t10;
                +
001a62 2fe1     +MOV R30 , R17
001a63 2ff2     +MOV R31 , R18
                 	__GETW1R 17,18
                 _0x20E0011:
001a64 940e 314c 	CALL __LOADLOCR3
001a66 9665      	ADIW R28,21
001a67 9508      	RET
                 ; 0003 00A6 }
                 ;/*
                 ;int ds1820_temperature_debug(unsigned char *addr) {
                 ;    unsigned char values[16] = { 0,6,12,19,25,31,38,44,50,56,63,69,75,81,88,94 };
                 ;    unsigned char fract;
                 ;	int t10;
                 ;    if (!ds1820_read_spd(addr)) return NOT_FOUND;         // Если безуспешно, то вовращаем -99.98 градусов
                 ;    fract = __ds1820_scratch_pad.temp_lsb & 0xF;           // values[fract] = нашей дробной части
                 ;    t10 = __ds1820_scratch_pad.temp_msb;
                 ;	t10 = (t10 << 8) | __ds1820_scratch_pad.temp_lsb;
                 ;    #ifndef NODEBUG
                 ;    printf("{ t10 = %i[%02X]; ", t10, t10);
                 ;    #endif
                 ;    t10 = (t10 >> 4) * 100; printf("t10 = %i[%02X]; ", t10, t10);
                 ;    // t10 = t10 * 100 + values[fract];
                 ;    t10 += values[fract]; printf("%i[%02X]; }", t10, t10);
                 ;	return t10;
                 ;}
                 ;*/
                 ;// Функция, снимающая показания температуры и сразу запускает новые измерения
                 ;int ds1820_temperature_10(unsigned char *addr) {
                 ; 0003 00BA int ds1820_temperature_10(unsigned char *addr) {
                 _ds1820_temperature_10:
                 ; 0003 00BB 	int t10;									// текущее преобразованное значение
                 ; 0003 00BC     t10 = ds1820_temperature(addr);
001a68 931a      	ST   -Y,R17
001a69 930a      	ST   -Y,R16
                 ;	*addr -> Y+2
                 ;	t10 -> R16,R17
001a6a 940e 2bfe 	CALL SUBOPT_0x7B
001a6c dfc2      	RCALL _ds1820_temperature
001a6d 018f      	MOVW R16,R30
                 ; 0003 00BD 	(void) ds1820_run_measure(addr);
001a6e 940e 2bfe 	CALL SUBOPT_0x7B
001a70 dfae      	RCALL _ds1820_run_measure
                 ; 0003 00BE 	return t10;
001a71 01f8      	MOVW R30,R16
001a72 8119      	LDD  R17,Y+1
001a73 8108      	LDD  R16,Y+0
001a74 940c 1f9d 	JMP  _0x20E000E
                 ; 0003 00BF }
                 ;// Функция, снимающая показания температуры со ScratchPAD (ОЗУ) Dallas вместе с Th и Tl
                 ;int ds1820_temperature_10lh(unsigned char *addr, signed char *temp_low, signed char *temp_high) {
                 ; 0003 00C1 int ds1820_temperature_10lh(unsigned char *addr, signed char *temp_low, signed char *temp_high) {
                 ; 0003 00C2 	int t10;									// текущее преобразованное значение
                 ; 0003 00C3     t10 = ds1820_temperature(addr);
                 ;	*addr -> Y+6
                 ;	*temp_low -> Y+4
                 ;	*temp_high -> Y+2
                 ;	t10 -> R16,R17
                 ; 0003 00C4     *temp_low = __ds1820_scratch_pad.temp_low;  // Вовращаем нижнюю границу Alarm
                 ; 0003 00C5     *temp_high = __ds1820_scratch_pad.temp_high;// Возвращаем верхнюю границу Alarm
                 ; 0003 00C6 	(void) ds1820_run_measure(addr);
                 ; 0003 00C7 	return t10;
                 ; 0003 00C8 }
                 ;// Функция установки параметров ТН и ТL выбранного DALLAS
                 ;unsigned char ds1820_set_alarm(unsigned char *addr, signed char temp_low, signed char temp_high) {
                 ; 0003 00CA unsigned char ds1820_set_alarm(unsigned char *addr, signed char temp_low, signed char temp_high) {
                 _ds1820_set_alarm:
                 ; 0003 00CB 	if (!ds1820_read_spd(addr)) return 0;
                 ;	*addr -> Y+2
                 ;	temp_low -> Y+1
                 ;	temp_high -> Y+0
001a76 940e 2c03 	CALL SUBOPT_0x7C
001a78 f419      	BRNE _0x60035
001a79 e0e0      	LDI  R30,LOW(0)
001a7a 940c 1f9d 	JMP  _0x20E000E
                 ; 0003 00CC     __ds1820_scratch_pad.temp_low = temp_low;
                 _0x60035:
001a7c 81e9      	LDD  R30,Y+1
                +
001a7d 93e0 01dd+STS ___ds1820_scratch_pad + 3 , R30
                 	__PUTB1MN ___ds1820_scratch_pad,3
                 ; 0003 00CD     __ds1820_scratch_pad.temp_high = temp_high;
001a7f 81e8      	LD   R30,Y
                +
001a80 93e0 01dc+STS ___ds1820_scratch_pad + 2 , R30
                 	__PUTB1MN ___ds1820_scratch_pad,2
                 ; 0003 00CE     if (ds1820_write_spd(addr)==0) return 0;
001a82 940e 2bfe 	CALL SUBOPT_0x7B
001a84 df7b      	RCALL _ds1820_write_spd
001a85 30e0      	CPI  R30,0
001a86 f419      	BRNE _0x60036
001a87 e0e0      	LDI  R30,LOW(0)
001a88 940c 1f9d 	JMP  _0x20E000E
                 ; 0003 00CF 	if (!ds1820_read_spd(addr)) return 0;
                 _0x60036:
001a8a 940e 2c03 	CALL SUBOPT_0x7C
001a8c f419      	BRNE _0x60037
001a8d e0e0      	LDI  R30,LOW(0)
001a8e 940c 1f9d 	JMP  _0x20E000E
                 ; 0003 00D0 	if ((__ds1820_scratch_pad.temp_low!=temp_low) || (__ds1820_scratch_pad.temp_high!=temp_high)) return 0;
                 _0x60037:
                +
001a90 91a0 01dd+LDS R26 , ___ds1820_scratch_pad + 3
                 	__GETB2MN ___ds1820_scratch_pad,3
001a92 81e9      	LDD  R30,Y+1
001a93 17ea      	CP   R30,R26
001a94 f429      	BRNE _0x60039
                +
001a95 91a0 01dc+LDS R26 , ___ds1820_scratch_pad + 2
                 	__GETB2MN ___ds1820_scratch_pad,2
001a97 81e8      	LD   R30,Y
001a98 17ea      	CP   R30,R26
001a99 f019      	BREQ _0x60038
                 _0x60039:
001a9a e0e0      	LDI  R30,LOW(0)
001a9b 940c 1f9d 	JMP  _0x20E000E
                 ; 0003 00D1     if (ds1820_select(addr)==0) return 0;
                 _0x60038:
001a9d 81ea      	LDD  R30,Y+2
001a9e 81fb      	LDD  R31,Y+2+1
001a9f 940e 2bf4 	CALL SUBOPT_0x79
001aa1 30e0      	CPI  R30,0
001aa2 f419      	BRNE _0x6003B
001aa3 e0e0      	LDI  R30,LOW(0)
001aa4 940c 1f9d 	JMP  _0x20E000E
                 ; 0003 00D2 	w1_write(0x48);                             // Даем команду на запись в ПЗУ
                 _0x6003B:
001aa6 940e 2c06 	CALL SUBOPT_0x7D
                 ; 0003 00D3 	delay_ms(15);
                 ; 0003 00D4 	return w1_init();
001aa8 940e 2e35 	CALL _w1_init
001aaa 940c 1f9d 	JMP  _0x20E000E
                 ; 0003 00D5 }
                 ;// Функция добавлена 12.03.2010
                 ;// Функция, вычитывающая из указанного Dallas temp_high и temp_low
                 ;// Возвращает в случае успешного чтения ненулевое значение
                 ;// Функция чтения параметров ТН и ТL выбранного DALLAS
                 ;signed char ds1820_get_alarm(unsigned char *addr, signed char *temp_low, signed char *temp_high) {
                 ; 0003 00DA signed char ds1820_get_alarm(unsigned char *addr, signed char *temp_low, signed char *temp_high) {
                 _ds1820_get_alarm:
                 ; 0003 00DB     if (!ds1820_read_spd(addr)) return -98;         // Если безуспешно, то вовращаем -99.98 градусов
                 ;	*addr -> Y+4
                 ;	*temp_low -> Y+2
                 ;	*temp_high -> Y+0
001aac 81ec      	LDD  R30,Y+4
001aad 81fd      	LDD  R31,Y+4+1
001aae 940e 2bf8 	CALL SUBOPT_0x7A
001ab0 f411      	BRNE _0x6003C
001ab1 e9ee      	LDI  R30,LOW(158)
001ab2 c009      	RJMP _0x20E0010
                 ; 0003 00DC 	// if (ds1820_read_spd(addr)==0) return 0;     // Вычитываем ScratchPAD (ОЗУ) Dallas
                 ; 0003 00DD     *temp_low = __ds1820_scratch_pad.temp_low;  // Вовращаем нижнюю границу Alarm
                 _0x6003C:
                +
001ab3 91e0 01dd+LDS R30 , ___ds1820_scratch_pad + 3
                 	__GETB1MN ___ds1820_scratch_pad,3
001ab5 81aa      	LDD  R26,Y+2
001ab6 81bb      	LDD  R27,Y+2+1
001ab7 93ec      	ST   X,R30
                 ; 0003 00DE     *temp_high = __ds1820_scratch_pad.temp_high;// Возвращаем верхнюю границу Alarm
                +
001ab8 91e0 01dc+LDS R30 , ___ds1820_scratch_pad + 2
                 	__GETB1MN ___ds1820_scratch_pad,2
001aba 940e 2c0d 	CALL SUBOPT_0x7E
                 ; 0003 00DF     // print_scratch_pad();
                 ; 0003 00E0     return 1;
                 _0x20E0010:
001abc 9626      	ADIW R28,6
001abd 9508      	RET
                 ; 0003 00E1 }
                 ;// Функция установки точности выбранного DALLAS
                 ;unsigned char ds1820_set_resolution(unsigned char *addr, unsigned char resolution) {
                 ; 0003 00E3 unsigned char ds1820_set_resolution(unsigned char *addr, unsigned char resolution) {
                 _ds1820_set_resolution:
                 ; 0003 00E4     unsigned char temp_resolution;
                 ; 0003 00E5     if (!ds1820_read_spd(addr)) return 0; // Вычитываем память выбранного DALLAS
001abe 930a      	ST   -Y,R16
                 ;	*addr -> Y+2
                 ;	resolution -> Y+1
                 ;	temp_resolution -> R16
001abf 940e 2c03 	CALL SUBOPT_0x7C
001ac1 f421      	BRNE _0x6003D
001ac2 e0e0      	LDI  R30,LOW(0)
001ac3 8108      	LDD  R16,Y+0
001ac4 940c 1f9d 	JMP  _0x20E000E
                 ; 0003 00E6     temp_resolution = (resolution << 5) | 0x1F;
                 _0x6003D:
001ac6 81e9      	LDD  R30,Y+1
001ac7 95e2      	SWAP R30
001ac8 7fe0      	ANDI R30,0xF0
001ac9 0fee      	LSL  R30
001aca 61ef      	ORI  R30,LOW(0x1F)
001acb 2f0e      	MOV  R16,R30
                 ; 0003 00E7     // temp_resolution = 0x7F;
                 ; 0003 00E8     __ds1820_scratch_pad.conf = temp_resolution;
                +
001acc 9300 01de+STS ___ds1820_scratch_pad + 4 , R16
                 	__PUTBMRN ___ds1820_scratch_pad,4,16
                 ; 0003 00E9     // print_scratch_pad();
                 ; 0003 00EA     if (ds1820_write_spd(addr)==0) return 0;
001ace 940e 2bfe 	CALL SUBOPT_0x7B
001ad0 df2f      	RCALL _ds1820_write_spd
001ad1 30e0      	CPI  R30,0
001ad2 f421      	BRNE _0x6003E
001ad3 e0e0      	LDI  R30,LOW(0)
001ad4 8108      	LDD  R16,Y+0
001ad5 940c 1f9d 	JMP  _0x20E000E
                 ; 0003 00EB     ds1820_read_spd(addr);
                 _0x6003E:
001ad7 940e 2bfe 	CALL SUBOPT_0x7B
001ad9 def7      	RCALL _ds1820_read_spd
                 ; 0003 00EC     if (__ds1820_scratch_pad.conf!=temp_resolution) return 0;
                +
001ada 91a0 01de+LDS R26 , ___ds1820_scratch_pad + 4
                 	__GETB2MN ___ds1820_scratch_pad,4
001adc 170a      	CP   R16,R26
001add f021      	BREQ _0x6003F
001ade e0e0      	LDI  R30,LOW(0)
001adf 8108      	LDD  R16,Y+0
001ae0 940c 1f9d 	JMP  _0x20E000E
                 ; 0003 00ED     // print_scratch_pad();
                 ; 0003 00EE 	ds1820_select(addr);
                 _0x6003F:
001ae2 81ea      	LDD  R30,Y+2
001ae3 81fb      	LDD  R31,Y+2+1
001ae4 940e 2bf4 	CALL SUBOPT_0x79
                 ; 0003 00EF 	w1_write(0x48);             // Записываем в ПЗУ Dallas
001ae6 940e 2c06 	CALL SUBOPT_0x7D
                 ; 0003 00F0 	delay_ms(15);
                 ; 0003 00F1     return w1_init();
001ae8 940e 2e35 	CALL _w1_init
001aea 8108      	LDD  R16,Y+0
001aeb 940c 1f9d 	JMP  _0x20E000E
                 ; 0003 00F2 }
                 ;// Функция чтения параметров ТН и ТL выбранного DALLAS
                 ;signed char ds1820_get_resolution(unsigned char *addr, unsigned char *resolution) {
                 ; 0003 00F4 signed char ds1820_get_resolution(unsigned char *addr, unsigned char *resolution) {
                 _ds1820_get_resolution:
                 ; 0003 00F5     if (!ds1820_read_spd(addr)) return -99;         // Если безуспешно, то вовращаем -99.98 градусов
                 ;	*addr -> Y+2
                 ;	*resolution -> Y+0
001aed 940e 2c03 	CALL SUBOPT_0x7C
001aef f419      	BRNE _0x60040
001af0 e9ed      	LDI  R30,LOW(157)
001af1 940c 1f9d 	JMP  _0x20E000E
                 ; 0003 00F6 	// if (ds1820_read_spd(addr)==0) return 0;     // Вычитываем ScratchPAD (ОЗУ) Dallas
                 ; 0003 00F7     // *resolution = __ds1820_scratch_pad.conf >> 5;  // Вовращаем resolution
                 ; 0003 00F8     *resolution = __ds1820_scratch_pad.conf;  // Вовращаем resolution
                 _0x60040:
                +
001af3 91e0 01de+LDS R30 , ___ds1820_scratch_pad + 4
                 	__GETB1MN ___ds1820_scratch_pad,4
001af5 940e 2c0d 	CALL SUBOPT_0x7E
                 ; 0003 00F9     // print_scratch_pad();
                 ; 0003 00FA     return 1;
001af7 940c 1f9d 	JMP  _0x20E000E
                 ; 0003 00FB }
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include "robowater.h"
                 ;#include "valcoder.h"
                 ;
                 ;// byte valcoder0, valcoder1;      // Биты прерываний
                 ;// word counter0, counter1;        // счетчик кол-ва прерываний от valcoder
                 ;// int valcoder;                   // Направление вращения
                 ;signed char valcoder;              // Направление вращения
                 ;
                 ;// Внешние прерывания Valcoder'а
                 ;interrupt [EXT_INT0] void ext_int0_isr(void) {
                 ; 0004 000C interrupt [2] void ext_int0_isr(void) {
                 
                 	.CSEG
                 _ext_int0_isr:
001af9 93ea      	ST   -Y,R30
001afa b7ef      	IN   R30,SREG
001afb 93ea      	ST   -Y,R30
                 ; 0004 000D     // counter0++;
                 ; 0004 000E     // valcoder0 = 1;
                 ; 0004 000F     // Проверяем, обработали ли прокрутку valcoder'а
                 ; 0004 0010     // if (valcoder == VALCODER_NO_ROTATE) {
                 ; 0004 0011     // Проверяем VALCODER_PIN1
                 ; 0004 0012     if (VALCODER_PIN1) valcoder--; else valcoder++;
001afc 9b83      	SBIS 0x10,3
001afd c004      	RJMP _0x80003
001afe 91e0 021f 	LDS  R30,_valcoder
001b00 50e1      	SUBI R30,LOW(1)
001b01 c003      	RJMP _0x80005
                 _0x80003:
001b02 91e0 021f 	LDS  R30,_valcoder
001b04 5fef      	SUBI R30,-LOW(1)
                 _0x80005:
001b05 93e0 021f 	STS  _valcoder,R30
                 ; 0004 0013     // }
                 ; 0004 0014     // Устраняем дребезг прерывания
                 ; 0004 0015     GIFR |= (1<<6);
001b07 b7ea      	IN   R30,0x3A
001b08 64e0      	ORI  R30,0x40
001b09 bfea      	OUT  0x3A,R30
                 ; 0004 0016     // Запрещаем прерывание INT0 (выставляем 0 в 6 бите)
                 ; 0004 0017     GICR &= ~(1<<6);
001b0a b7eb      	IN   R30,0x3B
001b0b 7bef      	ANDI R30,0xBF
001b0c c005      	RJMP _0x80006
                 ; 0004 0018     // Ставим небольшую задержку
                 ; 0004 0019     // delay_ms(VALCODER_INT_DELAY);
                 ; 0004 001A }
                 ;interrupt [EXT_INT1] void ext_int1_isr(void) {
                 ; 0004 001B interrupt [3] void ext_int1_isr(void) {
                 _ext_int1_isr:
001b0d 93ea      	ST   -Y,R30
001b0e b7ef      	IN   R30,SREG
001b0f 93ea      	ST   -Y,R30
                 ; 0004 001C     // counter1++;
                 ; 0004 001D     // valcoder1 = 1;
                 ; 0004 001E     // Прежде чем разрешать прерывание, делаем небольшую задержку
                 ; 0004 001F     // delay_ms(VALCODER_INT_DELAY);
                 ; 0004 0020     // Разрешаем прерывание INT0 (выставляем 1 в 6 бите)
                 ; 0004 0021     GICR |= (1<<6);
001b10 b7eb      	IN   R30,0x3B
001b11 64e0      	ORI  R30,0x40
                 _0x80006:
001b12 bfeb      	OUT  0x3B,R30
                 ; 0004 0022     // GIFR |= (1<<7);
                 ; 0004 0023 }
001b13 91e9      	LD   R30,Y+
001b14 bfef      	OUT  SREG,R30
001b15 91e9      	LD   R30,Y+
001b16 9518      	RETI
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;// DS1307 Real Time Clock functions
                 ;#include <ds1307.h>
                 ;#include <delay.h>
                 ;
                 ;#include "robowater.h"
                 ;#include "menu.h"
                 ;#include "spd1820.h"
                 ;#include "alarm.h"
                 ;#include "at2404.h"
                 ;
                 ;// Объявление макроподстановок
                 ;// #define MENU_PARAMETERS 12
                 ;
                 ;// Структура основных переменных
                 ;// extern struct st_prim_par prim_par;
                 ;
                 ;// signed char curr_menu_level1 = 0, next_menu_level1 = 1;  // Текущий и следующий пункт меню
                 ;struct st_array_pos curr_menu;                // Позиции в меню
                 ;struct st_array_pos dt_curr_menu;             // Здесь сохраняем главное меню во время входа в меню установки даты и времени
                 ;// struct st_array_pos menu_level2;  // Позиции в меню второго уровня
                 ;//    {1, e_clatsman, "ЗИМА "},              // [9] Режим обогрева (1 - зима, 0 -лето)
                 ;struct st_parameter main_menu[NUM_MENU]= {   // Меню первого уровня
                 ;    {-9900, e_temperature, 0, 1},     // [0]
                 ;    {0, e_isfour, 1, 2},              // [1] Основной режим (00 - стоп, 01 - прогрев, 10 - остановка, 11 - пуск)
                 ;    {1, e_winter, 0, 3},              // [2] ЗИМА
                 ;    {0, e_dt, 1, 4},                  // [3] Установка даты и времени
                 ;    {0, e_empty, 1, 5},               // [4] Вход в меню просмотра параметров
                 ;    {0, e_alarm, 0, 6},               // [5] АВАРИЙ НЕТ
                 ;    {0, e_empty, 0, 7}                // [6] Вход в меню тонких настроек
                 ;};
                 
                 	.DSEG
                 ;
                 ;struct st_parameter sdt[NUM_DT]= {   // Меню Установки времени и даты
                 ;    {20, e_hour, 1, 8},             // [0]
                 ;    {05, e_minute, 1, 9},           // [1]
                 ;    {19, e_day, 1, 10},             // [2]
                 ;    {03, e_month, 1, 11},           // [3]
                 ;    {11, e_year, 1, 12},            // [4]
                 ;    {0, e_winter, 1, 41},           // [5] ЗИМА
                 ;    {0, e_password, 1, 42}          // [6]
                 ;  };
                 ;
                 ;struct st_parameter parameters[NUM_PARAMETERS]= {
                 ;    {2200, e_room, 1, 15},          // [0] Заданная температура воздуха TA_out_prs
                 ;    {2000, e_temperature, 0, 13},   // [1] Температура воздуха в помещении
                 ;    {-350, e_temperature, 0, 14},   // [2] Температура воздуха на улице
                 ;    {7200, e_temperature, 0, 16},   // [3] Температура воды на входе
                 ;    {6500, e_temperature, 0, 17},   // [4] Температура воды на выходе
                 ;    {40, e_percent, 0, 18},         // [5] Текущее состояние крана (АЦП)
                 ;    {42, e_percent, 1, 19},         // [6] Заданное состояние крана (расчетное PWM)
                 ;    {95, e_percent, 0, 20},         // [7] Текущее состояние вентилятора (АЦП)
                 ;    {100, e_percent, 1, 21},        // [8] Заданное состояние вентилятора (расчетное PWM)
                 ;    {1, e_clatsman, 0, 22},         // [9] Положение воздушной заслонки (0 - открыта, 1 - закрыта)
                 ;    {1, e_clatsman, 1, 23}          // [10] Работа насоса (1 - вкл., 0 - выкл.)
                 ;};
                 ;struct st_parameter settings[NUM_SETTINGS]={
                 ;    {-2500, e_world, 1, 24},        // [0] температура воздуха мин TA_in_Min
                 ;    {3500, e_water, 1, 25},         // [1] температура воды СТОП TW_out_Stop
                 ;    {1000, e_water, 1, 26},         // [2] температура воды выход TW_out_Min
                 ;    {1500, e_room, 1, 27},          // [3] температура воздуха мин TA_out_Min
                 ;    {30, e_stime, 1, 28},           // [4] время прогрева T_z ?
                 ;    {10, e_stime, 1, 29},           // [5] время интегрирования T_int
                 ;    {1, e_coef, 1, 30},             // [6] Коэффициэнт усиления Ku
                 ;    {0, e_coef, 1, 31},             // [7] Коэффициэнт Интегрирования Ki
                 ;    {0, e_coef, 1, 32},             // [8] Коэффициэнт Дифференцирования Kd
                 ;    {0, e_temperature, 1, 33},      // [9] Смещение Ta2
                 ;    {0, e_scale, 1, 34},            // [10] Множитель Ta2
                 ;    {0, e_temperature, 1, 35},      // [11] Смещение Ta1
                 ;    {0, e_scale, 1, 36},            // [12] Множитель Ta1
                 ;    {0, e_temperature, 1, 37},      // [13] Смещение Tw1
                 ;    {0, e_scale, 1, 38},            // [14] Множитель Tw1
                 ;    {0, e_temperature, 1, 39},      // [15] Смещение Tw2
                 ;    {0, e_scale, 1, 40}             // [16] Множитель Tw2
                 ;};
                 ;#define ALERT_POS 61
                 ;struct st_parameter alerts[MAX_ALERTS] = {
                 ;    {0, e_alert, 0, ALERT_POS},
                 ;    {0, e_alert, 0, ALERT_POS + 1},
                 ;    {0, e_alert, 0, ALERT_POS + 2},
                 ;    {0, e_alert, 0, ALERT_POS + 3},
                 ;    {0, e_alert, 0, ALERT_POS + 4},
                 ;    {0, e_alert, 0, ALERT_POS + 5},
                 ;    {0, e_alert, 0, ALERT_POS + 6},
                 ;    {0, e_alert, 0, ALERT_POS + 7},
                 ;    {0, e_alert, 0, ALERT_POS + 8},
                 ;    {0, e_alert, 0, ALERT_POS + 9},
                 ;    {0, e_alert, 0, ALERT_POS + 10},
                 ;    {0, e_alert, 0, ALERT_POS + 11}
                 ;};
                 ;flash lcd_str all_menu_str[] = {
                 ;        "Помещение ",  // [0]
                 ;        "РЕЖИМ ",      // [1]
                 ;        "СЕЗОН ",      // [2]
                 ;        "Уст. ",       // [3]
                 ;        "Параметры ",  // [4]
                 ;        "АВАРИЙ ",      // [5]
                 ;        "НАСТРОЙКА...",    // [6]
                 ;        "Уст.Час. ",   // [7]
                 ;        "Уст Мин ",    // [8]
                 ;        "Уст.день. ",  // [9]
                 ;        "Уст Мес. ",   // [10]
                 ;        "Уст ГОД. ",   // [11]
                 ;        "ПОМЕЩ. ",     // [12]
                 ;        "УЛ.Т ",       // [13]
                 ;        "Уст.Т ",      // [14] TA_out_prs
                 ;        "Вод ВХ. ",    // [15]
                 ;        "Вод ВЫХ.",    // [16]
                 ;        "КРАН ",       // [17]
                 ;        "УСТ.КРАН. ",  // [18]
                 ;        "ВЕНТИЛЯТОР ", // [19]
                 ;        "Уст. ВЕНТ. ", // [20]
                 ;        "ЗАСЛ. ",      // [21]
                 ;        "НАСОС ",      // [22]
                 ;        "TA IN Min ",  // [23] TA_in_Min
                 ;        "TW STOP ",    // [24] TW_out_Stop
                 ;        "TW Min ",     // [25] TW_out_Min
                 ;        "TA Min ",     // [26] TA_out_Min
                 ;        "ПРОГРЕВ ",    // [27] T_z
                 ;        "ВР.ИНТ. ",     // [28] T_int
                 ;        "КУ=",         // [29]
                 ;        "КИ=",         // [30]
                 ;        "КД=",         // [31]
                 ;        "См.П.=",      // [32] 0xFE
                 ;        "Шк.П.=",     // [33] 0xFE
                 ;        "См.Ул.=",    // [34] 0xFD
                 ;        "Шк.Ул.=",    // [35] 0xFD
                 ;        "См.ВВх=",    // [36] 0xFC
                 ;        "Шк.ВВх=",    // [37] 0xFC
                 ;        "См.ВВых=",   // [38] 0xFB
                 ;        "Шк.ВВых=",   // [39] 0xFB
                 ;        "Сезон=",     // [40]
                 ;        "Пароль="     // [41]
                 ;
                 ;    };
                 ;char linestr[20];           // Строка для LCD
                 ;bit need_eeprom_write;      // Флаг, если необходимо записать в EEPROM
                 ;// Функция синхронизации структуры основных переменных
                 ;void sync_set_par(byte sync) {
                 ; 0005 008C void sync_set_par(byte sync) {
                 
                 	.CSEG
                 _sync_set_par:
                 ; 0005 008D     register byte i, j;
                 ; 0005 008E     // Если входим в меню
                 ; 0005 008F     if (sync == SYNC_TO_MENU) {
001b17 931a      	ST   -Y,R17
001b18 930a      	ST   -Y,R16
                 ;	sync -> Y+2
                 ;	i -> R16
                 ;	j -> R17
001b19 81aa      	LDD  R26,Y+2
001b1a 30a1      	CPI  R26,LOW(0x1)
001b1b f011      	BREQ PC+3
001b1c 940c 1bb6 	JMP _0xA0008
                 ; 0005 0090         main_menu[2].val_data = prim_par.season;
                +
001b1e e3ae     +LDI R26 , LOW ( _main_menu + 10 )
001b1f e0b2     +LDI R27 , HIGH ( _main_menu + 10 )
                 	__POINTW2MN _main_menu,10
                +
001b20 91e0 0190+LDS R30 , _prim_par + 48
                 	__GETB1MN _prim_par,48
001b22 940e 2ab2 	CALL SUBOPT_0x3F
                 ; 0005 0091         settings[0].val_data = prim_par.TA_in_Min;
001b24 940e 29bf 	CALL SUBOPT_0x1B
001b26 93e0 0311 	STS  _settings,R30
001b28 93f0 0312 	STS  _settings+1,R31
                 ; 0005 0092         settings[1].val_data = prim_par.TW_out_Stop;
001b2a 940e 2ac0 	CALL SUBOPT_0x42
                +
001b2c 93e0 0316+STS _settings + 5 , R30
001b2e 93f0 0317+STS _settings + 5 + 1 , R31
                 	__PUTW1MN _settings,5
                 ; 0005 0093         settings[2].val_data = prim_par.TW_out_Min;
                +
001b30 91e0 017a+LDS R30 , _prim_par + 26
001b32 91f0 017b+LDS R31 , _prim_par + 26 + 1
                 	__GETW1MN _prim_par,26
                +
001b34 93e0 031b+STS _settings + 10 , R30
001b36 93f0 031c+STS _settings + 10 + 1 , R31
                 	__PUTW1MN _settings,10
                 ; 0005 0094         settings[3].val_data = prim_par.TA_out_Min;
                +
001b38 91e0 0180+LDS R30 , _prim_par + 32
001b3a 91f0 0181+LDS R31 , _prim_par + 32 + 1
                 	__GETW1MN _prim_par,32
                +
001b3c 93e0 0320+STS _settings + 15 , R30
001b3e 93f0 0321+STS _settings + 15 + 1 , R31
                 	__PUTW1MN _settings,15
                 ; 0005 0095         settings[4].val_data = prim_par.T_z;
001b40 940e 2a3f 	CALL SUBOPT_0x2D
                +
001b42 93e0 0325+STS _settings + 20 , R30
001b44 93f0 0326+STS _settings + 20 + 1 , R31
                 	__PUTW1MN _settings,20
                 ; 0005 0096         settings[5].val_data = prim_par.T_int;
                +
001b46 91e0 0178+LDS R30 , _prim_par + 24
001b48 91f0 0179+LDS R31 , _prim_par + 24 + 1
                 	__GETW1MN _prim_par,24
                +
001b4a 93e0 032a+STS _settings + 25 , R30
001b4c 93f0 032b+STS _settings + 25 + 1 , R31
                 	__PUTW1MN _settings,25
                 ; 0005 0097         settings[6].val_data = prim_par.Ku;
001b4e 940e 2b31 	CALL SUBOPT_0x54
                +
001b50 93e0 032f+STS _settings + 30 , R30
001b52 93f0 0330+STS _settings + 30 + 1 , R31
                 	__PUTW1MN _settings,30
                 ; 0005 0098         settings[7].val_data = prim_par.Ki;
                +
001b54 91e0 0172+LDS R30 , _prim_par + 18
001b56 91f0 0173+LDS R31 , _prim_par + 18 + 1
                 	__GETW1MN _prim_par,18
                +
001b58 93e0 0334+STS _settings + 35 , R30
001b5a 93f0 0335+STS _settings + 35 + 1 , R31
                 	__PUTW1MN _settings,35
                 ; 0005 0099         settings[8].val_data = prim_par.Kd;
                +
001b5c 91e0 0174+LDS R30 , _prim_par + 20
001b5e 91f0 0175+LDS R31 , _prim_par + 20 + 1
                 	__GETW1MN _prim_par,20
                +
001b60 93e0 0339+STS _settings + 40 , R30
001b62 93f0 033a+STS _settings + 40 + 1 , R31
                 	__PUTW1MN _settings,40
                 ; 0005 009A         if (mode.run == 0) {
                +
001b64 91e0 01b9+LDS R30 , _mode + 1
                 	__GETB1MN _mode,1
001b66 30e0      	CPI  R30,0
001b67 f411      	BRNE _0xA0009
                 ; 0005 009B             parameters[8].val_data = prim_par.fan_speed  ;
001b68 940e 29b7 	CALL SUBOPT_0x1A
                 ; 0005 009C         };
                 _0xA0009:
                 ; 0005 009D         //parameters[8].val_data = fan_speed;
                 ; 0005 009E         parameters[0].val_data = prim_par.TA_out_prs;
001b6a 940e 2aa9 	CALL SUBOPT_0x3E
                 ; 0005 009F         parameters[10].val_data = mode.pomp;
001b6c 940e 2ab6 	CALL SUBOPT_0x40
                 ; 0005 00A0         // printf("Чтени времени и даты \r\n");
                 ; 0005 00A1         sdt[0].val_data = s_dt.cHH;
001b6e 91e0 01cc 	LDS  R30,_s_dt
001b70 e0f0      	LDI  R31,0
001b71 93e0 02ee 	STS  _sdt,R30
001b73 93f0 02ef 	STS  _sdt+1,R31
                 ; 0005 00A2         sdt[1].val_data = s_dt.cMM;
                +
001b75 efa3     +LDI R26 , LOW ( _sdt + 5 )
001b76 e0b2     +LDI R27 , HIGH ( _sdt + 5 )
                 	__POINTW2MN _sdt,5
                +
001b77 91e0 01cd+LDS R30 , _s_dt + 1
                 	__GETB1MN _s_dt,1
001b79 940e 2ab2 	CALL SUBOPT_0x3F
                 ; 0005 00A3         sdt[2].val_data = s_dt.cdd;
                +
001b7b efa8     +LDI R26 , LOW ( _sdt + 10 )
001b7c e0b2     +LDI R27 , HIGH ( _sdt + 10 )
                 	__POINTW2MN _sdt,10
                +
001b7d 91e0 01d1+LDS R30 , _s_dt + 5
                 	__GETB1MN _s_dt,5
001b7f 940e 2ab2 	CALL SUBOPT_0x3F
                 ; 0005 00A4         sdt[3].val_data = s_dt.cmo;
                +
001b81 efad     +LDI R26 , LOW ( _sdt + 15 )
001b82 e0b2     +LDI R27 , HIGH ( _sdt + 15 )
                 	__POINTW2MN _sdt,15
                +
001b83 91e0 01d0+LDS R30 , _s_dt + 4
                 	__GETB1MN _s_dt,4
001b85 940e 2ab2 	CALL SUBOPT_0x3F
                 ; 0005 00A5         sdt[4].val_data = s_dt.cyy;
                +
001b87 e0a2     +LDI R26 , LOW ( _sdt + 20 )
001b88 e0b3     +LDI R27 , HIGH ( _sdt + 20 )
                 	__POINTW2MN _sdt,20
                +
001b89 91e0 01cf+LDS R30 , _s_dt + 3
                 	__GETB1MN _s_dt,3
001b8b 940e 2ab2 	CALL SUBOPT_0x3F
                 ; 0005 00A6         SEASON = prim_par.season;
                +
001b8d e0a7     +LDI R26 , LOW ( _sdt + 25 )
001b8e e0b3     +LDI R27 , HIGH ( _sdt + 25 )
                 	__POINTW2MN _sdt,25
                +
001b8f 91e0 0190+LDS R30 , _prim_par + 48
                 	__GETB1MN _prim_par,48
001b91 940e 2ab2 	CALL SUBOPT_0x3F
                 ; 0005 00A7         for (i = 0; i < MAX_DS1820; i++) {
001b93 e000      	LDI  R16,LOW(0)
                 _0xA000B:
001b94 3004      	CPI  R16,4
001b95 f4f8      	BRSH _0xA000C
                 ; 0005 00A8             j = 2*i + 9;
001b96 940e 2c12 	CALL SUBOPT_0x7F
                 ; 0005 00A9             settings[j++].val_data = prim_par.elims[i].shift;
001b98 2fe1      	MOV  R30,R17
001b99 5f1f      	SUBI R17,-1
001b9a e0a5      	LDI  R26,LOW(5)
001b9b 9fea      	MUL  R30,R26
001b9c 01f0      	MOVW R30,R0
001b9d 940e 2c19 	CALL SUBOPT_0x80
001b9f 5ae0      	SUBI R30,LOW(-_prim_par)
001ba0 4ffe      	SBCI R31,HIGH(-_prim_par)
001ba1 940e 2bea 	CALL SUBOPT_0x77
001ba3 93ed      	ST   X+,R30
001ba4 93fc      	ST   X,R31
                 ; 0005 00AA             settings[j].val_data = (int)(prim_par.elims[i].scale);
001ba5 e0a5      	LDI  R26,LOW(5)
001ba6 9f1a      	MUL  R17,R26
001ba7 01f0      	MOVW R30,R0
001ba8 940e 2c19 	CALL SUBOPT_0x80
                +
001baa 59ee     +SUBI R30 , LOW ( - _prim_par - ( 2 ) )
001bab 4ffe     +SBCI R31 , HIGH ( - _prim_par - ( 2 ) )
                 	__ADDW1MN _prim_par,2
001bac 81e0      	LD   R30,Z
001bad e0f0      	LDI  R31,0
001bae fde7      	SBRC R30,7
001baf efff      	SER  R31
001bb0 01db      	MOVW R26,R22
001bb1 93ed      	ST   X+,R30
001bb2 93fc      	ST   X,R31
                 ; 0005 00AB         }
001bb3 5f0f      	SUBI R16,-1
001bb4 cfdf      	RJMP _0xA000B
                 _0xA000C:
                 ; 0005 00AC     } else {
001bb5 c1e1      	RJMP _0xA000D
                 _0xA0008:
                 ; 0005 00AD         if (mode.stop_sync_dt) {
                +
001bb6 91e0 01bd+LDS R30 , _mode + 5
                 	__GETB1MN _mode,5
001bb8 30e0      	CPI  R30,0
001bb9 f411      	BRNE PC+3
001bba 940c 1c2d 	JMP _0xA000E
                 ; 0005 00AE             if ((s_dt.cHH != sdt[0].val_data) || (s_dt.cMM != sdt[1].val_data)) {
001bbc 940e 2c20 	CALL SUBOPT_0x81
001bbe 91a0 01cc 	LDS  R26,_s_dt
001bc0 940e 2c25 	CALL SUBOPT_0x82
001bc2 f439      	BRNE _0xA0010
                +
001bc3 91a0 01cd+LDS R26 , _s_dt + 1
                 	__GETB2MN _s_dt,1
001bc5 940e 2c29 	CALL SUBOPT_0x83
001bc7 940e 2c25 	CALL SUBOPT_0x82
001bc9 f129      	BREQ _0xA000F
                 _0xA0010:
                 ; 0005 00AF                 s_dt.cHH = sdt[0].val_data;
001bca 91e0 02ee 	LDS  R30,_sdt
001bcc 93e0 01cc 	STS  _s_dt,R30
                 ; 0005 00B0                 s_dt.cMM = sdt[1].val_data;
                +
001bce 91e0 02f3+LDS R30 , _sdt + 5
                 	__GETB1MN _sdt,5
                +
001bd0 93e0 01cd+STS _s_dt + 1 , R30
                 	__PUTB1MN _s_dt,1
                 ; 0005 00B1                 s_dt.cSS = 0;
001bd2 e0e0      	LDI  R30,LOW(0)
                +
001bd3 93e0 01ce+STS _s_dt + 2 , R30
                 	__PUTB1MN _s_dt,2
                 ; 0005 00B2                 set_cur_dt();
001bd5 940e 0b75 	CALL _set_cur_dt
                 ; 0005 00B3                 printf("Запись времени %02u:%02u:00\r\n",sdt[0].val_data, sdt[1].val_data);
                +
001bd7 e3e8     +LDI R30 , LOW ( 2 * _0xA0000 + 0 )
001bd8 e1f2     +LDI R31 , HIGH ( 2 * _0xA0000 + 0 )
                 	__POINTW1FN _0xA0000,0
001bd9 940e 2c2e 	CALL SUBOPT_0x84
001bdb 940e 2c29 	CALL SUBOPT_0x83
001bdd 940e 2a08 	CALL SUBOPT_0x23
001bdf 940e 2a0d 	CALL SUBOPT_0x24
                 ; 0005 00B4                 printf("Дата %02u.%02u.20%02u\r\n", sdt[2].val_data, sdt[3].val_data, sdt[4].val_data);
                +
001be1 e5e6     +LDI R30 , LOW ( 2 * _0xA0000 + 30 )
001be2 e1f2     +LDI R31 , HIGH ( 2 * _0xA0000 + 30 )
                 	__POINTW1FN _0xA0000,30
001be3 940e 2c32 	CALL SUBOPT_0x85
001be5 940e 2c39 	CALL SUBOPT_0x86
001be7 940e 2a08 	CALL SUBOPT_0x23
001be9 940e 2c3e 	CALL SUBOPT_0x87
001beb 940e 2a08 	CALL SUBOPT_0x23
001bed 940e 2989 	CALL SUBOPT_0x12
                 ; 0005 00B5             };
                 _0xA000F:
                 ; 0005 00B6             if ((s_dt.cdd != sdt[2].val_data) || (s_dt.cmo != sdt[3].val_data) || (s_dt.cyy != sdt[4].val_data)) {
                +
001bef 91a0 01d1+LDS R26 , _s_dt + 5
                 	__GETB2MN _s_dt,5
                +
001bf1 91e0 02f8+LDS R30 , _sdt + 10
001bf3 91f0 02f9+LDS R31 , _sdt + 10 + 1
                 	__GETW1MN _sdt,10
001bf5 940e 2c25 	CALL SUBOPT_0x82
001bf7 f471      	BRNE _0xA0013
                +
001bf8 91a0 01d0+LDS R26 , _s_dt + 4
                 	__GETB2MN _s_dt,4
001bfa 940e 2c39 	CALL SUBOPT_0x86
001bfc 940e 2c25 	CALL SUBOPT_0x82
001bfe f439      	BRNE _0xA0013
                +
001bff 91a0 01cf+LDS R26 , _s_dt + 3
                 	__GETB2MN _s_dt,3
001c01 940e 2c3e 	CALL SUBOPT_0x87
001c03 940e 2c25 	CALL SUBOPT_0x82
001c05 f131      	BREQ _0xA0012
                 _0xA0013:
                 ; 0005 00B7                 s_dt.cdd = sdt[2].val_data;
                +
001c06 91e0 02f8+LDS R30 , _sdt + 10
                 	__GETB1MN _sdt,10
                +
001c08 93e0 01d1+STS _s_dt + 5 , R30
                 	__PUTB1MN _s_dt,5
                 ; 0005 00B8                 s_dt.cmo = sdt[3].val_data;
                +
001c0a 91e0 02fd+LDS R30 , _sdt + 15
                 	__GETB1MN _sdt,15
                +
001c0c 93e0 01d0+STS _s_dt + 4 , R30
                 	__PUTB1MN _s_dt,4
                 ; 0005 00B9                 s_dt.cyy = sdt[4].val_data;
                +
001c0e 91e0 0302+LDS R30 , _sdt + 20
                 	__GETB1MN _sdt,20
                +
001c10 93e0 01cf+STS _s_dt + 3 , R30
                 	__PUTB1MN _s_dt,3
                 ; 0005 00BA                 set_cur_dt();
001c12 940e 0b75 	CALL _set_cur_dt
                 ; 0005 00BB                 printf("Запись даты %02u.%02u.20%02u\r\n", sdt[2].val_data, sdt[3].val_data, sdt[4].val_data);
                +
001c14 e6ee     +LDI R30 , LOW ( 2 * _0xA0000 + 54 )
001c15 e1f2     +LDI R31 , HIGH ( 2 * _0xA0000 + 54 )
                 	__POINTW1FN _0xA0000,54
001c16 940e 2c32 	CALL SUBOPT_0x85
001c18 940e 2c39 	CALL SUBOPT_0x86
001c1a 940e 2a08 	CALL SUBOPT_0x23
001c1c 940e 2c3e 	CALL SUBOPT_0x87
001c1e 940e 2a08 	CALL SUBOPT_0x23
001c20 940e 2989 	CALL SUBOPT_0x12
                 ; 0005 00BC                 printf("Время %02u:%02u:00\r\n",sdt[0].val_data, sdt[1].val_data);
                +
001c22 e8ed     +LDI R30 , LOW ( 2 * _0xA0000 + 85 )
001c23 e1f2     +LDI R31 , HIGH ( 2 * _0xA0000 + 85 )
                 	__POINTW1FN _0xA0000,85
001c24 940e 2c2e 	CALL SUBOPT_0x84
001c26 940e 2c29 	CALL SUBOPT_0x83
001c28 940e 2a08 	CALL SUBOPT_0x23
001c2a 940e 2a0d 	CALL SUBOPT_0x24
                 ; 0005 00BD             };
                 _0xA0012:
                 ; 0005 00BE         } else {
001c2c c153      	RJMP _0xA0015
                 _0xA000E:
                 ; 0005 00BF             // Проверяем каждый параметр и если он отличается от начального, то выставляем флаг необходимости записи в EEPROM
                 ; 0005 00C0             for (i = 0; i < MAX_DS1820; i++) {
001c2d e000      	LDI  R16,LOW(0)
                 _0xA0017:
001c2e 3004      	CPI  R16,4
001c2f f5d0      	BRSH _0xA0018
                 ; 0005 00C1                 j = 2*i + 9;
001c30 940e 2c12 	CALL SUBOPT_0x7F
                 ; 0005 00C2                 if (prim_par.elims[i].shift != settings[j].val_data) {
001c32 e0a3      	LDI  R26,LOW(3)
001c33 9f0a      	MUL  R16,R26
001c34 01f0      	MOVW R30,R0
001c35 5ae0      	SUBI R30,LOW(-_prim_par)
001c36 4ffe      	SBCI R31,HIGH(-_prim_par)
001c37 8160      	LD   R22,Z
001c38 8171      	LDD  R23,Z+1
001c39 940e 2c43 	CALL SUBOPT_0x88
001c3b 01df      	MOVW R26,R30
001c3c 940e 3004 	CALL __GETW1P
001c3e 17e6      	CP   R30,R22
001c3f 07f7      	CPC  R31,R23
001c40 f071      	BREQ _0xA0019
                 ; 0005 00C3                     prim_par.elims[i].shift = settings[j].val_data; need_eeprom_write = 1;
001c41 e0a3      	LDI  R26,LOW(3)
001c42 9f0a      	MUL  R16,R26
001c43 01f0      	MOVW R30,R0
001c44 5ae0      	SUBI R30,LOW(-_prim_par)
001c45 4ffe      	SBCI R31,HIGH(-_prim_par)
001c46 01bf      	MOVW R22,R30
001c47 940e 2c43 	CALL SUBOPT_0x88
001c49 940e 2bea 	CALL SUBOPT_0x77
001c4b 93ed      	ST   X+,R30
001c4c 93fc      	ST   X,R31
001c4d 9468      	SET
001c4e f820      	BLD  R2,0
                 ; 0005 00C4                 }
                 ; 0005 00C5                 j++;
                 _0xA0019:
001c4f 5f1f      	SUBI R17,-1
                 ; 0005 00C6                 if (prim_par.elims[i].scale != (signed char)settings[j].val_data) {
001c50 e0a3      	LDI  R26,LOW(3)
001c51 9f0a      	MUL  R16,R26
001c52 01f0      	MOVW R30,R0
                +
001c53 59ee     +SUBI R30 , LOW ( - _prim_par - ( 2 ) )
001c54 4ffe     +SBCI R31 , HIGH ( - _prim_par - ( 2 ) )
                 	__ADDW1MN _prim_par,2
001c55 8160      	LD   R22,Z
001c56 940e 2c43 	CALL SUBOPT_0x88
001c58 81e0      	LD   R30,Z
001c59 17e6      	CP   R30,R22
001c5a f069      	BREQ _0xA001A
                 ; 0005 00C7                     prim_par.elims[i].scale = (signed char)settings[j].val_data; need_eeprom_write = 1;
001c5b e0a3      	LDI  R26,LOW(3)
001c5c 9f0a      	MUL  R16,R26
001c5d 01f0      	MOVW R30,R0
                +
001c5e 59ee     +SUBI R30 , LOW ( - _prim_par - ( 2 ) )
001c5f 4ffe     +SBCI R31 , HIGH ( - _prim_par - ( 2 ) )
                 	__ADDW1MN _prim_par,2
001c60 01bf      	MOVW R22,R30
001c61 940e 2c43 	CALL SUBOPT_0x88
001c63 81e0      	LD   R30,Z
001c64 01db      	MOVW R26,R22
001c65 93ec      	ST   X,R30
001c66 9468      	SET
001c67 f820      	BLD  R2,0
                 ; 0005 00C8                 }
                 ; 0005 00C9             }
                 _0xA001A:
001c68 5f0f      	SUBI R16,-1
001c69 cfc4      	RJMP _0xA0017
                 _0xA0018:
                 ; 0005 00CA             if (prim_par.TA_in_Min != settings[0].val_data) {
                +
001c6a 91a0 017e+LDS R26 , _prim_par + 30
001c6c 91b0 017f+LDS R27 , _prim_par + 30 + 1
                 	__GETW2MN _prim_par,30
001c6e 91e0 0311 	LDS  R30,_settings
001c70 91f0 0312 	LDS  R31,_settings+1
001c72 17ea      	CP   R30,R26
001c73 07fb      	CPC  R31,R27
001c74 f031      	BREQ _0xA001B
                 ; 0005 00CB                 prim_par.TA_in_Min = settings[0].val_data; need_eeprom_write = 1;
                +
001c75 93e0 017e+STS _prim_par + 30 , R30
001c77 93f0 017f+STS _prim_par + 30 + 1 , R31
                 	__PUTW1MN _prim_par,30
001c79 9468      	SET
001c7a f820      	BLD  R2,0
                 ; 0005 00CC             }
                 ; 0005 00CD             if (prim_par.TW_out_Stop != settings[1].val_data) {
                 _0xA001B:
                +
001c7b 91a0 017c+LDS R26 , _prim_par + 28
001c7d 91b0 017d+LDS R27 , _prim_par + 28 + 1
                 	__GETW2MN _prim_par,28
                +
001c7f 91e0 0316+LDS R30 , _settings + 5
001c81 91f0 0317+LDS R31 , _settings + 5 + 1
                 	__GETW1MN _settings,5
001c83 17ea      	CP   R30,R26
001c84 07fb      	CPC  R31,R27
001c85 f051      	BREQ _0xA001C
                 ; 0005 00CE                 prim_par.TW_out_Stop = settings[1].val_data; need_eeprom_write = 1;
                +
001c86 91e0 0316+LDS R30 , _settings + 5
001c88 91f0 0317+LDS R31 , _settings + 5 + 1
                 	__GETW1MN _settings,5
                +
001c8a 93e0 017c+STS _prim_par + 28 , R30
001c8c 93f0 017d+STS _prim_par + 28 + 1 , R31
                 	__PUTW1MN _prim_par,28
001c8e 9468      	SET
001c8f f820      	BLD  R2,0
                 ; 0005 00CF             }
                 ; 0005 00D0             if (prim_par.TW_out_Min != settings[2].val_data) {
                 _0xA001C:
                +
001c90 91a0 017a+LDS R26 , _prim_par + 26
001c92 91b0 017b+LDS R27 , _prim_par + 26 + 1
                 	__GETW2MN _prim_par,26
                +
001c94 91e0 031b+LDS R30 , _settings + 10
001c96 91f0 031c+LDS R31 , _settings + 10 + 1
                 	__GETW1MN _settings,10
001c98 17ea      	CP   R30,R26
001c99 07fb      	CPC  R31,R27
001c9a f051      	BREQ _0xA001D
                 ; 0005 00D1                 prim_par.TW_out_Min = settings[2].val_data; need_eeprom_write = 1;
                +
001c9b 91e0 031b+LDS R30 , _settings + 10
001c9d 91f0 031c+LDS R31 , _settings + 10 + 1
                 	__GETW1MN _settings,10
                +
001c9f 93e0 017a+STS _prim_par + 26 , R30
001ca1 93f0 017b+STS _prim_par + 26 + 1 , R31
                 	__PUTW1MN _prim_par,26
001ca3 9468      	SET
001ca4 f820      	BLD  R2,0
                 ; 0005 00D2             }
                 ; 0005 00D3             if (prim_par.TA_out_Min != settings[3].val_data) {
                 _0xA001D:
                +
001ca5 91a0 0180+LDS R26 , _prim_par + 32
001ca7 91b0 0181+LDS R27 , _prim_par + 32 + 1
                 	__GETW2MN _prim_par,32
                +
001ca9 91e0 0320+LDS R30 , _settings + 15
001cab 91f0 0321+LDS R31 , _settings + 15 + 1
                 	__GETW1MN _settings,15
001cad 17ea      	CP   R30,R26
001cae 07fb      	CPC  R31,R27
001caf f051      	BREQ _0xA001E
                 ; 0005 00D4                 prim_par.TA_out_Min = settings[3].val_data; need_eeprom_write = 1;
                +
001cb0 91e0 0320+LDS R30 , _settings + 15
001cb2 91f0 0321+LDS R31 , _settings + 15 + 1
                 	__GETW1MN _settings,15
                +
001cb4 93e0 0180+STS _prim_par + 32 , R30
001cb6 93f0 0181+STS _prim_par + 32 + 1 , R31
                 	__PUTW1MN _prim_par,32
001cb8 9468      	SET
001cb9 f820      	BLD  R2,0
                 ; 0005 00D5             }
                 ; 0005 00D6             if (prim_par.T_z != settings[4].val_data) {
                 _0xA001E:
                +
001cba 91a0 0176+LDS R26 , _prim_par + 22
001cbc 91b0 0177+LDS R27 , _prim_par + 22 + 1
                 	__GETW2MN _prim_par,22
                +
001cbe 91e0 0325+LDS R30 , _settings + 20
001cc0 91f0 0326+LDS R31 , _settings + 20 + 1
                 	__GETW1MN _settings,20
001cc2 17ea      	CP   R30,R26
001cc3 07fb      	CPC  R31,R27
001cc4 f051      	BREQ _0xA001F
                 ; 0005 00D7                 prim_par.T_z = settings[4].val_data; need_eeprom_write = 1;
                +
001cc5 91e0 0325+LDS R30 , _settings + 20
001cc7 91f0 0326+LDS R31 , _settings + 20 + 1
                 	__GETW1MN _settings,20
                +
001cc9 93e0 0176+STS _prim_par + 22 , R30
001ccb 93f0 0177+STS _prim_par + 22 + 1 , R31
                 	__PUTW1MN _prim_par,22
001ccd 9468      	SET
001cce f820      	BLD  R2,0
                 ; 0005 00D8             }
                 ; 0005 00D9             if (prim_par.T_int != settings[5].val_data) {
                 _0xA001F:
                +
001ccf 91a0 0178+LDS R26 , _prim_par + 24
001cd1 91b0 0179+LDS R27 , _prim_par + 24 + 1
                 	__GETW2MN _prim_par,24
                +
001cd3 91e0 032a+LDS R30 , _settings + 25
001cd5 91f0 032b+LDS R31 , _settings + 25 + 1
                 	__GETW1MN _settings,25
001cd7 17ea      	CP   R30,R26
001cd8 07fb      	CPC  R31,R27
001cd9 f051      	BREQ _0xA0020
                 ; 0005 00DA                 prim_par.T_int = settings[5].val_data; need_eeprom_write = 1;
                +
001cda 91e0 032a+LDS R30 , _settings + 25
001cdc 91f0 032b+LDS R31 , _settings + 25 + 1
                 	__GETW1MN _settings,25
                +
001cde 93e0 0178+STS _prim_par + 24 , R30
001ce0 93f0 0179+STS _prim_par + 24 + 1 , R31
                 	__PUTW1MN _prim_par,24
001ce2 9468      	SET
001ce3 f820      	BLD  R2,0
                 ; 0005 00DB             }
                 ; 0005 00DC             if (prim_par.Ku != settings[6].val_data) {
                 _0xA0020:
                +
001ce4 91a0 0170+LDS R26 , _prim_par + 16
001ce6 91b0 0171+LDS R27 , _prim_par + 16 + 1
                 	__GETW2MN _prim_par,16
                +
001ce8 91e0 032f+LDS R30 , _settings + 30
001cea 91f0 0330+LDS R31 , _settings + 30 + 1
                 	__GETW1MN _settings,30
001cec 17ea      	CP   R30,R26
001ced 07fb      	CPC  R31,R27
001cee f051      	BREQ _0xA0021
                 ; 0005 00DD                 prim_par.Ku = settings[6].val_data; need_eeprom_write = 1;
                +
001cef 91e0 032f+LDS R30 , _settings + 30
001cf1 91f0 0330+LDS R31 , _settings + 30 + 1
                 	__GETW1MN _settings,30
                +
001cf3 93e0 0170+STS _prim_par + 16 , R30
001cf5 93f0 0171+STS _prim_par + 16 + 1 , R31
                 	__PUTW1MN _prim_par,16
001cf7 9468      	SET
001cf8 f820      	BLD  R2,0
                 ; 0005 00DE             }
                 ; 0005 00DF             if (prim_par.Ki != settings[7].val_data) {
                 _0xA0021:
                +
001cf9 91a0 0172+LDS R26 , _prim_par + 18
001cfb 91b0 0173+LDS R27 , _prim_par + 18 + 1
                 	__GETW2MN _prim_par,18
                +
001cfd 91e0 0334+LDS R30 , _settings + 35
001cff 91f0 0335+LDS R31 , _settings + 35 + 1
                 	__GETW1MN _settings,35
001d01 17ea      	CP   R30,R26
001d02 07fb      	CPC  R31,R27
001d03 f051      	BREQ _0xA0022
                 ; 0005 00E0                 prim_par.Ki = settings[7].val_data; need_eeprom_write = 1;
                +
001d04 91e0 0334+LDS R30 , _settings + 35
001d06 91f0 0335+LDS R31 , _settings + 35 + 1
                 	__GETW1MN _settings,35
                +
001d08 93e0 0172+STS _prim_par + 18 , R30
001d0a 93f0 0173+STS _prim_par + 18 + 1 , R31
                 	__PUTW1MN _prim_par,18
001d0c 9468      	SET
001d0d f820      	BLD  R2,0
                 ; 0005 00E1             }
                 ; 0005 00E2             if (prim_par.Kd != settings[8].val_data) {
                 _0xA0022:
                +
001d0e 91a0 0174+LDS R26 , _prim_par + 20
001d10 91b0 0175+LDS R27 , _prim_par + 20 + 1
                 	__GETW2MN _prim_par,20
                +
001d12 91e0 0339+LDS R30 , _settings + 40
001d14 91f0 033a+LDS R31 , _settings + 40 + 1
                 	__GETW1MN _settings,40
001d16 17ea      	CP   R30,R26
001d17 07fb      	CPC  R31,R27
001d18 f051      	BREQ _0xA0023
                 ; 0005 00E3                 prim_par.Kd = settings[8].val_data; need_eeprom_write = 1;
                +
001d19 91e0 0339+LDS R30 , _settings + 40
001d1b 91f0 033a+LDS R31 , _settings + 40 + 1
                 	__GETW1MN _settings,40
                +
001d1d 93e0 0174+STS _prim_par + 20 , R30
001d1f 93f0 0175+STS _prim_par + 20 + 1 , R31
                 	__PUTW1MN _prim_par,20
001d21 9468      	SET
001d22 f820      	BLD  R2,0
                 ; 0005 00E4             }
                 ; 0005 00E5             if (prim_par.TA_out_prs != parameters[0].val_data) {
                 _0xA0023:
                +
001d23 91a0 0182+LDS R26 , _prim_par + 34
001d25 91b0 0183+LDS R27 , _prim_par + 34 + 1
                 	__GETW2MN _prim_par,34
001d27 940e 2b04 	CALL SUBOPT_0x4D
001d29 17ea      	CP   R30,R26
001d2a 07fb      	CPC  R31,R27
001d2b f041      	BREQ _0xA0024
                 ; 0005 00E6                 prim_par.TA_out_prs = parameters[0].val_data; need_eeprom_write = 1;
001d2c 940e 2b04 	CALL SUBOPT_0x4D
                +
001d2e 93e0 0182+STS _prim_par + 34 , R30
001d30 93f0 0183+STS _prim_par + 34 + 1 , R31
                 	__PUTW1MN _prim_par,34
001d32 9468      	SET
001d33 f820      	BLD  R2,0
                 ; 0005 00E7             };
                 _0xA0024:
                 ; 0005 00E8             if (mode.run == 0) {
                +
001d34 91e0 01b9+LDS R30 , _mode + 1
                 	__GETB1MN _mode,1
001d36 30e0      	CPI  R30,0
001d37 f491      	BRNE _0xA0025
                 ; 0005 00E9             if (prim_par.fan_speed  != parameters[8].val_data) {
                +
001d38 91a0 016d+LDS R26 , _prim_par + 13
                 	__GETB2MN _prim_par,13
001d3a 940e 2b12 	CALL SUBOPT_0x4F
001d3c 940e 2c25 	CALL SUBOPT_0x82
001d3e f059      	BREQ _0xA0026
                 ; 0005 00EA                 if (parameters[8].val_data <= FAN_SPEED_MIN) parameters[8].val_data = FAN_SPEED_MIN;
001d3f 940e 2a4b 	CALL SUBOPT_0x2F
001d41 f414      	BRGE _0xA0027
001d42 940e 2a53 	CALL SUBOPT_0x30
                 ; 0005 00EB                     prim_par.fan_speed = parameters[8].val_data; need_eeprom_write = 1;
                 _0xA0027:
                +
001d44 91e0 027f+LDS R30 , _parameters + 40
                 	__GETB1MN _parameters,40
                +
001d46 93e0 016d+STS _prim_par + 13 , R30
                 	__PUTB1MN _prim_par,13
001d48 9468      	SET
001d49 f820      	BLD  R2,0
                 ; 0005 00EC                 };
                 _0xA0026:
                 ; 0005 00ED             };
                 _0xA0025:
                 ; 0005 00EE             if (mode.pomp  != parameters[10].val_data) {
                +
001d4a 91a0 01bb+LDS R26 , _mode + 3
                 	__GETB2MN _mode,3
                +
001d4c 91e0 0289+LDS R30 , _parameters + 50
001d4e 91f0 028a+LDS R31 , _parameters + 50 + 1
                 	__GETW1MN _parameters,50
001d50 940e 2c25 	CALL SUBOPT_0x82
001d52 f021      	BREQ _0xA0028
                 ; 0005 00EF                 mode.pomp = parameters[10].val_data;
                +
001d53 91e0 0289+LDS R30 , _parameters + 50
                 	__GETB1MN _parameters,50
                +
001d55 93e0 01bb+STS _mode + 3 , R30
                 	__PUTB1MN _mode,3
                 ; 0005 00F0             };
                 _0xA0028:
                 ; 0005 00F1             if (mode.run != main_menu[1].val_data) {
                +
001d57 91a0 01b9+LDS R26 , _mode + 1
                 	__GETB2MN _mode,1
                +
001d59 91e0 0239+LDS R30 , _main_menu + 5
001d5b 91f0 023a+LDS R31 , _main_menu + 5 + 1
                 	__GETW1MN _main_menu,5
001d5d 940e 2c25 	CALL SUBOPT_0x82
001d5f f029      	BREQ _0xA0029
                 ; 0005 00F2                 mode.initrun = (unsigned char)main_menu[1].val_data + 4;
                +
001d60 91e0 0239+LDS R30 , _main_menu + 5
                 	__GETB1MN _main_menu,5
001d62 5fec      	SUBI R30,-LOW(4)
                +
001d63 93e0 01ba+STS _mode + 2 , R30
                 	__PUTB1MN _mode,2
                 ; 0005 00F3             };
                 _0xA0029:
                 ; 0005 00F4             for (i = 0; i < MAX_ALERTS; i++) {
001d65 e000      	LDI  R16,LOW(0)
                 _0xA002B:
001d66 300c      	CPI  R16,12
001d67 f4c0      	BRSH _0xA002C
                 ; 0005 00F5                 if (prim_par.alert_status[i] && (alerts[i].val_data == 0)) {
001d68 940e 2b74 	CALL SUBOPT_0x61
001d6a f019      	BREQ _0xA002E
001d6b 940e 2c49 	CALL SUBOPT_0x89
001d6d f009      	BREQ _0xA002F
                 _0xA002E:
001d6e c00f      	RJMP _0xA002D
                 _0xA002F:
                 ; 0005 00F6                  alarm_unreg (i);
001d6f 930a      	ST   -Y,R16
001d70 d6a7      	RCALL _alarm_unreg
                 ; 0005 00F7                  printf ("Удалили активную тревогу: %s\r\n", get_alert_str(i));
                +
001d71 eae2     +LDI R30 , LOW ( 2 * _0xA0000 + 106 )
001d72 e1f2     +LDI R31 , HIGH ( 2 * _0xA0000 + 106 )
                 	__POINTW1FN _0xA0000,106
001d73 93fa      	ST   -Y,R31
001d74 93ea      	ST   -Y,R30
001d75 930a      	ST   -Y,R16
001d76 940e 2a84 	CALL SUBOPT_0x38
                 ; 0005 00F8                  read_all_terms(INIT_MODE);
001d78 940e 29af 	CALL SUBOPT_0x18
                 ; 0005 00F9                  printf ("Инициализируем все термометры!\r\n");
                +
001d7a ece1     +LDI R30 , LOW ( 2 * _0xA0000 + 137 )
001d7b e1f2     +LDI R31 , HIGH ( 2 * _0xA0000 + 137 )
                 	__POINTW1FN _0xA0000,137
001d7c 940e 292a 	CALL SUBOPT_0x1
                 ; 0005 00FA                  }
                 ; 0005 00FB             }
                 _0xA002D:
001d7e 5f0f      	SUBI R16,-1
001d7f cfe6      	RJMP _0xA002B
                 _0xA002C:
                 ; 0005 00FC         };
                 _0xA0015:
                 ; 0005 00FD         // Выставление сезона находится в меню установки часов. Необходимо принудительно записивать в eeprom
                 ; 0005 00FE         if (prim_par.season != SEASON) {
                +
001d80 91a0 0190+LDS R26 , _prim_par + 48
                 	__GETB2MN _prim_par,48
                +
001d82 91e0 0307+LDS R30 , _sdt + 25
001d84 91f0 0308+LDS R31 , _sdt + 25 + 1
                 	__GETW1MN _sdt,25
001d86 940e 2c25 	CALL SUBOPT_0x82
001d88 f071      	BREQ _0xA0030
                 ; 0005 00FF             prim_par.season = SEASON; need_eeprom_write = 1;
                +
001d89 91e0 0307+LDS R30 , _sdt + 25
                 	__GETB1MN _sdt,25
                +
001d8b 93e0 0190+STS _prim_par + 48 , R30
                 	__PUTB1MN _prim_par,48
001d8d 9468      	SET
001d8e f820      	BLD  R2,0
                 ; 0005 0100             SEASON_MAIN = SEASON;
                +
001d8f 91e0 0307+LDS R30 , _sdt + 25
001d91 91f0 0308+LDS R31 , _sdt + 25 + 1
                 	__GETW1MN _sdt,25
                +
001d93 93e0 023e+STS _main_menu + 10 , R30
001d95 93f0 023f+STS _main_menu + 10 + 1 , R31
                 	__PUTW1MN _main_menu,10
                 ; 0005 0101         }
                 ; 0005 0102      };
                 _0xA0030:
                 _0xA000D:
                 ; 0005 0103 }
001d97 8119      	LDD  R17,Y+1
001d98 8108      	LDD  R16,Y+0
001d99 c328      	RJMP _0x20E000D
                 ;// Функция, которая возвращает строку со строковым названием параметра, и его числовым значением
                 ;// Аргументы - номер элемента массива и указатель на массив
                 ;// Возврат - указатель на строку linestr
                 ;char *param_str(byte num_line, struct st_parameter parameter[]) {
                 ; 0005 0107 char *param_str(byte num_line, struct st_parameter parameter[]) {
                 _param_str:
                 ; 0005 0108     int pr_data;
                 ; 0005 0109     struct st_parameter *st_pointer;
                 ; 0005 010A     st_pointer = &parameter[num_line];          // Передаем конкретный указатель на структуру текущего элемента массива
001d9a 940e 3144 	CALL __SAVELOCR4
                 ;	num_line -> Y+6
                 ;	parameter -> Y+4
                 ;	pr_data -> R16,R17
                 ;	*st_pointer -> R18,R19
001d9c 81ee      	LDD  R30,Y+6
001d9d e0f0      	LDI  R31,0
                +
001d9e 816c     +LDD R22 , Y + 4
001d9f 817d     +LDD R23 , Y + 4 + 1
                 	__GETWRS 22,23,4
001da0 940e 2c53 	CALL SUBOPT_0x8A
001da2 0fe6      	ADD  R30,R22
001da3 1ff7      	ADC  R31,R23
001da4 019f      	MOVW R18,R30
                 ; 0005 010B     pr_data = st_pointer->val_data;
001da5 01d9      	MOVW R26,R18
001da6 910d      	LD   R16,X+
001da7 911c      	LD   R17,X
                 ; 0005 010C     /* struct st_parameter *pnt; pnt = parameter + num_line; */
                 ; 0005 010D     return (par_str(st_pointer, 0, pr_data));
001da8 933a      	ST   -Y,R19
001da9 932a      	ST   -Y,R18
001daa e0e0      	LDI  R30,LOW(0)
001dab 93ea      	ST   -Y,R30
001dac 931a      	ST   -Y,R17
001dad 930a      	ST   -Y,R16
001dae d004      	RCALL _par_str
001daf 940e 314b 	CALL __LOADLOCR4
                 _0x20E000F:
001db1 9627      	ADIW R28,7
001db2 9508      	RET
                 ; 0005 010E }
                 ;// Универсальная функция возвращающая строку с преобразованным типовым значением.
                 ;// 1) Аргумент - указатель на структуру параметра
                 ;// 2) Флаг - признак вывода только значения. (0 - выводить строковое название, 1 - не выводить строковое название)
                 ;// 3) Данные, которые нужно подставить
                 ;// Возврат - указатель на строку linestr
                 ;char *par_str(struct st_parameter *st_pointer, unsigned char only_val, int pr_data) {
                 ; 0005 0114 char *par_str(struct st_parameter *st_pointer, unsigned char only_val, int pr_data) {
                 _par_str:
                 ; 0005 0115     char *pr_name;
                 ; 0005 0116     char prompt[] = "=> ";
                 ; 0005 0117     unsigned char sign = (pr_data < 0) ? '-' : '+';
                 ; 0005 0118     if (only_val) pr_name = prompt; else pr_name = getmenustr(st_pointer->str_num);
001db3 9724      	SBIW R28,4
001db4 e3ed      	LDI  R30,LOW(61)
001db5 83e8      	ST   Y,R30
001db6 e3ee      	LDI  R30,LOW(62)
001db7 83e9      	STD  Y+1,R30
001db8 e2e0      	LDI  R30,LOW(32)
001db9 83ea      	STD  Y+2,R30
001dba e0e0      	LDI  R30,LOW(0)
001dbb 83eb      	STD  Y+3,R30
001dbc 940e 3145 	CALL __SAVELOCR3
                 ;	*st_pointer -> Y+10
                 ;	only_val -> Y+9
                 ;	pr_data -> Y+7
                 ;	*pr_name -> R16,R17
                 ;	prompt -> Y+3
                 ;	sign -> R18
001dbe 85a8      	LDD  R26,Y+8
001dbf 23aa      	TST  R26
001dc0 f412      	BRPL _0xA0031
001dc1 e2ed      	LDI  R30,LOW(45)
001dc2 c001      	RJMP _0xA0032
                 _0xA0031:
001dc3 e2eb      	LDI  R30,LOW(43)
                 _0xA0032:
001dc4 2f2e      	MOV  R18,R30
001dc5 85e9      	LDD  R30,Y+9
001dc6 30e0      	CPI  R30,0
001dc7 f019      	BREQ _0xA0034
001dc8 01fe      	MOVW R30,R28
001dc9 9633      	ADIW R30,3
001dca c005      	RJMP _0xA00DA
                 _0xA0034:
001dcb 85ea      	LDD  R30,Y+10
001dcc 85fb      	LDD  R31,Y+10+1
001dcd 81a4      	LDD  R26,Z+4
001dce 93aa      	ST   -Y,R26
001dcf d4cf      	RCALL _getmenustr
                 _0xA00DA:
001dd0 018f      	MOVW R16,R30
                 ; 0005 0119     switch (st_pointer->val_type) {
001dd1 85aa      	LDD  R26,Y+10
001dd2 85bb      	LDD  R27,Y+10+1
001dd3 9612      	ADIW R26,2
001dd4 91ec      	LD   R30,X
                 ; 0005 011A         case e_empty:
001dd5 30e0      	CPI  R30,0
001dd6 f439      	BRNE _0xA0039
                 ; 0005 011B             sprintf(linestr, "%s", pr_name);
001dd7 940e 2b8d 	CALL SUBOPT_0x65
001dd9 940e 2c58 	CALL SUBOPT_0x8B
001ddb 940e 2c5e 	CALL SUBOPT_0x8C
                 ; 0005 011C             break;
001ddd c16a      	RJMP _0xA0038
                 ; 0005 011D         case e_clatsman:
                 _0xA0039:
001dde 30e1      	CPI  R30,LOW(0x1)
001ddf f4a9      	BRNE _0xA003A
                 ; 0005 011E             // Если указан тип клацман, то печатаем со словом ВКЛ. или Выкл.
                 ; 0005 011F             if(pr_data)
001de0 81ef      	LDD  R30,Y+7
001de1 85f8      	LDD  R31,Y+7+1
001de2 9730      	SBIW R30,0
001de3 f029      	BREQ _0xA003B
                 ; 0005 0120                 sprintf(linestr, "%sВКЛ.", pr_name);
001de4 940e 2b8d 	CALL SUBOPT_0x65
                +
001de6 eee5     +LDI R30 , LOW ( 2 * _0xA0000 + 173 )
001de7 e1f2     +LDI R31 , HIGH ( 2 * _0xA0000 + 173 )
                 	__POINTW1FN _0xA0000,173
001de8 c004      	RJMP _0xA00DB
                 ; 0005 0121             else
                 _0xA003B:
                 ; 0005 0122                 sprintf(linestr, "%sВыкл.", pr_name);
001de9 940e 2b8d 	CALL SUBOPT_0x65
                +
001deb eeec     +LDI R30 , LOW ( 2 * _0xA0000 + 180 )
001dec e1f2     +LDI R31 , HIGH ( 2 * _0xA0000 + 180 )
                 	__POINTW1FN _0xA0000,180
                 _0xA00DB:
001ded 93fa      	ST   -Y,R31
001dee 93ea      	ST   -Y,R30
001def 01f8      	MOVW R30,R16
001df0 940e 2b61 	CALL SUBOPT_0x5D
001df2 940e 2c5e 	CALL SUBOPT_0x8C
                 ; 0005 0123             break;
001df4 c153      	RJMP _0xA0038
                 ; 0005 0124         case e_percent:
                 _0xA003A:
001df5 30e4      	CPI  R30,LOW(0x4)
001df6 f479      	BRNE _0xA003D
                 ; 0005 0125             // Если указан тип проценты, то печатаем как проценты
                 ; 0005 0126             sprintf(linestr, "%s%u%%", pr_name, (pr_data*100)/0xFF);
001df7 940e 2b8d 	CALL SUBOPT_0x65
                +
001df9 efe4     +LDI R30 , LOW ( 2 * _0xA0000 + 188 )
001dfa e1f2     +LDI R31 , HIGH ( 2 * _0xA0000 + 188 )
                 	__POINTW1FN _0xA0000,188
001dfb 940e 2c63 	CALL SUBOPT_0x8D
001dfd 85af      	LDD  R26,Y+15
001dfe 89b8      	LDD  R27,Y+15+1
001dff e6e4      	LDI  R30,LOW(100)
001e00 e0f0      	LDI  R31,HIGH(100)
001e01 940e 2b36 	CALL SUBOPT_0x55
001e03 940e 2c67 	CALL SUBOPT_0x8E
                 ; 0005 0127             //sprintf(linestr, "%s%u%%", pr_name, pr_data);
                 ; 0005 0128             break;
001e05 c142      	RJMP _0xA0038
                 ; 0005 0129         case e_coef:
                 _0xA003D:
001e06 30e9      	CPI  R30,LOW(0x9)
001e07 f459      	BRNE _0xA003E
                 ; 0005 012A             // Если указан тип коэффициент, то печатаем как просто число
                 ; 0005 012B             sprintf(linestr, "%s%u", pr_name, pr_data);
001e08 940e 2b8d 	CALL SUBOPT_0x65
                +
001e0a efeb     +LDI R30 , LOW ( 2 * _0xA0000 + 195 )
001e0b e1f2     +LDI R31 , HIGH ( 2 * _0xA0000 + 195 )
                 	__POINTW1FN _0xA0000,195
001e0c 940e 2c63 	CALL SUBOPT_0x8D
001e0e 940e 2c6c 	CALL SUBOPT_0x8F
001e10 940e 2c67 	CALL SUBOPT_0x8E
                 ; 0005 012C             break;
001e12 c135      	RJMP _0xA0038
                 ; 0005 012D         case e_scale:
                 _0xA003E:
001e13 30ea      	CPI  R30,LOW(0xA)
001e14 f459      	BRNE _0xA003F
                 ; 0005 012E             // Если указан тип шкалы, то печатаем как знаковый байт (-128..127)
                 ; 0005 012F             sprintf(linestr, "%s%d", pr_name, pr_data);
001e15 940e 2b8d 	CALL SUBOPT_0x65
                +
001e17 e0e0     +LDI R30 , LOW ( 2 * _0xA0000 + 200 )
001e18 e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 200 )
                 	__POINTW1FN _0xA0000,200
001e19 940e 2c63 	CALL SUBOPT_0x8D
001e1b 940e 2c6c 	CALL SUBOPT_0x8F
001e1d 940e 2c67 	CALL SUBOPT_0x8E
                 ; 0005 0130             break;
001e1f c128      	RJMP _0xA0038
                 ; 0005 0131         case e_isfour:
                 _0xA003F:
001e20 30e3      	CPI  R30,LOW(0x3)
001e21 f5d1      	BRNE _0xA0040
                 ; 0005 0132             main_menu[1].val_data = mode.run;
                +
001e22 e3a9     +LDI R26 , LOW ( _main_menu + 5 )
001e23 e0b2     +LDI R27 , HIGH ( _main_menu + 5 )
                 	__POINTW2MN _main_menu,5
                +
001e24 91e0 01b9+LDS R30 , _mode + 1
                 	__GETB1MN _mode,1
001e26 940e 2ab2 	CALL SUBOPT_0x3F
                 ; 0005 0133             // Если указан тип режим, то печатаем со словами (00 - стоп, 01 - прогрев, 10 - остановка, 11 - пуск)
                 ; 0005 0134             switch (pr_data) {
001e28 81ef      	LDD  R30,Y+7
001e29 85f8      	LDD  R31,Y+7+1
                 ; 0005 0135                 case 0: sprintf(linestr, "%sСТОП", pr_name);  break;   //mode.run=0 ;
001e2a 9730      	SBIW R30,0
001e2b f449      	BRNE _0xA0044
001e2c 940e 2b8d 	CALL SUBOPT_0x65
                +
001e2e e0e5     +LDI R30 , LOW ( 2 * _0xA0000 + 205 )
001e2f e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 205 )
                 	__POINTW1FN _0xA0000,205
001e30 940e 2c63 	CALL SUBOPT_0x8D
001e32 940e 2c5e 	CALL SUBOPT_0x8C
001e34 c026      	RJMP _0xA0043
                 ; 0005 0136                 case 1: sprintf(linestr, "%sПРОГРЕВ", pr_name); break; //mode.run=1;
                 _0xA0044:
001e35 30e1      	CPI  R30,LOW(0x1)
001e36 e0a0      	LDI  R26,HIGH(0x1)
001e37 07fa      	CPC  R31,R26
001e38 f449      	BRNE _0xA0045
001e39 940e 2b8d 	CALL SUBOPT_0x65
                +
001e3b e0ec     +LDI R30 , LOW ( 2 * _0xA0000 + 212 )
001e3c e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 212 )
                 	__POINTW1FN _0xA0000,212
001e3d 940e 2c63 	CALL SUBOPT_0x8D
001e3f 940e 2c5e 	CALL SUBOPT_0x8C
001e41 c019      	RJMP _0xA0043
                 ; 0005 0137                 case 2: sprintf(linestr, "%sОСТАНОВ", pr_name); break; //mode.run=2 ;
                 _0xA0045:
001e42 30e2      	CPI  R30,LOW(0x2)
001e43 e0a0      	LDI  R26,HIGH(0x2)
001e44 07fa      	CPC  R31,R26
001e45 f449      	BRNE _0xA0046
001e46 940e 2b8d 	CALL SUBOPT_0x65
                +
001e48 e1e6     +LDI R30 , LOW ( 2 * _0xA0000 + 222 )
001e49 e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 222 )
                 	__POINTW1FN _0xA0000,222
001e4a 940e 2c63 	CALL SUBOPT_0x8D
001e4c 940e 2c5e 	CALL SUBOPT_0x8C
001e4e c00c      	RJMP _0xA0043
                 ; 0005 0138                 case 3: sprintf(linestr, "%sПУСК", pr_name);  ; break; //mode.run=3
                 _0xA0046:
001e4f 30e3      	CPI  R30,LOW(0x3)
001e50 e0a0      	LDI  R26,HIGH(0x3)
001e51 07fa      	CPC  R31,R26
001e52 f441      	BRNE _0xA0048
001e53 940e 2b8d 	CALL SUBOPT_0x65
                +
001e55 e2e0     +LDI R30 , LOW ( 2 * _0xA0000 + 232 )
001e56 e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 232 )
                 	__POINTW1FN _0xA0000,232
001e57 940e 2c63 	CALL SUBOPT_0x8D
001e59 940e 2c5e 	CALL SUBOPT_0x8C
                 ; 0005 0139                 default: break;
                 _0xA0048:
                 ; 0005 013A             };
                 _0xA0043:
                 ; 0005 013B             break;
001e5b c0ec      	RJMP _0xA0038
                 ; 0005 013C         case e_password:
                 _0xA0040:
001e5c 31e8      	CPI  R30,LOW(0x18)
001e5d f4b1      	BRNE _0xA0049
                 ; 0005 013D             // Если указан признак ввода пароля, то просто указываем несколько символов '**'
                 ; 0005 013E             if (only_val) sprintf(linestr, "%s%u", pr_name, pr_data);
001e5e 85e9      	LDD  R30,Y+9
001e5f 30e0      	CPI  R30,0
001e60 f029      	BREQ _0xA004A
001e61 940e 2b8d 	CALL SUBOPT_0x65
                +
001e63 efeb     +LDI R30 , LOW ( 2 * _0xA0000 + 195 )
001e64 e1f2     +LDI R31 , HIGH ( 2 * _0xA0000 + 195 )
                 	__POINTW1FN _0xA0000,195
001e65 c004      	RJMP _0xA00DC
                 ; 0005 013F             else sprintf(linestr, "%s **", pr_name, pr_data);
                 _0xA004A:
001e66 940e 2b8d 	CALL SUBOPT_0x65
                +
001e68 e2e7     +LDI R30 , LOW ( 2 * _0xA0000 + 239 )
001e69 e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 239 )
                 	__POINTW1FN _0xA0000,239
                 _0xA00DC:
001e6a 93fa      	ST   -Y,R31
001e6b 93ea      	ST   -Y,R30
001e6c 01f8      	MOVW R30,R16
001e6d 940e 2b61 	CALL SUBOPT_0x5D
001e6f 940e 2c6c 	CALL SUBOPT_0x8F
001e71 940e 2c67 	CALL SUBOPT_0x8E
                 ; 0005 0140             break;
001e73 c0d4      	RJMP _0xA0038
                 ; 0005 0141         case e_alarm:
                 _0xA0049:
001e74 31e6      	CPI  R30,LOW(0x16)
001e75 f4c1      	BRNE _0xA004C
                 ; 0005 0142             // Если указан признак аварий, то выводим либо слово нет, либо количество аварий и '!'
                 ; 0005 0143             if (pr_data) sprintf(linestr, "%s%u!", pr_name, pr_data);
001e76 81ef      	LDD  R30,Y+7
001e77 85f8      	LDD  R31,Y+7+1
001e78 9730      	SBIW R30,0
001e79 f059      	BREQ _0xA004D
001e7a 940e 2b8d 	CALL SUBOPT_0x65
                +
001e7c e2ed     +LDI R30 , LOW ( 2 * _0xA0000 + 245 )
001e7d e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 245 )
                 	__POINTW1FN _0xA0000,245
001e7e 940e 2c63 	CALL SUBOPT_0x8D
001e80 940e 2c6c 	CALL SUBOPT_0x8F
001e82 940e 2c67 	CALL SUBOPT_0x8E
                 ; 0005 0144             else sprintf(linestr, "%sНЕТ", pr_name);
001e84 c008      	RJMP _0xA004E
                 _0xA004D:
001e85 940e 2b8d 	CALL SUBOPT_0x65
                +
001e87 e3e3     +LDI R30 , LOW ( 2 * _0xA0000 + 251 )
001e88 e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 251 )
                 	__POINTW1FN _0xA0000,251
001e89 940e 2c63 	CALL SUBOPT_0x8D
001e8b 940e 2c5e 	CALL SUBOPT_0x8C
                 ; 0005 0145             break;
                 _0xA004E:
001e8d c0ba      	RJMP _0xA0038
                 ; 0005 0146         case e_alert:
                 _0xA004C:
001e8e 31e7      	CPI  R30,LOW(0x17)
001e8f f4b1      	BRNE _0xA004F
                 ; 0005 0147             if (pr_data) sprintf(linestr, "%s%u!", pr_name, pr_data);
001e90 81ef      	LDD  R30,Y+7
001e91 85f8      	LDD  R31,Y+7+1
001e92 9730      	SBIW R30,0
001e93 f059      	BREQ _0xA0050
001e94 940e 2b8d 	CALL SUBOPT_0x65
                +
001e96 e2ed     +LDI R30 , LOW ( 2 * _0xA0000 + 245 )
001e97 e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 245 )
                 	__POINTW1FN _0xA0000,245
001e98 940e 2c63 	CALL SUBOPT_0x8D
001e9a 940e 2c6c 	CALL SUBOPT_0x8F
001e9c 940e 2c67 	CALL SUBOPT_0x8E
                 ; 0005 0148             else sprintf(linestr, "%s", pr_name);
001e9e c006      	RJMP _0xA0051
                 _0xA0050:
001e9f 940e 2b8d 	CALL SUBOPT_0x65
001ea1 940e 2c58 	CALL SUBOPT_0x8B
001ea3 940e 2c5e 	CALL SUBOPT_0x8C
                 ; 0005 0149             break;
                 _0xA0051:
001ea5 c0a2      	RJMP _0xA0038
                 ; 0005 014A         case e_winter:
                 _0xA004F:
001ea6 30e2      	CPI  R30,LOW(0x2)
001ea7 f4a9      	BRNE _0xA0052
                 ; 0005 014B             // Если указан сезона, то выводим ЗИМА/ЛЕТО
                 ; 0005 014C             if (pr_data)
001ea8 81ef      	LDD  R30,Y+7
001ea9 85f8      	LDD  R31,Y+7+1
001eaa 9730      	SBIW R30,0
001eab f029      	BREQ _0xA0053
                 ; 0005 014D                 sprintf(linestr, "%sЗИМА", pr_name);
001eac 940e 2b8d 	CALL SUBOPT_0x65
                +
001eae e3e9     +LDI R30 , LOW ( 2 * _0xA0000 + 257 )
001eaf e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 257 )
                 	__POINTW1FN _0xA0000,257
001eb0 c004      	RJMP _0xA00DD
                 ; 0005 014E             else
                 _0xA0053:
                 ; 0005 014F                 sprintf(linestr, "%sЛЕТО", pr_name);
001eb1 940e 2b8d 	CALL SUBOPT_0x65
                +
001eb3 e4e0     +LDI R30 , LOW ( 2 * _0xA0000 + 264 )
001eb4 e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 264 )
                 	__POINTW1FN _0xA0000,264
                 _0xA00DD:
001eb5 93fa      	ST   -Y,R31
001eb6 93ea      	ST   -Y,R30
001eb7 01f8      	MOVW R30,R16
001eb8 940e 2b61 	CALL SUBOPT_0x5D
001eba 940e 2c5e 	CALL SUBOPT_0x8C
                 ; 0005 0150             break;
001ebc c08b      	RJMP _0xA0038
                 ; 0005 0151         case e_time:
                 _0xA0052:
001ebd 31e3      	CPI  R30,LOW(0x13)
001ebe f489      	BRNE _0xA0055
                 ; 0005 0152             // Если указан тип время, то выбираем из структуры времени и печатаем как чч.мм.сс
                 ; 0005 0153             sprintf(linestr, "%s%02u:%02u", pr_name, s_dt.cHH, s_dt.cMM);
001ebf 940e 2b8d 	CALL SUBOPT_0x65
                +
001ec1 e4e7     +LDI R30 , LOW ( 2 * _0xA0000 + 271 )
001ec2 e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 271 )
                 	__POINTW1FN _0xA0000,271
001ec3 940e 2c63 	CALL SUBOPT_0x8D
001ec5 91e0 01cc 	LDS  R30,_s_dt
001ec7 940e 2a21 	CALL SUBOPT_0x28
001ec9 940e 2b4e 	CALL SUBOPT_0x59
001ecb e08c      	LDI  R24,12
001ecc 940e 28b1 	CALL _sprintf
001ece 9660      	ADIW R28,16
                 ; 0005 0154             break;
001ecf c078      	RJMP _0xA0038
                 ; 0005 0155         case e_date:
                 _0xA0055:
001ed0 31e4      	CPI  R30,LOW(0x14)
001ed1 f489      	BRNE _0xA0056
                 ; 0005 0156             // Если указан тип дата, то выбираем из структуры даты и печатаем как дд.мм.гг
                 ; 0005 0157             sprintf(linestr, "%s%02u.%02u.%02u", pr_name, s_dt.cdd, s_dt.cmo, s_dt.cyy);
001ed2 940e 2b8d 	CALL SUBOPT_0x65
                +
001ed4 e5e3     +LDI R30 , LOW ( 2 * _0xA0000 + 283 )
001ed5 e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 283 )
                 	__POINTW1FN _0xA0000,283
001ed6 940e 2c63 	CALL SUBOPT_0x8D
001ed8 940e 2b92 	CALL SUBOPT_0x66
001eda 940e 2b95 	CALL SUBOPT_0x67
                +
001edc 91e0 01cf+LDS R30 , _s_dt + 3
                 	__GETB1MN _s_dt,3
001ede 940e 2a21 	CALL SUBOPT_0x28
001ee0 940e 2ba3 	CALL SUBOPT_0x6A
                 ; 0005 0158             break;
001ee2 c065      	RJMP _0xA0038
                 ; 0005 0159         case e_dt:
                 _0xA0056:
001ee3 31e2      	CPI  R30,LOW(0x12)
001ee4 f449      	BRNE _0xA0057
                 ; 0005 015A             sprintf(linestr, "%s Вр./Дат.", pr_name);
001ee5 940e 2b8d 	CALL SUBOPT_0x65
                +
001ee7 e6e4     +LDI R30 , LOW ( 2 * _0xA0000 + 300 )
001ee8 e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 300 )
                 	__POINTW1FN _0xA0000,300
001ee9 940e 2c63 	CALL SUBOPT_0x8D
001eeb 940e 2c5e 	CALL SUBOPT_0x8C
                 ; 0005 015B             break;
001eed c05a      	RJMP _0xA0038
                 ; 0005 015C         case e_stime:
                 _0xA0057:
001eee 30eb      	CPI  R30,LOW(0xB)
001eef f459      	BRNE _0xA0058
                 ; 0005 015D             // Если указан тип дата, то выбираем из структуры даты и печатаем как дд.мм.гг
                 ; 0005 015E             sprintf(linestr, "%s%03u", pr_name, pr_data);
001ef0 940e 2b8d 	CALL SUBOPT_0x65
                +
001ef2 e7e0     +LDI R30 , LOW ( 2 * _0xA0000 + 312 )
001ef3 e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 312 )
                 	__POINTW1FN _0xA0000,312
001ef4 940e 2c63 	CALL SUBOPT_0x8D
001ef6 940e 2c6c 	CALL SUBOPT_0x8F
001ef8 940e 2c67 	CALL SUBOPT_0x8E
                 ; 0005 015F             break;
001efa c04d      	RJMP _0xA0038
                 ; 0005 0160         case e_temperature:
                 _0xA0058:
001efb 30e5      	CPI  R30,LOW(0x5)
001efc f011      	BREQ _0xA005A
                 ; 0005 0161         case e_room:
001efd 30e6      	CPI  R30,LOW(0x6)
001efe f409      	BRNE _0xA005B
                 _0xA005A:
                 ; 0005 0162         case e_world:
001eff c002      	RJMP _0xA005C
                 _0xA005B:
001f00 30e7      	CPI  R30,LOW(0x7)
001f01 f409      	BRNE _0xA005D
                 _0xA005C:
                 ; 0005 0163         case e_water:
001f02 c002      	RJMP _0xA005E
                 _0xA005D:
001f03 30e8      	CPI  R30,LOW(0x8)
001f04 f4f1      	BRNE _0xA005F
                 _0xA005E:
                 ; 0005 0164             // Если указан тип температуры, то печатаем как температуру
                 ; 0005 0165             sprintf(linestr, "%s%c%u.%-01uC", pr_name, sign, abs(pr_data)/100, abs(pr_data%100)/10);
001f05 940e 2b8d 	CALL SUBOPT_0x65
                +
001f07 e7e7     +LDI R30 , LOW ( 2 * _0xA0000 + 319 )
001f08 e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 319 )
                 	__POINTW1FN _0xA0000,319
001f09 940e 2c63 	CALL SUBOPT_0x8D
001f0b 2fe2      	MOV  R30,R18
001f0c 940e 2a21 	CALL SUBOPT_0x28
001f0e 89eb      	LDD  R30,Y+19
001f0f 89fc      	LDD  R31,Y+19+1
001f10 940e 29c4 	CALL SUBOPT_0x1C
001f12 01df      	MOVW R26,R30
001f13 e6e4      	LDI  R30,LOW(100)
001f14 e0f0      	LDI  R31,HIGH(100)
001f15 940e 2ba0 	CALL SUBOPT_0x69
001f17 89af      	LDD  R26,Y+23
001f18 8db8      	LDD  R27,Y+23+1
001f19 940e 2b5c 	CALL SUBOPT_0x5C
001f1b 01df      	MOVW R26,R30
001f1c e0ea      	LDI  R30,LOW(10)
001f1d e0f0      	LDI  R31,HIGH(10)
001f1e 940e 2ba0 	CALL SUBOPT_0x69
001f20 940e 2ba3 	CALL SUBOPT_0x6A
                 ; 0005 0166             break;
001f22 c025      	RJMP _0xA0038
                 ; 0005 0167         case e_hour:
                 _0xA005F:
001f23 30ee      	CPI  R30,LOW(0xE)
001f24 f011      	BREQ _0xA0061
                 ; 0005 0168         case e_minute:
001f25 30ed      	CPI  R30,LOW(0xD)
001f26 f409      	BRNE _0xA0062
                 _0xA0061:
                 ; 0005 0169         case e_day:
001f27 c002      	RJMP _0xA0063
                 _0xA0062:
001f28 30ef      	CPI  R30,LOW(0xF)
001f29 f409      	BRNE _0xA0064
                 _0xA0063:
                 ; 0005 016A         case e_month:
001f2a c002      	RJMP _0xA0065
                 _0xA0064:
001f2b 31e0      	CPI  R30,LOW(0x10)
001f2c f459      	BRNE _0xA0066
                 _0xA0065:
                 ; 0005 016B             // Если указан тип [часы, минуты, день, месяц], то печатаем как есть
                 ; 0005 016C             sprintf(linestr, "%s%u", pr_name, pr_data);
001f2d 940e 2b8d 	CALL SUBOPT_0x65
                +
001f2f efeb     +LDI R30 , LOW ( 2 * _0xA0000 + 195 )
001f30 e1f2     +LDI R31 , HIGH ( 2 * _0xA0000 + 195 )
                 	__POINTW1FN _0xA0000,195
001f31 940e 2c63 	CALL SUBOPT_0x8D
001f33 940e 2c6c 	CALL SUBOPT_0x8F
001f35 940e 2c67 	CALL SUBOPT_0x8E
                 ; 0005 016D             break;
001f37 c010      	RJMP _0xA0038
                 ; 0005 016E         case e_year:
                 _0xA0066:
001f38 31e1      	CPI  R30,LOW(0x11)
001f39 f459      	BRNE _0xA0068
                 ; 0005 016F             // Если указан тип год, то печатаем как есть с тысячелетием
                 ; 0005 0170             sprintf(linestr, "%s20%u", pr_name, pr_data);
001f3a 940e 2b8d 	CALL SUBOPT_0x65
                +
001f3c e8e5     +LDI R30 , LOW ( 2 * _0xA0000 + 333 )
001f3d e1f3     +LDI R31 , HIGH ( 2 * _0xA0000 + 333 )
                 	__POINTW1FN _0xA0000,333
001f3e 940e 2c63 	CALL SUBOPT_0x8D
001f40 940e 2c6c 	CALL SUBOPT_0x8F
001f42 940e 2c67 	CALL SUBOPT_0x8E
                 ; 0005 0171             break;
001f44 c003      	RJMP _0xA0038
                 ; 0005 0172         default:
                 _0xA0068:
                 ; 0005 0173             linestr[0] = 0;
001f45 e0e0      	LDI  R30,LOW(0)
001f46 93e0 0220 	STS  _linestr,R30
                 ; 0005 0174     };
                 _0xA0038:
                 ; 0005 0175     return(linestr);
001f48 e2e0      	LDI  R30,LOW(_linestr)
001f49 e0f2      	LDI  R31,HIGH(_linestr)
001f4a 940e 314c 	CALL __LOADLOCR3
001f4c 962c      	ADIW R28,12
001f4d 9508      	RET
                 ; 0005 0176 }
                 ;// Функция, инициализирующая menu_level1
                 ;void init_curr_menu(struct st_parameter *lmenu, unsigned char lmax) {
                 ; 0005 0178 void init_curr_menu(struct st_parameter *lmenu, unsigned char lmax) {
                 _init_curr_menu:
                 ; 0005 0179     curr_menu.line0 = 0; curr_menu.line1 = 1;
                 ;	*lmenu -> Y+1
                 ;	lmax -> Y+0
001f4e e0e0      	LDI  R30,LOW(0)
001f4f 93e0 02ca 	STS  _curr_menu,R30
001f51 e0e1      	LDI  R30,LOW(1)
                +
001f52 93e0 02cb+STS _curr_menu + 1 , R30
                 	__PUTB1MN _curr_menu,1
                 ; 0005 017A 
                 ; 0005 017B     // curr_menu.menu = &main_menu[0];         // Текущий указатель устанавливаем на главное меню
                 ; 0005 017C     curr_menu.menu = lmenu;         // Текущий указатель устанавливаем на главное меню
001f54 81e9      	LDD  R30,Y+1
001f55 81fa      	LDD  R31,Y+1+1
                +
001f56 93e0 02cd+STS _curr_menu + 3 , R30
001f58 93f0 02ce+STS _curr_menu + 3 + 1 , R31
                 	__PUTW1MN _curr_menu,3
                 ; 0005 017D     // curr_menu.maximum = MENU_LEVEL1;
                 ; 0005 017E     curr_menu.maximum = lmax;
001f5a 81e8      	LD   R30,Y
                +
001f5b 93e0 02cf+STS _curr_menu + 5 , R30
                 	__PUTB1MN _curr_menu,5
                 ; 0005 017F     curr_menu.lcd = 0; // curr_menu.value = lmenu->val_data;
001f5d e0e0      	LDI  R30,LOW(0)
                +
001f5e 93e0 02cc+STS _curr_menu + 2 , R30
                 	__PUTB1MN _curr_menu,2
                 ; 0005 0180 }
001f60 c161      	RJMP _0x20E000D
                 ;/* void set_curr_line(unsigned char line) {
                 ;//     curr_menu.lcd = line;
                 ;//}
                 ;// unsigned char get_curr_line(void) {
                 ;//    return curr_menu.lcd;
                 ;//}
                 ;*/
                 ;// Функция, модифицирующая структуру содержащую указатели на текущий и следующий элемент. direction - (-1, 0, 1)
                 ;void calc_pos(struct st_array_pos *array_pos, byte maxlines, signed char direction) {
                 ; 0005 0189 void calc_pos(struct st_array_pos *array_pos, byte maxlines, signed char direction) {
                 _calc_pos:
                 ; 0005 018A     // Увеличиваем или уменьшаем текущий элемент массива строк
                 ; 0005 018B     // array_pos->line0 = array_pos->line0 + direction;
                 ; 0005 018C     array_pos->line0 += direction;      // выборка элемента структуры по адресу array_pos
                 ;	*array_pos -> Y+2
                 ;	maxlines -> Y+1
                 ;	direction -> Y+0
001f61 81aa      	LDD  R26,Y+2
001f62 81bb      	LDD  R27,Y+2+1
001f63 2e0a      	MOV  R0,R26
001f64 91ec      	LD   R30,X
001f65 81a8      	LD   R26,Y
001f66 0fea      	ADD  R30,R26
001f67 2da0      	MOV  R26,R0
001f68 93ec      	ST   X,R30
                 ; 0005 018D     // Начинаем проверки на укладываемость в диапазоне
                 ; 0005 018E     if (array_pos->line0 >= maxlines) array_pos->line0 = 0;
001f69 81aa      	LDD  R26,Y+2
001f6a 81bb      	LDD  R27,Y+2+1
001f6b 91ac      	LD   R26,X
001f6c 81e9      	LDD  R30,Y+1
001f6d 940e 2bb4 	CALL SUBOPT_0x6D
001f6f 17ae      	CP   R26,R30
001f70 07bf      	CPC  R27,R31
001f71 f024      	BRLT _0xA0069
001f72 81aa      	LDD  R26,Y+2
001f73 81bb      	LDD  R27,Y+2+1
001f74 e0e0      	LDI  R30,LOW(0)
001f75 93ec      	ST   X,R30
                 ; 0005 018F     if (array_pos->line0 < 0) { array_pos->line0 = maxlines - 1; array_pos->line1 = 0; return; }
                 _0xA0069:
001f76 81aa      	LDD  R26,Y+2
001f77 81bb      	LDD  R27,Y+2+1
001f78 91ac      	LD   R26,X
001f79 30a0      	CPI  R26,0
001f7a f44c      	BRGE _0xA006A
001f7b 81e9      	LDD  R30,Y+1
001f7c 50e1      	SUBI R30,LOW(1)
001f7d 81aa      	LDD  R26,Y+2
001f7e 81bb      	LDD  R27,Y+2+1
001f7f 93ec      	ST   X,R30
001f80 9611      	ADIW R26,1
001f81 e0e0      	LDI  R30,LOW(0)
001f82 93ec      	ST   X,R30
001f83 c019      	RJMP _0x20E000E
                 ; 0005 0190     // Анализируем то, что мы будем возвращать
                 ; 0005 0191     if ((array_pos->line0 + 1) == maxlines) array_pos->line1 = 0; else array_pos->line1 = array_pos->line0 + 1;
                 _0xA006A:
001f84 81aa      	LDD  R26,Y+2
001f85 81bb      	LDD  R27,Y+2+1
001f86 91ec      	LD   R30,X
001f87 5fef      	SUBI R30,-LOW(1)
001f88 2fae      	MOV  R26,R30
001f89 81e9      	LDD  R30,Y+1
001f8a 940e 2bb4 	CALL SUBOPT_0x6D
001f8c 17ea      	CP   R30,R26
001f8d 07fb      	CPC  R31,R27
001f8e f431      	BRNE _0xA006B
001f8f 81aa      	LDD  R26,Y+2
001f90 81bb      	LDD  R27,Y+2+1
001f91 9611      	ADIW R26,1
001f92 e0e0      	LDI  R30,LOW(0)
001f93 93ec      	ST   X,R30
001f94 c008      	RJMP _0xA006C
                 _0xA006B:
001f95 81aa      	LDD  R26,Y+2
001f96 81bb      	LDD  R27,Y+2+1
001f97 91ec      	LD   R30,X
001f98 5fef      	SUBI R30,-LOW(1)
                +
001f99 81aa     +LDD R26 , Y + 2
001f9a 81bb     +LDD R27 , Y + 2 + 1
001f9b 9611     +ADIW R26 , 1
001f9c 93ec     +ST X , R30
                 	__PUTB1SNS 2,1
                 ; 0005 0192 }
                 _0xA006C:
                 _0x20E000E:
001f9d 9624      	ADIW R28,4
001f9e 9508      	RET
                 ;// Функция вывода текущего и следующего пункта меню
                 ;void lcd_menu(signed char direction) {
                 ; 0005 0194 void lcd_menu(signed char direction) {
                 _lcd_menu:
                 ; 0005 0195     // printf ("Syncing...\r\n");
                 ; 0005 0196 
                 ; 0005 0197     // Если valcoder крутится вправо и курсор был на 1 линии, то ставим ему признак перевода на 2 линию
                 ; 0005 0198     if ((curr_menu.lcd == 0) && (direction > 0))    // Анализируем, где находится курсор и куда крутим valcoder
                 ;	direction -> Y+0
                +
001f9f 91a0 02cc+LDS R26 , _curr_menu + 2
                 	__GETB2MN _curr_menu,2
001fa1 30a0      	CPI  R26,LOW(0x0)
001fa2 f419      	BRNE _0xA006E
001fa3 81a8      	LD   R26,Y
001fa4 30a1      	CPI  R26,LOW(0x1)
001fa5 f40c      	BRGE _0xA006F
                 _0xA006E:
001fa6 c004      	RJMP _0xA006D
                 _0xA006F:
                 ; 0005 0199         curr_menu.lcd = 1;
001fa7 e0e1      	LDI  R30,LOW(1)
                +
001fa8 93e0 02cc+STS _curr_menu + 2 , R30
                 	__PUTB1MN _curr_menu,2
                 ; 0005 019A     else
001faa c019      	RJMP _0xA0070
                 _0xA006D:
                 ; 0005 019B         // Если valcoder крутится влево и курсор был на 2 линии, то ставим ему признак перевода на 1 линию
                 ; 0005 019C         if ((curr_menu.lcd == 1) && (direction < 0))
                +
001fab 91a0 02cc+LDS R26 , _curr_menu + 2
                 	__GETB2MN _curr_menu,2
001fad 30a1      	CPI  R26,LOW(0x1)
001fae f419      	BRNE _0xA0072
001faf 81a8      	LD   R26,Y
001fb0 30a0      	CPI  R26,0
001fb1 f00c      	BRLT _0xA0073
                 _0xA0072:
001fb2 c004      	RJMP _0xA0071
                 _0xA0073:
                 ; 0005 019D            curr_menu.lcd = 0;
001fb3 e0e0      	LDI  R30,LOW(0)
                +
001fb4 93e0 02cc+STS _curr_menu + 2 , R30
                 	__PUTB1MN _curr_menu,2
                 ; 0005 019E         else
001fb6 c00d      	RJMP _0xA0074
                 _0xA0071:
                 ; 0005 019F             // Если направление отличается от нуля, то модифицируем текущие пункты меню
                 ; 0005 01A0             if (direction) calc_pos(&curr_menu, curr_menu.maximum, direction);
001fb7 81e8      	LD   R30,Y
001fb8 30e0      	CPI  R30,0
001fb9 f051      	BREQ _0xA0075
001fba ecea      	LDI  R30,LOW(_curr_menu)
001fbb e0f2      	LDI  R31,HIGH(_curr_menu)
001fbc 93fa      	ST   -Y,R31
001fbd 93ea      	ST   -Y,R30
                +
001fbe 91e0 02cf+LDS R30 , _curr_menu + 5
                 	__GETB1MN _curr_menu,5
001fc0 93ea      	ST   -Y,R30
001fc1 81eb      	LDD  R30,Y+3
001fc2 93ea      	ST   -Y,R30
001fc3 df9d      	RCALL _calc_pos
                 ; 0005 01A1     // printf("LCDLine=%u, dir=%u, line0=%u, line1=%u\r\n", curr_menu.lcd, direction, curr_menu.line0, curr_menu.line1);
                 ; 0005 01A2     lcd_gotoxy(0,0);        // Устанавливаем курсор в позицию 0 строки 0
                 _0xA0075:
                 _0xA0074:
                 _0xA0070:
001fc4 940e 2b88 	CALL SUBOPT_0x64
                 ; 0005 01A3     lcd_line_menu(param_str(curr_menu.line0, curr_menu.menu), curr_menu.menu[curr_menu.line0].can_edit);
001fc6 91e0 02ca 	LDS  R30,_curr_menu
001fc8 940e 2c6f 	CALL SUBOPT_0x90
001fca 940e 2c75 	CALL SUBOPT_0x91
001fcc 91e0 02ca 	LDS  R30,_curr_menu
001fce 940e 2bd9 	CALL SUBOPT_0x74
001fd0 940e 2c53 	CALL SUBOPT_0x8A
001fd2 940e 2c7c 	CALL SUBOPT_0x92
                 ; 0005 01A4     lcd_gotoxy(0,1);        // Устанавливаем курсор в позицию 0 строки 1
001fd4 940e 294a 	CALL SUBOPT_0x7
001fd6 940e 0cc6 	CALL _lcd_gotoxy
                 ; 0005 01A5     lcd_line_menu(param_str(curr_menu.line1, curr_menu.menu), curr_menu.menu[curr_menu.line1].can_edit);
                +
001fd8 91e0 02cb+LDS R30 , _curr_menu + 1
                 	__GETB1MN _curr_menu,1
001fda 940e 2c6f 	CALL SUBOPT_0x90
001fdc 940e 2c75 	CALL SUBOPT_0x91
                +
001fde 91e0 02cb+LDS R30 , _curr_menu + 1
                 	__GETB1MN _curr_menu,1
001fe0 940e 2bd9 	CALL SUBOPT_0x74
001fe2 940e 2c53 	CALL SUBOPT_0x8A
001fe4 940e 2c7c 	CALL SUBOPT_0x92
                 ; 0005 01A6     // Устанавливаем курсор в ту строку, на которую указывает флага curr_menu.lcd
                 ; 0005 01A7     if (curr_menu.lcd) lcd_gotoxy(LCD_DISP_LENGTH-1,1); else lcd_gotoxy(LCD_DISP_LENGTH-1,0);
                +
001fe6 91e0 02cc+LDS R30 , _curr_menu + 2
                 	__GETB1MN _curr_menu,2
001fe8 30e0      	CPI  R30,0
001fe9 f021      	BREQ _0xA0076
001fea e0ef      	LDI  R30,LOW(15)
001feb 93ea      	ST   -Y,R30
001fec e0e1      	LDI  R30,LOW(1)
001fed c003      	RJMP _0xA00DE
                 _0xA0076:
001fee e0ef      	LDI  R30,LOW(15)
001fef 93ea      	ST   -Y,R30
001ff0 e0e0      	LDI  R30,LOW(0)
                 _0xA00DE:
001ff1 93ea      	ST   -Y,R30
001ff2 940e 0cc6 	CALL _lcd_gotoxy
                 ; 0005 01A8     // Даем команду на моргание курсором
                 ; 0005 01A9     lcd_command(LCD_DISP_ON_CURSOR_BLINK);
001ff4 e0ef      	LDI  R30,LOW(15)
001ff5 93ea      	ST   -Y,R30
001ff6 940e 0cbf 	CALL _lcd_command
                 ; 0005 01AA }
001ff8 9621      	ADIW R28,1
001ff9 9508      	RET
                 ;// Функция, инициализирующая режим редактирования
                 ;void lcd_init_edit(void) {
                 ; 0005 01AC void lcd_init_edit(void) {
                 _lcd_init_edit:
                 ; 0005 01AD     struct st_parameter *lmenu;     // Временная переменная, которая будет ссылаться на выбранный элемент меню
                 ; 0005 01AE     byte num_line;                  // Временная переменная, содержащая текущий элемент меню
                 ; 0005 01AF     // Устанавливаем указатель на параметры в зависимости от строки дисплея
                 ; 0005 01B0     if (curr_menu.lcd) num_line = curr_menu.line1; else num_line = curr_menu.line0;
001ffa 940e 2c84 	CALL SUBOPT_0x93
                 ;	*lmenu -> R16,R17
                 ;	num_line -> R18
001ffc f019      	BREQ _0xA0078
                +
001ffd 9120 02cb+LDS R18 , _curr_menu + 1
                 	__GETBRMN 18,_curr_menu,1
001fff c002      	RJMP _0xA0079
                 _0xA0078:
002000 9120 02ca 	LDS  R18,_curr_menu
                 ; 0005 01B1     // Если сейчас нулевой уровень меню и выбранная позиция num_line > 4
                 ; 0005 01B2     if ((curr_menu.level == 0) && (num_line >= 3)) {
                 _0xA0079:
                +
002002 91a0 02d4+LDS R26 , _curr_menu + 10
                 	__GETB2MN _curr_menu,10
002004 30a0      	CPI  R26,LOW(0x0)
002005 f411      	BRNE _0xA007B
002006 3023      	CPI  R18,3
002007 f408      	BRSH _0xA007C
                 _0xA007B:
002008 c041      	RJMP _0xA007A
                 _0xA007C:
                 ; 0005 01B3         sync_set_par(SYNC_TO_MENU); // Синхронизируем меню с глобальными структурами
002009 940e 29b3 	CALL SUBOPT_0x19
                 ; 0005 01B4         switch (num_line) {
00200b 2fe2      	MOV  R30,R18
                 ; 0005 01B5             case 3:
00200c 30e3      	CPI  R30,LOW(0x3)
00200d f499      	BRNE _0xA0080
                 ; 0005 01B6                     dt_curr_menu = curr_menu;
00200e ecea      	LDI  R30,LOW(_curr_menu)
00200f e0f2      	LDI  R31,HIGH(_curr_menu)
002010 eea3      	LDI  R26,LOW(_dt_curr_menu)
002011 e0b2      	LDI  R27,HIGH(_dt_curr_menu)
002012 e08b      	LDI  R24,11
002013 940e 3011 	CALL __COPYMML
                 ; 0005 01B7                     init_curr_menu(&sdt[0], NUM_DT);
002015 eeee      	LDI  R30,LOW(_sdt)
002016 e0f2      	LDI  R31,HIGH(_sdt)
002017 93fa      	ST   -Y,R31
002018 93ea      	ST   -Y,R30
002019 940e 296d 	CALL SUBOPT_0xD
                 ; 0005 01B8                     curr_menu.level = 1; // printf("Вход в меню установки даты и времени\r\n");
00201b e0e1      	LDI  R30,LOW(1)
                +
00201c 93e0 02d4+STS _curr_menu + 10 , R30
                 	__PUTB1MN _curr_menu,10
                 ; 0005 01B9                     mode.stop_sync_dt = 1;
                +
00201e 93e0 01bd+STS _mode + 5 , R30
                 	__PUTB1MN _mode,5
                 ; 0005 01BA                     // sync_set_taym(SYNC_TO_MENU);
                 ; 0005 01BB                     break;
002020 c025      	RJMP _0xA007F
                 ; 0005 01BC             case 4: init_curr_menu(&parameters[0], NUM_PARAMETERS);
                 _0xA0080:
002021 30e4      	CPI  R30,LOW(0x4)
002022 f441      	BRNE _0xA0081
002023 e5e7      	LDI  R30,LOW(_parameters)
002024 e0f2      	LDI  R31,HIGH(_parameters)
002025 93fa      	ST   -Y,R31
002026 93ea      	ST   -Y,R30
002027 e0eb      	LDI  R30,LOW(11)
002028 940e 2c8a 	CALL SUBOPT_0x94
                 ; 0005 01BD                     curr_menu.level = 1; // printf("Вход в меню ПАРАМЕТРЫ\r\n");
                 ; 0005 01BE                     break;
00202a c01b      	RJMP _0xA007F
                 ; 0005 01BF             case 5:
                 _0xA0081:
00202b 30e5      	CPI  R30,LOW(0x5)
00202c f461      	BRNE _0xA0082
                 ; 0005 01C0                     if (IS_ALERT) {
                +
00202d 91e0 0250+LDS R30 , _main_menu + 28
                 	__GETB1MN _main_menu,28
00202f 30e0      	CPI  R30,0
002030 f039      	BREQ _0xA0083
                 ; 0005 01C1                         init_curr_menu(&alerts[0], MAX_ALERTS);
002031 e8ee      	LDI  R30,LOW(_alerts)
002032 e0f2      	LDI  R31,HIGH(_alerts)
002033 93fa      	ST   -Y,R31
002034 93ea      	ST   -Y,R30
002035 e0ec      	LDI  R30,LOW(12)
002036 940e 2c8a 	CALL SUBOPT_0x94
                 ; 0005 01C2                         curr_menu.level = 1; // printf("Вход в меню ALERTS\r\n");
                 ; 0005 01C3                     }
                 ; 0005 01C4                     break;
                 _0xA0083:
002038 c00d      	RJMP _0xA007F
                 ; 0005 01C5             case 6:
                 _0xA0082:
002039 30e6      	CPI  R30,LOW(0x6)
00203a f459      	BRNE _0xA0086
                 ; 0005 01C6                     if (SETTINGS_OPEN) {
                +
00203b 91e0 0255+LDS R30 , _main_menu + 33
                 	__GETB1MN _main_menu,33
00203d 30e0      	CPI  R30,0
00203e f039      	BREQ _0xA0085
                 ; 0005 01C7                         init_curr_menu(&settings[0], NUM_SETTINGS);
00203f e1e1      	LDI  R30,LOW(_settings)
002040 e0f3      	LDI  R31,HIGH(_settings)
002041 93fa      	ST   -Y,R31
002042 93ea      	ST   -Y,R30
002043 e1e1      	LDI  R30,LOW(17)
002044 940e 2c8a 	CALL SUBOPT_0x94
                 ; 0005 01C8                         curr_menu.level = 1 ;//printf ("Вход в меню НАСТРОЙКИ\r\n");
                 ; 0005 01C9                     }
                 ; 0005 01CA                     break;
                 _0xA0085:
                 ; 0005 01CB             default: ;
                 _0xA0086:
                 ; 0005 01CC         }
                 _0xA007F:
                 ; 0005 01CD         mode.menu = 1;              // Общий режим - меню
002046 e0e1      	LDI  R30,LOW(1)
002047 93e0 01b8 	STS  _mode,R30
                 ; 0005 01CE         lcd_menu(0);
002049 c073      	RJMP _0x20E000C
                 ; 0005 01CF         return;
                 ; 0005 01D0     }
                 ; 0005 01D1     lmenu = &(curr_menu.menu)[num_line];
                 _0xA007A:
00204a 940e 2c91 	CALL SUBOPT_0x95
00204c 940e 2c53 	CALL SUBOPT_0x8A
00204e 0fe6      	ADD  R30,R22
00204f 1ff7      	ADC  R31,R23
002050 018f      	MOVW R16,R30
                 ; 0005 01D2     if (lmenu->can_edit == 0) {
002051 01d8      	MOVW R26,R16
002052 9613      	ADIW R26,3
002053 91ec      	LD   R30,X
002054 30e0      	CPI  R30,0
002055 f409      	BRNE _0xA0087
                 ; 0005 01D3         lcd_menu(0);
002056 c066      	RJMP _0x20E000C
                 ; 0005 01D4         return;
                 ; 0005 01D5     } else {
                 _0xA0087:
                 ; 0005 01D6         mode.menu += lmenu->can_edit; // mode.menu = mode.menu + lmenu->can_edit (значение элемента can_edit указателя lmenu на структуру)
002057 01d8      	MOVW R26,R16
002058 9613      	ADIW R26,3
002059 91ec      	LD   R30,X
00205a 91a0 01b8 	LDS  R26,_mode
00205c 0fea      	ADD  R30,R26
00205d 93e0 01b8 	STS  _mode,R30
                 ; 0005 01D7     }
                 ; 0005 01D8     curr_menu.par = lmenu;
00205f 940e 2c97 	CALL SUBOPT_0x96
                 ; 0005 01D9     curr_menu.val_data = lmenu->val_data;        // Устанавливаем в текущем меню параметр для редактирования
002061 01d8      	MOVW R26,R16
002062 940e 3004 	CALL __GETW1P
002064 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 01DA     lcd_edit(0);
002066 e0e0      	LDI  R30,LOW(0)
002067 93ea      	ST   -Y,R30
002068 d05b      	RCALL _lcd_edit
                 ; 0005 01DB }
002069 c056      	RJMP _0x20E000B
                 ;// Функция, обрабатывающая выход по Enter
                 ;void lcd_save_edit (void) {
                 ; 0005 01DD void lcd_save_edit (void) {
                 _lcd_save_edit:
                 ; 0005 01DE     struct st_parameter *lmenu;     // Временная переменная, которая будет ссылаться на выбранный элемент меню
                 ; 0005 01DF     byte num_line;                  // Временная переменная, содержащая текущий элемент меню
                 ; 0005 01E0     // Устанавливаем указатель на параметры в зависимости от строки дисплея
                 ; 0005 01E1     if (curr_menu.lcd) num_line = curr_menu.line1; else num_line = curr_menu.line0;
00206a 940e 2c84 	CALL SUBOPT_0x93
                 ;	*lmenu -> R16,R17
                 ;	num_line -> R18
00206c f019      	BREQ _0xA0089
                +
00206d 9120 02cb+LDS R18 , _curr_menu + 1
                 	__GETBRMN 18,_curr_menu,1
00206f c002      	RJMP _0xA008A
                 _0xA0089:
002070 9120 02ca 	LDS  R18,_curr_menu
                 ; 0005 01E2     lmenu = &(curr_menu.menu)[num_line];
                 _0xA008A:
002072 940e 2c91 	CALL SUBOPT_0x95
002074 940e 2c53 	CALL SUBOPT_0x8A
002076 0fe6      	ADD  R30,R22
002077 1ff7      	ADC  R31,R23
002078 018f      	MOVW R16,R30
                 ; 0005 01E3     curr_menu.par = lmenu;
002079 940e 2c97 	CALL SUBOPT_0x96
                 ; 0005 01E4     lmenu->val_data = curr_menu.val_data;
00207b 940e 2ca1 	CALL SUBOPT_0x98
00207d 01d8      	MOVW R26,R16
00207e 93ed      	ST   X+,R30
00207f 93fc      	ST   X,R31
                 ; 0005 01E5     sync_set_par(SYNC_FROM_MENU);
002080 e0e0      	LDI  R30,LOW(0)
002081 93ea      	ST   -Y,R30
002082 da94      	RCALL _sync_set_par
                 ; 0005 01E6     if (mode.stop_sync_dt) {
                +
002083 91e0 01bd+LDS R30 , _mode + 5
                 	__GETB1MN _mode,5
002085 30e0      	CPI  R30,0
002086 f021      	BREQ _0xA008B
                 ; 0005 01E7         // printf ("Вход в меню main_menu \r\n"); // Синхронизация по выходу
                 ; 0005 01E8         // init_curr_menu(&main_menu[0], NUM_MENU);
                 ; 0005 01E9         curr_menu = dt_curr_menu;
002087 940e 2ca6 	CALL SUBOPT_0x99
                 ; 0005 01EA         curr_menu.level = 0;
002089 940e 2cae 	CALL SUBOPT_0x9A
                 ; 0005 01EB         mode.stop_sync_dt = 0;      // снимаем флаг запрета синхронизации
                 ; 0005 01EC     }
                 ; 0005 01ED     // Здесь параметр надо записать в EEPROM !!!!
                 ; 0005 01EE     if (need_eeprom_write) {
                 _0xA008B:
00208b fe20      	SBRS R2,0
00208c c006      	RJMP _0xA008C
                 ; 0005 01EF         eeprom_write_struct ((char *)&prim_par, sizeof(prim_par));
00208d 940e 29a1 	CALL SUBOPT_0x16
00208f 940e 2cb4 	CALL SUBOPT_0x9B
                 ; 0005 01F0         // Снимаем флаг необходимости записи в EEPROM
                 ; 0005 01F1         need_eeprom_write = 0;
002091 94e8      	CLT
002092 f820      	BLD  R2,0
                 ; 0005 01F2     }
                 ; 0005 01F3     lcd_menu(0);
                 _0xA008C:
002093 c029      	RJMP _0x20E000C
                 ; 0005 01F4     return;
                 ; 0005 01F5 }
                 ;// Функция, инициализирующая/деинициализирующая режим редактирования (0 - инициализация, 1 - выход по Enter, -1 - выход по Cancel
                 ;void lcd_esc_edit(void) {
                 ; 0005 01F7 void lcd_esc_edit(void) {
                 _lcd_esc_edit:
                 ; 0005 01F8     struct st_parameter *lmenu;     // Временная переменная, которая будет ссылаться на выбранный элемент меню
                 ; 0005 01F9     byte num_line;                  // Временная переменная, содержащая текущий элемент меню
                 ; 0005 01FA     // Устанавливаем указатель на параметры в зависимости от строки дисплея
                 ; 0005 01FB     if (curr_menu.lcd) num_line = curr_menu.line1; else num_line = curr_menu.line0;
002094 940e 2c84 	CALL SUBOPT_0x93
                 ;	*lmenu -> R16,R17
                 ;	num_line -> R18
002096 f019      	BREQ _0xA008D
                +
002097 9120 02cb+LDS R18 , _curr_menu + 1
                 	__GETBRMN 18,_curr_menu,1
002099 c002      	RJMP _0xA008E
                 _0xA008D:
00209a 9120 02ca 	LDS  R18,_curr_menu
                 ; 0005 01FC     // Перенесен блок в lcd_init_edit
                 ; 0005 01FD     lmenu = &(curr_menu.menu)[num_line];
                 _0xA008E:
00209c 940e 2c91 	CALL SUBOPT_0x95
00209e 940e 2c53 	CALL SUBOPT_0x8A
0020a0 0fe6      	ADD  R30,R22
0020a1 1ff7      	ADC  R31,R23
0020a2 018f      	MOVW R16,R30
                 ; 0005 01FE     // Если не нулевой уровень и нажата кнопка Cancel или ev_timer
                 ; 0005 01FF     // printf("INIT EDIT(%d): %s = %i-->%i [%u]\r\n", initmode, lmenu->val_name, curr_menu.val_data, lmenu->val_data, curr_menu.level);
                 ; 0005 0200     if (curr_menu.level || mode.stop_sync_dt) {
                +
0020a3 91e0 02d4+LDS R30 , _curr_menu + 10
                 	__GETB1MN _curr_menu,10
0020a5 30e0      	CPI  R30,0
0020a6 f421      	BRNE _0xA0090
                +
0020a7 91e0 01bd+LDS R30 , _mode + 5
                 	__GETB1MN _mode,5
0020a9 30e0      	CPI  R30,0
0020aa f071      	BREQ _0xA008F
                 _0xA0090:
                 ; 0005 0201         // printf ("Вход в меню main_menu \r\n"); // Синхронизация по выходу
                 ; 0005 0202         if (mode.stop_sync_dt)
                +
0020ab 91e0 01bd+LDS R30 , _mode + 5
                 	__GETB1MN _mode,5
0020ad 30e0      	CPI  R30,0
0020ae f019      	BREQ _0xA0092
                 ; 0005 0203             curr_menu = dt_curr_menu;
0020af 940e 2ca6 	CALL SUBOPT_0x99
                 ; 0005 0204         else
0020b1 c004      	RJMP _0xA0093
                 _0xA0092:
                 ; 0005 0205             init_curr_menu(&main_menu[0], NUM_MENU);
0020b2 940e 2968 	CALL SUBOPT_0xC
0020b4 940e 296d 	CALL SUBOPT_0xD
                 ; 0005 0206         curr_menu.level = 0;
                 _0xA0093:
0020b6 940e 2cae 	CALL SUBOPT_0x9A
                 ; 0005 0207         mode.stop_sync_dt = 0;
                 ; 0005 0208         return;
0020b8 c007      	RJMP _0x20E000B
                 ; 0005 0209     }
                 ; 0005 020A     // Перенесен блок в lcd_init_edit
                 ; 0005 020B     curr_menu.par = lmenu;
                 _0xA008F:
0020b9 940e 2c97 	CALL SUBOPT_0x96
                 ; 0005 020C     // printf("INIT EDIT(%d): %s = %i [%i]\r\n", initmode, lmenu->val_name, lmenu->val_data, curr_menu.val_data);
                 ; 0005 020D     curr_menu.val_data = 0;
0020bb 940e 2cb8 	CALL SUBOPT_0x9C
                 ; 0005 020E     lcd_menu(0);
                 _0x20E000C:
0020bd e0e0      	LDI  R30,LOW(0)
0020be 93ea      	ST   -Y,R30
0020bf dedf      	RCALL _lcd_menu
                 ; 0005 020F     return;
                 _0x20E000B:
0020c0 940e 314c 	CALL __LOADLOCR3
                 _0x20E000D:
0020c2 9623      	ADIW R28,3
0020c3 9508      	RET
                 ; 0005 0210 }
                 ;// Функция редактирующая текущий параметр меню. В качестве параметра передается вращение valcoder
                 ;void lcd_edit(signed char direction) {
                 ; 0005 0212 void lcd_edit(signed char direction) {
                 _lcd_edit:
                 ; 0005 0213     struct st_parameter *lmenu;
                 ; 0005 0214     lmenu = curr_menu.par;
0020c4 931a      	ST   -Y,R17
0020c5 930a      	ST   -Y,R16
                 ;	direction -> Y+2
                 ;	*lmenu -> R16,R17
                +
0020c6 9100 02d0+LDS R16 , _curr_menu + 6
0020c8 9110 02d1+LDS R17 , _curr_menu + 6 + 1
                 	__GETWRMN 16,17,_curr_menu,6
                 ; 0005 0215     // printf("EDIT (%d): LCDLine=%u, line0=%u, line1=%u\r\n", direction, curr_menu.lcd, curr_menu.line0, curr_menu.line1);
                 ; 0005 0216     // (Де-)Инкрементацию делать надо в зависимости от типа переменной.
                 ; 0005 0217     switch (lmenu->val_type) {
0020ca 01d8      	MOVW R26,R16
0020cb 9612      	ADIW R26,2
0020cc 91ec      	LD   R30,X
                 ; 0005 0218         case e_empty:
0020cd 30e0      	CPI  R30,0
0020ce f409      	BRNE _0xA0097
                 ; 0005 0219             // curr_menu.val_data - не меняет свое значение
                 ; 0005 021A             break;
0020cf c1a8      	RJMP _0xA0096
                 ; 0005 021B         case e_clatsman:
                 _0xA0097:
0020d0 30e1      	CPI  R30,LOW(0x1)
0020d1 f011      	BREQ _0xA0099
                 ; 0005 021C         case e_winter:
0020d2 30e2      	CPI  R30,LOW(0x2)
0020d3 f489      	BRNE _0xA009A
                 _0xA0099:
                 ; 0005 021D             // curr_menu.val_data - принимает значение 0 или 1
                 ; 0005 021E             if (direction) if(curr_menu.val_data) curr_menu.val_data = 0; else curr_menu.val_data = 1;
0020d4 81ea      	LDD  R30,Y+2
0020d5 30e0      	CPI  R30,0
0020d6 f069      	BREQ _0xA009B
0020d7 940e 2ca1 	CALL SUBOPT_0x98
0020d9 9730      	SBIW R30,0
0020da f019      	BREQ _0xA009C
0020db e0e0      	LDI  R30,LOW(0)
0020dc e0f0      	LDI  R31,HIGH(0)
0020dd c002      	RJMP _0xA00DF
                 _0xA009C:
0020de e0e1      	LDI  R30,LOW(1)
0020df e0f0      	LDI  R31,HIGH(1)
                 _0xA00DF:
                +
0020e0 93e0 02d2+STS _curr_menu + 8 , R30
0020e2 93f0 02d3+STS _curr_menu + 8 + 1 , R31
                 	__PUTW1MN _curr_menu,8
                 ; 0005 021F             // curr_menu.val_data = ~curr_menu.val_data;
                 ; 0005 0220             break;
                 _0xA009B:
0020e4 c193      	RJMP _0xA0096
                 ; 0005 0221         case e_isfour:
                 _0xA009A:
0020e5 30e3      	CPI  R30,LOW(0x3)
0020e6 f489      	BRNE _0xA009E
                 ; 0005 0222             if (direction) if (curr_menu.val_data) curr_menu.val_data = 0; else curr_menu.val_data = 3;
0020e7 81ea      	LDD  R30,Y+2
0020e8 30e0      	CPI  R30,0
0020e9 f069      	BREQ _0xA009F
0020ea 940e 2ca1 	CALL SUBOPT_0x98
0020ec 9730      	SBIW R30,0
0020ed f019      	BREQ _0xA00A0
0020ee e0e0      	LDI  R30,LOW(0)
0020ef e0f0      	LDI  R31,HIGH(0)
0020f0 c002      	RJMP _0xA00E0
                 _0xA00A0:
0020f1 e0e3      	LDI  R30,LOW(3)
0020f2 e0f0      	LDI  R31,HIGH(3)
                 _0xA00E0:
                +
0020f3 93e0 02d2+STS _curr_menu + 8 , R30
0020f5 93f0 02d3+STS _curr_menu + 8 + 1 , R31
                 	__PUTW1MN _curr_menu,8
                 ; 0005 0223             break;
                 _0xA009F:
0020f7 c180      	RJMP _0xA0096
                 ; 0005 0224         case e_temperature:
                 _0xA009E:
0020f8 30e5      	CPI  R30,LOW(0x5)
0020f9 f4b9      	BRNE _0xA00A2
                 ; 0005 0225             // Изменение температуры идет с шагом +/-0,1 градуса
                 ; 0005 0226             curr_menu.val_data += (int)direction * 10;
0020fa 940e 2cbb 	CALL SUBOPT_0x9D
                 ; 0005 0227             if (curr_menu.val_data > 10000) curr_menu.val_data = -3000;
0020fc 940e 2cc6 	CALL SUBOPT_0x9E
0020fe 31a1      	CPI  R26,LOW(0x2711)
0020ff e2e7      	LDI  R30,HIGH(0x2711)
002100 07be      	CPC  R27,R30
002101 f024      	BRLT _0xA00A3
002102 e4e8      	LDI  R30,LOW(62536)
002103 eff4      	LDI  R31,HIGH(62536)
002104 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 0228             if (curr_menu.val_data < -3000) curr_menu.val_data = 10000;
                 _0xA00A3:
002106 940e 2cc6 	CALL SUBOPT_0x9E
002108 34a8      	CPI  R26,LOW(0xF448)
002109 efe4      	LDI  R30,HIGH(0xF448)
00210a 07be      	CPC  R27,R30
00210b f424      	BRGE _0xA00A4
00210c e1e0      	LDI  R30,LOW(10000)
00210d e2f7      	LDI  R31,HIGH(10000)
00210e 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 0229             break;
                 _0xA00A4:
002110 c167      	RJMP _0xA0096
                 ; 0005 022A         case e_room:
                 _0xA00A2:
002111 30e6      	CPI  R30,LOW(0x6)
002112 f4b9      	BRNE _0xA00A5
                 ; 0005 022B             // Изменение температуры идет с шагом +/-0,1 градуса
                 ; 0005 022C             curr_menu.val_data += (int)direction * 10;
002113 940e 2cbb 	CALL SUBOPT_0x9D
                 ; 0005 022D             if (curr_menu.val_data > 3000) curr_menu.val_data = 500;
002115 940e 2cc6 	CALL SUBOPT_0x9E
002117 3ba9      	CPI  R26,LOW(0xBB9)
002118 e0eb      	LDI  R30,HIGH(0xBB9)
002119 07be      	CPC  R27,R30
00211a f024      	BRLT _0xA00A6
00211b efe4      	LDI  R30,LOW(500)
00211c e0f1      	LDI  R31,HIGH(500)
00211d 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 022E             if (curr_menu.val_data < 500) curr_menu.val_data = 3000;
                 _0xA00A6:
00211f 940e 2cc6 	CALL SUBOPT_0x9E
002121 3fa4      	CPI  R26,LOW(0x1F4)
002122 e0e1      	LDI  R30,HIGH(0x1F4)
002123 07be      	CPC  R27,R30
002124 f424      	BRGE _0xA00A7
002125 ebe8      	LDI  R30,LOW(3000)
002126 e0fb      	LDI  R31,HIGH(3000)
002127 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 022F             break;
                 _0xA00A7:
002129 c14e      	RJMP _0xA0096
                 ; 0005 0230         case e_world:
                 _0xA00A5:
00212a 30e7      	CPI  R30,LOW(0x7)
00212b f4c9      	BRNE _0xA00A8
                 ; 0005 0231             // Изменение температуры идет с шагом +/-1 градус
                 ; 0005 0232             curr_menu.val_data += (int)direction * 100;
00212c 940e 2ccb 	CALL SUBOPT_0x9F
00212e 940e 2cd0 	CALL SUBOPT_0xA0
                 ; 0005 0233             if (curr_menu.val_data > 3000) curr_menu.val_data = -3000;
002130 940e 2cc6 	CALL SUBOPT_0x9E
002132 3ba9      	CPI  R26,LOW(0xBB9)
002133 e0eb      	LDI  R30,HIGH(0xBB9)
002134 07be      	CPC  R27,R30
002135 f024      	BRLT _0xA00A9
002136 e4e8      	LDI  R30,LOW(62536)
002137 eff4      	LDI  R31,HIGH(62536)
002138 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 0234             if (curr_menu.val_data < -3000) curr_menu.val_data = 3000;
                 _0xA00A9:
00213a 940e 2cc6 	CALL SUBOPT_0x9E
00213c 34a8      	CPI  R26,LOW(0xF448)
00213d efe4      	LDI  R30,HIGH(0xF448)
00213e 07be      	CPC  R27,R30
00213f f424      	BRGE _0xA00AA
002140 ebe8      	LDI  R30,LOW(3000)
002141 e0fb      	LDI  R31,HIGH(3000)
002142 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 0235             break;
                 _0xA00AA:
002144 c133      	RJMP _0xA0096
                 ; 0005 0236         case e_water:
                 _0xA00A8:
002145 30e8      	CPI  R30,LOW(0x8)
002146 f4c9      	BRNE _0xA00AB
                 ; 0005 0237             // Изменение температуры идет с шагом +/-1 градус
                 ; 0005 0238             curr_menu.val_data += (int)direction * 100;
002147 940e 2ccb 	CALL SUBOPT_0x9F
002149 940e 2cd0 	CALL SUBOPT_0xA0
                 ; 0005 0239             if (curr_menu.val_data > 10000) curr_menu.val_data = 500;
00214b 940e 2cc6 	CALL SUBOPT_0x9E
00214d 31a1      	CPI  R26,LOW(0x2711)
00214e e2e7      	LDI  R30,HIGH(0x2711)
00214f 07be      	CPC  R27,R30
002150 f024      	BRLT _0xA00AC
002151 efe4      	LDI  R30,LOW(500)
002152 e0f1      	LDI  R31,HIGH(500)
002153 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 023A             if (curr_menu.val_data < 500) curr_menu.val_data = 10000;
                 _0xA00AC:
002155 940e 2cc6 	CALL SUBOPT_0x9E
002157 3fa4      	CPI  R26,LOW(0x1F4)
002158 e0e1      	LDI  R30,HIGH(0x1F4)
002159 07be      	CPC  R27,R30
00215a f424      	BRGE _0xA00AD
00215b e1e0      	LDI  R30,LOW(10000)
00215c e2f7      	LDI  R31,HIGH(10000)
00215d 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 023B             break;
                 _0xA00AD:
00215f c118      	RJMP _0xA0096
                 ; 0005 023C         case e_percent:
                 _0xA00AB:
002160 30e4      	CPI  R30,LOW(0x4)
002161 f4a9      	BRNE _0xA00AE
                 ; 0005 023D             // Изменение порцентов идет с шагом +/-1 %
                 ; 0005 023E             curr_menu.val_data += direction;
002162 940e 2cc6 	CALL SUBOPT_0x9E
002164 940e 2cd3 	CALL SUBOPT_0xA1
                 ; 0005 023F             //  curr_menu.val_data += 3*direction;
                 ; 0005 0240             if (curr_menu.val_data > 0xFF) curr_menu.val_data = 0;
002166 940e 2cc6 	CALL SUBOPT_0x9E
002168 30a0      	CPI  R26,LOW(0x100)
002169 e0e1      	LDI  R30,HIGH(0x100)
00216a 07be      	CPC  R27,R30
00216b f014      	BRLT _0xA00AF
00216c 940e 2cb8 	CALL SUBOPT_0x9C
                 ; 0005 0241             if (curr_menu.val_data < 0) curr_menu.val_data = 0xFF;
                 _0xA00AF:
                +
00216e 91a0 02d3+LDS R26 , _curr_menu + 9
                 	__GETB2MN _curr_menu,9
002170 23aa      	TST  R26
002171 f422      	BRPL _0xA00B0
002172 efef      	LDI  R30,LOW(255)
002173 e0f0      	LDI  R31,HIGH(255)
002174 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 0242             break;
                 _0xA00B0:
002176 c101      	RJMP _0xA0096
                 ; 0005 0243         case e_coef:
                 _0xA00AE:
002177 30e9      	CPI  R30,LOW(0x9)
002178 f4a9      	BRNE _0xA00B1
                 ; 0005 0244             curr_menu.val_data += direction;
002179 940e 2cc6 	CALL SUBOPT_0x9E
00217b 940e 2cd3 	CALL SUBOPT_0xA1
                 ; 0005 0245             if (curr_menu.val_data < 0 ) curr_menu.val_data = 0xFF;
                +
00217d 91a0 02d3+LDS R26 , _curr_menu + 9
                 	__GETB2MN _curr_menu,9
00217f 23aa      	TST  R26
002180 f422      	BRPL _0xA00B2
002181 efef      	LDI  R30,LOW(255)
002182 e0f0      	LDI  R31,HIGH(255)
002183 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 0246             if (curr_menu.val_data > 0xFF) curr_menu.val_data = 0;
                 _0xA00B2:
002185 940e 2cc6 	CALL SUBOPT_0x9E
002187 30a0      	CPI  R26,LOW(0x100)
002188 e0e1      	LDI  R30,HIGH(0x100)
002189 07be      	CPC  R27,R30
00218a f014      	BRLT _0xA00B3
00218b 940e 2cb8 	CALL SUBOPT_0x9C
                 ; 0005 0247             break;
                 _0xA00B3:
00218d c0ea      	RJMP _0xA0096
                 ; 0005 0248         case e_scale:
                 _0xA00B1:
00218e 30ea      	CPI  R30,LOW(0xA)
00218f f4c9      	BRNE _0xA00B4
                 ; 0005 0249             curr_menu.val_data += direction;
002190 940e 2cc6 	CALL SUBOPT_0x9E
002192 940e 2cd3 	CALL SUBOPT_0xA1
                 ; 0005 024A             if (curr_menu.val_data < -128 ) curr_menu.val_data = 127;
002194 940e 2cc6 	CALL SUBOPT_0x9E
002196 38a0      	CPI  R26,LOW(0xFF80)
002197 efef      	LDI  R30,HIGH(0xFF80)
002198 07be      	CPC  R27,R30
002199 f424      	BRGE _0xA00B5
00219a e7ef      	LDI  R30,LOW(127)
00219b e0f0      	LDI  R31,HIGH(127)
00219c 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 024B             if (curr_menu.val_data > 127) curr_menu.val_data = -128;
                 _0xA00B5:
00219e 940e 2cc6 	CALL SUBOPT_0x9E
0021a0 38a0      	CPI  R26,LOW(0x80)
0021a1 e0e0      	LDI  R30,HIGH(0x80)
0021a2 07be      	CPC  R27,R30
0021a3 f024      	BRLT _0xA00B6
0021a4 e8e0      	LDI  R30,LOW(65408)
0021a5 efff      	LDI  R31,HIGH(65408)
0021a6 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 024C             break;
                 _0xA00B6:
0021a8 c0cf      	RJMP _0xA0096
                 ; 0005 024D         case e_stime:
                 _0xA00B4:
0021a9 30eb      	CPI  R30,LOW(0xB)
0021aa f589      	BRNE _0xA00B7
                 ; 0005 024E             if (curr_menu.val_data < 100) curr_menu.val_data += direction; else
0021ab 940e 2cc6 	CALL SUBOPT_0x9E
0021ad 36a4      	CPI  R26,LOW(0x64)
0021ae e0e0      	LDI  R30,HIGH(0x64)
0021af 07be      	CPC  R27,R30
0021b0 f43c      	BRGE _0xA00B8
0021b1 940e 2cc6 	CALL SUBOPT_0x9E
0021b3 81ea      	LDD  R30,Y+2
0021b4 e0f0      	LDI  R31,0
0021b5 fde7      	SBRC R30,7
0021b6 efff      	SER  R31
0021b7 c00f      	RJMP _0xA00E1
                 _0xA00B8:
                 ; 0005 024F                 if (curr_menu.val_data < 1000) curr_menu.val_data += (int)direction*10; else
0021b8 940e 2cc6 	CALL SUBOPT_0x9E
0021ba 3ea8      	CPI  R26,LOW(0x3E8)
0021bb e0e3      	LDI  R30,HIGH(0x3E8)
0021bc 07be      	CPC  R27,R30
0021bd f41c      	BRGE _0xA00BA
0021be 81ea      	LDD  R30,Y+2
0021bf e0aa      	LDI  R26,LOW(10)
0021c0 c002      	RJMP _0xA00E2
                 _0xA00BA:
                 ; 0005 0250                     curr_menu.val_data += (int)direction*100;
0021c1 81ea      	LDD  R30,Y+2
0021c2 e6a4      	LDI  R26,LOW(100)
                 _0xA00E2:
0021c3 02ea      	MULS R30,R26
0021c4 01f0      	MOVW R30,R0
0021c5 940e 2cc6 	CALL SUBOPT_0x9E
                 _0xA00E1:
0021c7 0fea      	ADD  R30,R26
0021c8 1ffb      	ADC  R31,R27
0021c9 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 0251             if (curr_menu.val_data < 0) curr_menu.val_data = 3600;
                +
0021cb 91a0 02d3+LDS R26 , _curr_menu + 9
                 	__GETB2MN _curr_menu,9
0021cd 23aa      	TST  R26
0021ce f422      	BRPL _0xA00BC
0021cf e1e0      	LDI  R30,LOW(3600)
0021d0 e0fe      	LDI  R31,HIGH(3600)
0021d1 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 0252             if (curr_menu.val_data > 3600) curr_menu.val_data = 0;
                 _0xA00BC:
0021d3 940e 2cc6 	CALL SUBOPT_0x9E
0021d5 31a1      	CPI  R26,LOW(0xE11)
0021d6 e0ee      	LDI  R30,HIGH(0xE11)
0021d7 07be      	CPC  R27,R30
0021d8 f014      	BRLT _0xA00BD
0021d9 940e 2cb8 	CALL SUBOPT_0x9C
                 ; 0005 0253             break;
                 _0xA00BD:
0021db c09c      	RJMP _0xA0096
                 ; 0005 0254         case e_minute:          // Время в минутах [00..59]
                 _0xA00B7:
0021dc 30ed      	CPI  R30,LOW(0xD)
0021dd f499      	BRNE _0xA00BE
                 ; 0005 0255             curr_menu.val_data += direction;
0021de 940e 2cc6 	CALL SUBOPT_0x9E
0021e0 940e 2cd3 	CALL SUBOPT_0xA1
                 ; 0005 0256             if (curr_menu.val_data < 0) curr_menu.val_data = 59;
                +
0021e2 91a0 02d3+LDS R26 , _curr_menu + 9
                 	__GETB2MN _curr_menu,9
0021e4 23aa      	TST  R26
0021e5 f422      	BRPL _0xA00BF
0021e6 e3eb      	LDI  R30,LOW(59)
0021e7 e0f0      	LDI  R31,HIGH(59)
0021e8 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 0257             if (curr_menu.val_data > 59) curr_menu.val_data = 0;
                 _0xA00BF:
0021ea 940e 2cc6 	CALL SUBOPT_0x9E
0021ec 97dc      	SBIW R26,60
0021ed f014      	BRLT _0xA00C0
0021ee 940e 2cb8 	CALL SUBOPT_0x9C
                 ; 0005 0258             break;
                 _0xA00C0:
0021f0 c087      	RJMP _0xA0096
                 ; 0005 0259         case e_hour:            // Время в часах [00..23]
                 _0xA00BE:
0021f1 30ee      	CPI  R30,LOW(0xE)
0021f2 f499      	BRNE _0xA00C1
                 ; 0005 025A             curr_menu.val_data += direction;
0021f3 940e 2cc6 	CALL SUBOPT_0x9E
0021f5 940e 2cd3 	CALL SUBOPT_0xA1
                 ; 0005 025B             if (curr_menu.val_data < 0) curr_menu.val_data = 23;
                +
0021f7 91a0 02d3+LDS R26 , _curr_menu + 9
                 	__GETB2MN _curr_menu,9
0021f9 23aa      	TST  R26
0021fa f422      	BRPL _0xA00C2
0021fb e1e7      	LDI  R30,LOW(23)
0021fc e0f0      	LDI  R31,HIGH(23)
0021fd 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 025C             if (curr_menu.val_data > 23) curr_menu.val_data = 0;
                 _0xA00C2:
0021ff 940e 2cc6 	CALL SUBOPT_0x9E
002201 9758      	SBIW R26,24
002202 f014      	BRLT _0xA00C3
002203 940e 2cb8 	CALL SUBOPT_0x9C
                 ; 0005 025D             break;
                 _0xA00C3:
002205 c072      	RJMP _0xA0096
                 ; 0005 025E         case e_day:              // Дни [01..31]
                 _0xA00C1:
002206 30ef      	CPI  R30,LOW(0xF)
002207 f4a9      	BRNE _0xA00C4
                 ; 0005 025F             curr_menu.val_data += direction;
002208 940e 2cc6 	CALL SUBOPT_0x9E
00220a 940e 2cd3 	CALL SUBOPT_0xA1
                 ; 0005 0260             if (curr_menu.val_data < 1) curr_menu.val_data = 31;
00220c 940e 2cc6 	CALL SUBOPT_0x9E
00220e 9711      	SBIW R26,1
00220f f424      	BRGE _0xA00C5
002210 e1ef      	LDI  R30,LOW(31)
002211 e0f0      	LDI  R31,HIGH(31)
002212 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 0261             if (curr_menu.val_data > 31) curr_menu.val_data = 1;
                 _0xA00C5:
002214 940e 2cc6 	CALL SUBOPT_0x9E
002216 9790      	SBIW R26,32
002217 f024      	BRLT _0xA00C6
002218 e0e1      	LDI  R30,LOW(1)
002219 e0f0      	LDI  R31,HIGH(1)
00221a 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 0262             break;
                 _0xA00C6:
00221c c05b      	RJMP _0xA0096
                 ; 0005 0263         case e_month:            // Месяцы [01..12]
                 _0xA00C4:
00221d 31e0      	CPI  R30,LOW(0x10)
00221e f4a9      	BRNE _0xA00C7
                 ; 0005 0264             curr_menu.val_data += direction;
00221f 940e 2cc6 	CALL SUBOPT_0x9E
002221 940e 2cd3 	CALL SUBOPT_0xA1
                 ; 0005 0265             if (curr_menu.val_data < 1) curr_menu.val_data = 12;
002223 940e 2cc6 	CALL SUBOPT_0x9E
002225 9711      	SBIW R26,1
002226 f424      	BRGE _0xA00C8
002227 e0ec      	LDI  R30,LOW(12)
002228 e0f0      	LDI  R31,HIGH(12)
002229 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 0266             if (curr_menu.val_data > 12) curr_menu.val_data = 1;
                 _0xA00C8:
00222b 940e 2cc6 	CALL SUBOPT_0x9E
00222d 971d      	SBIW R26,13
00222e f024      	BRLT _0xA00C9
00222f e0e1      	LDI  R30,LOW(1)
002230 e0f0      	LDI  R31,HIGH(1)
002231 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 0267             break;
                 _0xA00C9:
002233 c044      	RJMP _0xA0096
                 ; 0005 0268         case e_year:             // Года [00..99]
                 _0xA00C7:
002234 31e1      	CPI  R30,LOW(0x11)
002235 f4b9      	BRNE _0xA00CA
                 ; 0005 0269             curr_menu.val_data += direction;
002236 940e 2cc6 	CALL SUBOPT_0x9E
002238 940e 2cd3 	CALL SUBOPT_0xA1
                 ; 0005 026A             if (curr_menu.val_data < 11) curr_menu.val_data = 99;
00223a 940e 2cc6 	CALL SUBOPT_0x9E
00223c 971b      	SBIW R26,11
00223d f424      	BRGE _0xA00CB
00223e e6e3      	LDI  R30,LOW(99)
00223f e0f0      	LDI  R31,HIGH(99)
002240 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 026B             if (curr_menu.val_data > 99) curr_menu.val_data = 11;
                 _0xA00CB:
002242 940e 2cc6 	CALL SUBOPT_0x9E
002244 36a4      	CPI  R26,LOW(0x64)
002245 e0e0      	LDI  R30,HIGH(0x64)
002246 07be      	CPC  R27,R30
002247 f024      	BRLT _0xA00CC
002248 e0eb      	LDI  R30,LOW(11)
002249 e0f0      	LDI  R31,HIGH(11)
00224a 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 026C             break;
                 _0xA00CC:
00224c c02b      	RJMP _0xA0096
                 ; 0005 026D         case e_alert:
                 _0xA00CA:
00224d 31e7      	CPI  R30,LOW(0x17)
00224e f431      	BRNE _0xA00CD
                 ; 0005 026E             if (direction) curr_menu.val_data = 0;
00224f 81ea      	LDD  R30,Y+2
002250 30e0      	CPI  R30,0
002251 f011      	BREQ _0xA00CE
002252 940e 2cb8 	CALL SUBOPT_0x9C
                 ; 0005 026F             break;
                 _0xA00CE:
002254 c023      	RJMP _0xA0096
                 ; 0005 0270         case e_password:
                 _0xA00CD:
002255 31e8      	CPI  R30,LOW(0x18)
002256 f4e9      	BRNE _0xA00D2
                 ; 0005 0271             curr_menu.val_data += direction;
002257 940e 2cc6 	CALL SUBOPT_0x9E
002259 940e 2cd3 	CALL SUBOPT_0xA1
                 ; 0005 0272             SETTINGS_OPEN = (curr_menu.val_data == 20);
00225b 940e 2cc6 	CALL SUBOPT_0x9E
00225d e1e4      	LDI  R30,LOW(20)
00225e e0f0      	LDI  R31,HIGH(20)
00225f 940e 2f53 	CALL __EQW12
                +
002261 93e0 0255+STS _main_menu + 33 , R30
                 	__PUTB1MN _main_menu,33
                 ; 0005 0273             if (curr_menu.val_data < 0) curr_menu.val_data = 99;
                +
002263 91a0 02d3+LDS R26 , _curr_menu + 9
                 	__GETB2MN _curr_menu,9
002265 23aa      	TST  R26
002266 f422      	BRPL _0xA00D0
002267 e6e3      	LDI  R30,LOW(99)
002268 e0f0      	LDI  R31,HIGH(99)
002269 940e 2c9c 	CALL SUBOPT_0x97
                 ; 0005 0274             if (curr_menu.val_data > 99) curr_menu.val_data = 0;
                 _0xA00D0:
00226b 940e 2cc6 	CALL SUBOPT_0x9E
00226d 36a4      	CPI  R26,LOW(0x64)
00226e e0e0      	LDI  R30,HIGH(0x64)
00226f 07be      	CPC  R27,R30
002270 f014      	BRLT _0xA00D1
002271 940e 2cb8 	CALL SUBOPT_0x9C
                 ; 0005 0275             break;
                 _0xA00D1:
002273 c004      	RJMP _0xA0096
                 ; 0005 0276         default:
                 _0xA00D2:
                 ; 0005 0277             curr_menu.val_data += direction;
002274 940e 2cc6 	CALL SUBOPT_0x9E
002276 940e 2cd3 	CALL SUBOPT_0xA1
                 ; 0005 0278     }
                 _0xA0096:
                 ; 0005 0279     // Рисуем две строки.
                 ; 0005 027A     lcd_gotoxy(0,0);        // Устанавливаем курсор в позицию 0 строки 1
002278 940e 2b88 	CALL SUBOPT_0x64
                 ; 0005 027B     lcd_line_menu(par_str(lmenu, 0, lmenu->val_data), 0);
00227a 931a      	ST   -Y,R17
00227b 930a      	ST   -Y,R16
00227c e0e0      	LDI  R30,LOW(0)
00227d 93ea      	ST   -Y,R30
00227e 01d8      	MOVW R26,R16
00227f 940e 2cd8 	CALL SUBOPT_0xA2
002281 db31      	RCALL _par_str
002282 940e 2a7f 	CALL SUBOPT_0x37
002284 940e 0d15 	CALL _lcd_line_menu
                 ; 0005 027C     lcd_gotoxy(0,1);        // Устанавливаем курсор в позицию 0 строки 1
002286 940e 294a 	CALL SUBOPT_0x7
002288 940e 0cc6 	CALL _lcd_gotoxy
                 ; 0005 027D     lcd_line_menu(par_str(lmenu, 1, curr_menu.val_data), 0);
00228a 931a      	ST   -Y,R17
00228b 930a      	ST   -Y,R16
00228c e0e1      	LDI  R30,LOW(1)
00228d 93ea      	ST   -Y,R30
00228e 940e 2ca1 	CALL SUBOPT_0x98
002290 93fa      	ST   -Y,R31
002291 93ea      	ST   -Y,R30
002292 db20      	RCALL _par_str
002293 940e 2a7f 	CALL SUBOPT_0x37
002295 940e 0d15 	CALL _lcd_line_menu
                 ; 0005 027E     lcd_command(LCD_DISP_ON_CURSOR_BLINK);
002297 e0ef      	LDI  R30,LOW(15)
002298 93ea      	ST   -Y,R30
002299 940e 0cbf 	CALL _lcd_command
                 ; 0005 027F }
00229b 8119      	LDD  R17,Y+1
00229c 8108      	LDD  R16,Y+0
00229d 940c 2753 	JMP  _0x20E0006
                 ;#pragma used+
                 ;// Функция печатающая текущий и следующий элемент меню с использованием направления (-1, 0, 1)
                 ;void print_curr_menu2(signed char direction) {
                 ; 0005 0282 void print_curr_menu2(signed char direction) {
                 ; 0005 0283     calc_pos(&curr_menu, curr_menu.maximum, direction);
                 ;	direction -> Y+0
                 ; 0005 0284     printf("Выбор меню [%u, %u]", curr_menu.line0, curr_menu.line1);
                 ; 0005 0285     printf(" 1) ""%s"",\t2) ""%s""\r\n", main_menu[curr_menu.line0], main_menu[curr_menu.line1]);
                 ; 0005 0286 }
                 ;// Печать всех значений меню параметров в отладочном терминале
                 ;void print_curr_menu(void) {
                 ; 0005 0288 void print_curr_menu(void) {
                 ; 0005 0289     register byte i;
                 ; 0005 028A     // Выведем на отладочную консоль все пункты текущего (!) меню
                 ; 0005 028B     printf ("Текущее меню: ");
                 ;	i -> R16
                 ; 0005 028C     for (i=0; i<curr_menu.maximum; i++) printf ("%s\t", param_str(i, curr_menu.menu));
                 ; 0005 028D printf ("\r\n");
                 ; 0005 028E }
                 ;#pragma used-
                 ;// Функция, возвращающая указатель на строку меню по порядковому номеру
                 ;char *getmenustr(unsigned char menu_num_pp) {
                 ; 0005 0291 char *getmenustr(unsigned char menu_num_pp) {
                 _getmenustr:
                 ; 0005 0292     static lcd_str menustr;
                 ; 0005 0293     if (menu_num_pp) {
                 ;	menu_num_pp -> Y+0
00229f 81e8      	LD   R30,Y
0022a0 30e0      	CPI  R30,0
0022a1 f109      	BREQ _0xA00D6
                 ; 0005 0294         if (menu_num_pp < ALERT_POS)
0022a2 81a8      	LD   R26,Y
0022a3 33ad      	CPI  R26,LOW(0x3D)
0022a4 f480      	BRSH _0xA00D7
                 ; 0005 0295             strcpyf (menustr, all_menu_str[menu_num_pp-1]);
0022a5 e6e6      	LDI  R30,LOW(_menustr_S005000C)
0022a6 e0f3      	LDI  R31,HIGH(_menustr_S005000C)
0022a7 93fa      	ST   -Y,R31
0022a8 93ea      	ST   -Y,R30
0022a9 81ea      	LDD  R30,Y+2
0022aa 50e1      	SUBI R30,LOW(1)
0022ab e0f0      	LDI  R31,0
0022ac 940e 2f31 	CALL __LSLW4
0022ae 5aec      	SUBI R30,LOW(-_all_menu_str*2)
0022af 4fff      	SBCI R31,HIGH(-_all_menu_str*2)
0022b0 93fa      	ST   -Y,R31
0022b1 93ea      	ST   -Y,R30
0022b2 940e 28e7 	CALL _strcpyf
                 ; 0005 0296         else
0022b4 c00a      	RJMP _0xA00D8
                 _0xA00D7:
                 ; 0005 0297             strcpy (menustr, get_alert_str(menu_num_pp - ALERT_POS));
0022b5 e6e6      	LDI  R30,LOW(_menustr_S005000C)
0022b6 e0f3      	LDI  R31,HIGH(_menustr_S005000C)
0022b7 93fa      	ST   -Y,R31
0022b8 93ea      	ST   -Y,R30
0022b9 81ea      	LDD  R30,Y+2
0022ba 53ed      	SUBI R30,LOW(61)
0022bb 940e 2a79 	CALL SUBOPT_0x36
0022bd 940e 28dc 	CALL _strcpy
                 ; 0005 0298         return menustr;
                 _0xA00D8:
0022bf e6e6      	LDI  R30,LOW(_menustr_S005000C)
0022c0 e0f3      	LDI  R31,HIGH(_menustr_S005000C)
0022c1 940c 2759 	JMP  _0x20E0003
                 ; 0005 0299     } else
                 _0xA00D6:
                 ; 0005 029A         return NULL;
0022c3 e0e0      	LDI  R30,LOW(0)
0022c4 e0f0      	LDI  R31,HIGH(0)
0022c5 940c 2759 	JMP  _0x20E0003
                 ; 0005 029B }
                 ;#include <stdio.h>
                 ;#include <i2c.h>
                 ;#include <delay.h>
                 ;#include "at2404.h"
                 ;
                 ;#define OFFSET_FOR_SETTING 0x0
                 ;#define OFFSET_FOR_ALARMS 0x0
                 ;#define NODEBUG
                 ;
                 ;char eeprom_write(unsigned char eeprom_adresse, unsigned char eeprom_input, unsigned char bank)
                 ; 0006 000B {
                 
                 	.CSEG
                 _eeprom_write:
                 ; 0006 000C     i2c_start();
                 ;	eeprom_adresse -> Y+2
                 ;	eeprom_input -> Y+1
                 ;	bank -> Y+0
0022c7 940e 2ddc 	CALL _i2c_start
                 ; 0006 000D     if (bank)
0022c9 81e8      	LD   R30,Y
0022ca 30e0      	CPI  R30,0
0022cb f011      	BREQ _0xC0003
                 ; 0006 000E         i2c_write(M24C02_1+I2C_WRITE);
0022cc eae2      	LDI  R30,LOW(162)
0022cd c001      	RJMP _0xC0015
                 ; 0006 000F     else
                 _0xC0003:
                 ; 0006 0010         i2c_write(M24C02_0+I2C_WRITE);
0022ce eae0      	LDI  R30,LOW(160)
                 _0xC0015:
0022cf 93ea      	ST   -Y,R30
0022d0 940e 2e10 	CALL _i2c_write
                 ; 0006 0011 	i2c_write(eeprom_adresse);
0022d2 81ea      	LDD  R30,Y+2
0022d3 940e 2cdd 	CALL SUBOPT_0xA3
                 ; 0006 0012     i2c_write(eeprom_input);
0022d5 940e 2e10 	CALL _i2c_write
                 ; 0006 0013     i2c_stop();
0022d7 940e 2deb 	CALL _i2c_stop
                 ; 0006 0014     delay_ms(10);
0022d9 e0ea      	LDI  R30,LOW(10)
0022da e0f0      	LDI  R31,HIGH(10)
0022db 940e 2964 	CALL SUBOPT_0xB
                 ; 0006 0015 	return 1;
0022dd e0e1      	LDI  R30,LOW(1)
0022de 940c 2753 	JMP  _0x20E0006
                 ; 0006 0016 }
                 ;
                 ;char eeprom_read(unsigned char eeprom_adresse, unsigned char bank)
                 ; 0006 0019 {
                 _eeprom_read:
                 ; 0006 001A 	unsigned char data;
                 ; 0006 001B     i2c_start();
0022e0 930a      	ST   -Y,R16
                 ;	eeprom_adresse -> Y+2
                 ;	bank -> Y+1
                 ;	data -> R16
0022e1 940e 2ddc 	CALL _i2c_start
                 ; 0006 001C     if (bank)
0022e3 81e9      	LDD  R30,Y+1
0022e4 30e0      	CPI  R30,0
0022e5 f011      	BREQ _0xC0005
                 ; 0006 001D         i2c_write(M24C02_1+I2C_WRITE);
0022e6 eae2      	LDI  R30,LOW(162)
0022e7 c001      	RJMP _0xC0016
                 ; 0006 001E     else
                 _0xC0005:
                 ; 0006 001F         i2c_write(M24C02_0+I2C_WRITE);
0022e8 eae0      	LDI  R30,LOW(160)
                 _0xC0016:
0022e9 93ea      	ST   -Y,R30
0022ea 940e 2e10 	CALL _i2c_write
                 ; 0006 0020    	i2c_write(eeprom_adresse);
0022ec 81ea      	LDD  R30,Y+2
0022ed 940e 2ce3 	CALL SUBOPT_0xA4
                 ; 0006 0021     i2c_start();
                 ; 0006 0022     if (bank)
0022ef 81e9      	LDD  R30,Y+1
0022f0 30e0      	CPI  R30,0
0022f1 f011      	BREQ _0xC0007
                 ; 0006 0023         i2c_write(M24C02_1+I2C_READ);
0022f2 eae3      	LDI  R30,LOW(163)
0022f3 c001      	RJMP _0xC0017
                 ; 0006 0024     else
                 _0xC0007:
                 ; 0006 0025         i2c_write(M24C02_0+I2C_READ);
0022f4 eae1      	LDI  R30,LOW(161)
                 _0xC0017:
0022f5 93ea      	ST   -Y,R30
0022f6 940e 2e10 	CALL _i2c_write
                 ; 0006 0026     data = i2c_read(0);
0022f8 940e 2ce8 	CALL SUBOPT_0xA5
0022fa 2f0e      	MOV  R16,R30
                 ; 0006 0027     i2c_stop();
0022fb 940e 2deb 	CALL _i2c_stop
                 ; 0006 0028 	return data;
0022fd 2fe0      	MOV  R30,R16
0022fe 8108      	LDD  R16,Y+0
0022ff 940c 2753 	JMP  _0x20E0006
                 ; 0006 0029 }
                 ;// Функция, загоняющая в EEPROM структуру размером size
                 ;void eeprom_write_struct (unsigned char *struct_data, unsigned char size)
                 ; 0006 002C {
                 _eeprom_write_struct:
                 ; 0006 002D     register unsigned char i;
                 ; 0006 002E     unsigned char s_byte;
                 ; 0006 002F     printf("Записываем SETTINGS в EEPROM [0x%x]: ", size);
002301 931a      	ST   -Y,R17
002302 930a      	ST   -Y,R16
                 ;	*struct_data -> Y+3
                 ;	size -> Y+2
                 ;	i -> R16
                 ;	s_byte -> R17
                +
002303 ece4     +LDI R30 , LOW ( 2 * _0xC0000 + 0 )
002304 e1f3     +LDI R31 , HIGH ( 2 * _0xC0000 + 0 )
                 	__POINTW1FN _0xC0000,0
002305 940e 2ba8 	CALL SUBOPT_0x6B
002307 940e 295f 	CALL SUBOPT_0xA
                 ; 0006 0030     #ifdef NODEBUG
                 ; 0006 0031     printf("\r\n");
                +
002309 eeea     +LDI R30 , LOW ( 2 * _0xC0000 + 38 )
00230a e1f3     +LDI R31 , HIGH ( 2 * _0xC0000 + 38 )
                 	__POINTW1FN _0xC0000,38
00230b 940e 292a 	CALL SUBOPT_0x1
                 ; 0006 0032     #endif
                 ; 0006 0033     for (i=0; i<size; i++) {
00230d e000      	LDI  R16,LOW(0)
                 _0xC000A:
00230e 81ea      	LDD  R30,Y+2
00230f 170e      	CP   R16,R30
002310 f480      	BRSH _0xC000B
                 ; 0006 0034         s_byte = *struct_data;
002311 81ab      	LDD  R26,Y+3
002312 81bc      	LDD  R27,Y+3+1
002313 911c      	LD   R17,X
                 ; 0006 0035         eeprom_write(i + OFFSET_FOR_SETTING, s_byte, 0);
002314 2fe0      	MOV  R30,R16
002315 93ea      	ST   -Y,R30
002316 931a      	ST   -Y,R17
002317 e0e0      	LDI  R30,LOW(0)
002318 93ea      	ST   -Y,R30
002319 dfad      	RCALL _eeprom_write
                 ; 0006 0036         #ifndef NODEBUG
                 ; 0006 0037         printf(" %d", s_byte);
                 ; 0006 0038         #endif
                 ; 0006 0039         struct_data++;
00231a 81eb      	LDD  R30,Y+3
00231b 81fc      	LDD  R31,Y+3+1
00231c 9631      	ADIW R30,1
00231d 83eb      	STD  Y+3,R30
00231e 83fc      	STD  Y+3+1,R31
                 ; 0006 003A     }
00231f 5f0f      	SUBI R16,-1
002320 cfed      	RJMP _0xC000A
                 _0xC000B:
                 ; 0006 003B     #ifndef NODEBUG
                 ; 0006 003C     printf("\r\n");
                 ; 0006 003D     #endif
                 ; 0006 003E }
002321 c04a      	RJMP _0x20E000A
                 ;// Функция, загоняющая в EEPROM ALARM-структуру размером в size
                 ;void eeprom_write_alarm (unsigned char *struct_data, unsigned char size, unsigned char num_alarm)
                 ; 0006 0041 {
                 _eeprom_write_alarm:
                 ; 0006 0042     register unsigned char i;
                 ; 0006 0043     unsigned char s_byte;
                 ; 0006 0044     unsigned char eeprom_offset;
                 ; 0006 0045     eeprom_offset = OFFSET_FOR_ALARMS + size * (num_alarm - 1);
002322 940e 2cec 	CALL SUBOPT_0xA6
                 ;	*struct_data -> Y+5
                 ;	size -> Y+4
                 ;	num_alarm -> Y+3
                 ;	i -> R16
                 ;	s_byte -> R17
                 ;	eeprom_offset -> R18
                 ; 0006 0046     printf("Записываем ALARM #%u в EEPROM [0x%x] по адресу 0x%x:\r\n", num_alarm, size, eeprom_offset);
                +
002324 eeed     +LDI R30 , LOW ( 2 * _0xC0000 + 41 )
002325 e1f3     +LDI R31 , HIGH ( 2 * _0xC0000 + 41 )
                 	__POINTW1FN _0xC0000,41
002326 93fa      	ST   -Y,R31
002327 93ea      	ST   -Y,R30
002328 81ed      	LDD  R30,Y+5
002329 940e 2a21 	CALL SUBOPT_0x28
00232b 85ea      	LDD  R30,Y+10
00232c 940e 2a21 	CALL SUBOPT_0x28
00232e 2fe2      	MOV  R30,R18
00232f 940e 2a21 	CALL SUBOPT_0x28
002331 940e 2989 	CALL SUBOPT_0x12
                 ; 0006 0047     for (i=0; i<size; i++) {
002333 e000      	LDI  R16,LOW(0)
                 _0xC000D:
002334 81ec      	LDD  R30,Y+4
002335 170e      	CP   R16,R30
002336 f488      	BRSH _0xC000E
                 ; 0006 0048         s_byte = *struct_data;
002337 81ad      	LDD  R26,Y+5
002338 81be      	LDD  R27,Y+5+1
002339 911c      	LD   R17,X
                 ; 0006 0049         eeprom_write(i + eeprom_offset, s_byte, 1); // Записываем во второй банк памяти
00233a 2fe2      	MOV  R30,R18
00233b 0fe0      	ADD  R30,R16
00233c 93ea      	ST   -Y,R30
00233d 931a      	ST   -Y,R17
00233e e0e1      	LDI  R30,LOW(1)
00233f 93ea      	ST   -Y,R30
002340 df86      	RCALL _eeprom_write
                 ; 0006 004A         #ifndef NODEBUG
                 ; 0006 004B         printf(" %02X", s_byte);
                 ; 0006 004C         #endif
                 ; 0006 004D         struct_data++;
002341 81ed      	LDD  R30,Y+5
002342 81fe      	LDD  R31,Y+5+1
002343 9631      	ADIW R30,1
002344 83ed      	STD  Y+5,R30
002345 83fe      	STD  Y+5+1,R31
                 ; 0006 004E     }
002346 5f0f      	SUBI R16,-1
002347 cfec      	RJMP _0xC000D
                 _0xC000E:
                 ; 0006 004F     #ifndef NODEBUG
                 ; 0006 0050     printf("\r\n");
                 ; 0006 0051     #endif
                 ; 0006 0052 }
002348 940e 314c 	CALL __LOADLOCR3
00234a 940c 277f 	JMP  _0x20E0002
                 ;// Функция, загоняющая из EEPROM в структуру размером size
                 ;void eeprom_read_struct (unsigned char *struct_data, unsigned char size)
                 ; 0006 0055 {
                 _eeprom_read_struct:
                 ; 0006 0056     register unsigned char i;
                 ; 0006 0057     unsigned char s_byte;
                 ; 0006 0058     printf("Считываем из EEPROM [0x%x]: ", size);
00234c 931a      	ST   -Y,R17
00234d 930a      	ST   -Y,R16
                 ;	*struct_data -> Y+3
                 ;	size -> Y+2
                 ;	i -> R16
                 ;	s_byte -> R17
                +
00234e e2e4     +LDI R30 , LOW ( 2 * _0xC0000 + 96 )
00234f e1f4     +LDI R31 , HIGH ( 2 * _0xC0000 + 96 )
                 	__POINTW1FN _0xC0000,96
002350 940e 2ba8 	CALL SUBOPT_0x6B
002352 940e 295f 	CALL SUBOPT_0xA
                 ; 0006 0059     #ifdef NODEBUG
                 ; 0006 005A     printf("\r\n");
                +
002354 eeea     +LDI R30 , LOW ( 2 * _0xC0000 + 38 )
002355 e1f3     +LDI R31 , HIGH ( 2 * _0xC0000 + 38 )
                 	__POINTW1FN _0xC0000,38
002356 940e 292a 	CALL SUBOPT_0x1
                 ; 0006 005B     #endif
                 ; 0006 005C     for (i=0; i<size; i++) {
002358 e000      	LDI  R16,LOW(0)
                 _0xC0010:
002359 81ea      	LDD  R30,Y+2
00235a 170e      	CP   R16,R30
00235b f480      	BRSH _0xC0011
                 ; 0006 005D         s_byte = eeprom_read(i + OFFSET_FOR_SETTING, 0);
00235c 2fe0      	MOV  R30,R16
00235d 93ea      	ST   -Y,R30
00235e e0e0      	LDI  R30,LOW(0)
00235f 93ea      	ST   -Y,R30
002360 df7f      	RCALL _eeprom_read
002361 2f1e      	MOV  R17,R30
                 ; 0006 005E         *struct_data = s_byte;
002362 81ab      	LDD  R26,Y+3
002363 81bc      	LDD  R27,Y+3+1
002364 931c      	ST   X,R17
                 ; 0006 005F         #ifndef NODEBUG
                 ; 0006 0060         printf(" %d", s_byte);
                 ; 0006 0061         #endif
                 ; 0006 0062         struct_data++;
002365 81eb      	LDD  R30,Y+3
002366 81fc      	LDD  R31,Y+3+1
002367 9631      	ADIW R30,1
002368 83eb      	STD  Y+3,R30
002369 83fc      	STD  Y+3+1,R31
                 ; 0006 0063     }
00236a 5f0f      	SUBI R16,-1
00236b cfed      	RJMP _0xC0010
                 _0xC0011:
                 ; 0006 0064     #ifndef NODEBUG
                 ; 0006 0065     printf("\r\n");
                 ; 0006 0066     #endif
                 ; 0006 0067 }
                 _0x20E000A:
00236c 8119      	LDD  R17,Y+1
00236d 8108      	LDD  R16,Y+0
00236e 9625      	ADIW R28,5
00236f 9508      	RET
                 ;// Функция, загоняющая из EEPROM в структуру ALARM размером size
                 ;void eeprom_read_alarm (unsigned char *struct_data, unsigned char size, unsigned char num_alarm)
                 ; 0006 006A {
                 _eeprom_read_alarm:
                 ; 0006 006B     register unsigned char i;
                 ; 0006 006C     unsigned char s_byte;
                 ; 0006 006D     unsigned char eeprom_offset;
                 ; 0006 006E     eeprom_offset = OFFSET_FOR_ALARMS + (num_alarm - 1) * size;
002370 940e 2cec 	CALL SUBOPT_0xA6
                 ;	*struct_data -> Y+5
                 ;	size -> Y+4
                 ;	num_alarm -> Y+3
                 ;	i -> R16
                 ;	s_byte -> R17
                 ;	eeprom_offset -> R18
                 ; 0006 006F     #ifndef NODEBUG
                 ; 0006 0070     printf("Считываем ALARM #%u из EEPROM [%d bytes] по адресу 0x%x:\r\n", num_alarm, size, eeprom_offset);
                 ; 0006 0071     #endif
                 ; 0006 0072     for (i=0; i<size; i++) {
002372 e000      	LDI  R16,LOW(0)
                 _0xC0013:
002373 81ec      	LDD  R30,Y+4
002374 170e      	CP   R16,R30
002375 f488      	BRSH _0xC0014
                 ; 0006 0073         s_byte = eeprom_read(i + eeprom_offset, 1);
002376 2fe2      	MOV  R30,R18
002377 0fe0      	ADD  R30,R16
002378 93ea      	ST   -Y,R30
002379 e0e1      	LDI  R30,LOW(1)
00237a 93ea      	ST   -Y,R30
00237b df64      	RCALL _eeprom_read
00237c 2f1e      	MOV  R17,R30
                 ; 0006 0074         *struct_data = s_byte;
00237d 81ad      	LDD  R26,Y+5
00237e 81be      	LDD  R27,Y+5+1
00237f 931c      	ST   X,R17
                 ; 0006 0075         #ifndef NODEBUG
                 ; 0006 0076         printf(" %02X", s_byte);
                 ; 0006 0077         #endif
                 ; 0006 0078         struct_data++;
002380 81ed      	LDD  R30,Y+5
002381 81fe      	LDD  R31,Y+5+1
002382 9631      	ADIW R30,1
002383 83ed      	STD  Y+5,R30
002384 83fe      	STD  Y+5+1,R31
                 ; 0006 0079     }
002385 5f0f      	SUBI R16,-1
002386 cfec      	RJMP _0xC0013
                 _0xC0014:
                 ; 0006 007A     #ifndef NODEBUG
                 ; 0006 007B     printf("\r\n");
                 ; 0006 007C     #endif
                 ; 0006 007D }
002387 940e 314c 	CALL __LOADLOCR3
002389 940c 277f 	JMP  _0x20E0002
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;#include "robowater.h"
                 ;#include "at2404.h"
                 ;#include "spd1820.h"
                 ;#include "alarm.h"
                 ;#include "bits.h"
                 ;#include "menu.h"
                 ;
                 ;struct st_alarm alarm;      // Текущий alarm
                 ;
                 ;flash alarm_text all_alerts[MAX_ALERTS] = {
                 ;        "Термозащита ",  // [0]
                 ;        "Замерзание ",   // [1]
                 ;        "Темп.возд.вх ", // [2]
                 ;        "Т.возд.вых. ",  // [3]
                 ;        "Темп.воды вх ", // [4]
                 ;        "Т.воды вых.",   // [5]
                 ;        "Нет связи ",    // [6]
                 ;        "Нет терм.B1 ",  // [7]
                 ;        "Нет терм.B2 ",  // [8]
                 ;        "Нет терм.B3 ",  // [9]
                 ;        "Нет терм.B4 ",  // [10]
                 ;        "Фильтр "        // [11]
                 ;};
                 ;// Функция обновляющая количество активных алертов в системе для меню
                 ;void update_alert_menu (void) {
                 ; 0007 001B void update_alert_menu (void) {
                 
                 	.CSEG
                 _update_alert_menu:
                 ; 0007 001C     register unsigned char i;
                 ; 0007 001D     KOL_ALERT = 0;
00238b 930a      	ST   -Y,R16
                 ;	i -> R16
                +
00238c e4ed     +LDI R30 , LOW ( _main_menu + 25 )
00238d e0f2     +LDI R31 , HIGH ( _main_menu + 25 )
                 	__POINTW1MN _main_menu,25
00238e 940e 2cf5 	CALL SUBOPT_0xA7
                 ; 0007 001E     for (i = 0; i < MAX_ALERTS; i++) {
002390 e000      	LDI  R16,LOW(0)
                 _0xE0004:
002391 300c      	CPI  R16,12
002392 f508      	BRSH _0xE0005
                 ; 0007 001F         alerts[i].can_edit = prim_par.alert_status[i];
002393 e0a5      	LDI  R26,LOW(5)
002394 9f0a      	MUL  R16,R26
002395 01f0      	MOVW R30,R0
                +
002396 56ef     +SUBI R30 , LOW ( - _alerts - ( 3 ) )
002397 4ffd     +SBCI R31 , HIGH ( - _alerts - ( 3 ) )
                 	__ADDW1MN _alerts,3
002398 010f      	MOVW R0,R30
                +
002399 e8a4     +LDI R26 , LOW ( _prim_par + 36 )
00239a e0b1     +LDI R27 , HIGH ( _prim_par + 36 )
                 	__POINTW2MN _prim_par,36
00239b 27ee      	CLR  R30
00239c 0fa0      	ADD  R26,R16
00239d 1fbe      	ADC  R27,R30
00239e 91ec      	LD   R30,X
00239f 01d0      	MOVW R26,R0
0023a0 93ec      	ST   X,R30
                 ; 0007 0020         if (prim_par.alert_status[i]) {
0023a1 940e 2b74 	CALL SUBOPT_0x61
0023a3 f071      	BREQ _0xE0006
                 ; 0007 0021             KOL_ALERT++;
                +
0023a4 e4ad     +LDI R26 , LOW ( _main_menu + 25 )
0023a5 e0b2     +LDI R27 , HIGH ( _main_menu + 25 )
                 	__POINTW2MN _main_menu,25
0023a6 940e 2cfa 	CALL SUBOPT_0xA8
                 ; 0007 0022             if (alerts[i].val_data == 0) alerts[i].val_data = 1;
0023a8 940e 2c49 	CALL SUBOPT_0x89
0023aa f439      	BRNE _0xE0007
0023ab e0a5      	LDI  R26,LOW(5)
0023ac 9f0a      	MUL  R16,R26
0023ad 01f0      	MOVW R30,R0
0023ae 57e2      	SUBI R30,LOW(-_alerts)
0023af 4ffd      	SBCI R31,HIGH(-_alerts)
0023b0 940e 2d01 	CALL SUBOPT_0xA9
                 ; 0007 0023         }
                 _0xE0007:
                 ; 0007 0024     }
                 _0xE0006:
0023b2 5f0f      	SUBI R16,-1
0023b3 cfdd      	RJMP _0xE0004
                 _0xE0005:
                 ; 0007 0025     IS_ALERT = KOL_ALERT;
                +
0023b4 91e0 024d+LDS R30 , _main_menu + 25
                 	__GETB1MN _main_menu,25
                +
0023b6 93e0 0250+STS _main_menu + 28 , R30
                 	__PUTB1MN _main_menu,28
                 ; 0007 0026 }
0023b8 940c 264b 	JMP  _0x20E0009
                 ;// Функция регистрации ALARM
                 ;void alarm_reg (int reg_preset, int reg_alarm, char *text_alarm, unsigned char code) {
                 ; 0007 0028 void alarm_reg (int reg_preset, int reg_alarm, char *text_alarm, unsigned char code) {
                 _alarm_reg:
                 ; 0007 0029     sprintf (alarm.datestamp, "%02u:%02u %02u.%02u", s_dt.cHH, s_dt.cMM, s_dt.cdd, s_dt.cmo);
                 ;	reg_preset -> Y+5
                 ;	reg_alarm -> Y+3
                 ;	*text_alarm -> Y+1
                 ;	code -> Y+0
0023ba 940e 2d06 	CALL SUBOPT_0xAA
                +
0023bc e4e2     +LDI R30 , LOW ( 2 * _0xE0000 + 0 )
0023bd e1f4     +LDI R31 , HIGH ( 2 * _0xE0000 + 0 )
                 	__POINTW1FN _0xE0000,0
0023be 940e 2b49 	CALL SUBOPT_0x58
0023c0 940e 2b4e 	CALL SUBOPT_0x59
0023c2 940e 2b92 	CALL SUBOPT_0x66
0023c4 940e 2b95 	CALL SUBOPT_0x67
0023c6 940e 2ba3 	CALL SUBOPT_0x6A
                 ; 0007 002A     sprintf (alarm.text, "%s", text_alarm);
                +
0023c8 e8e6     +LDI R30 , LOW ( _alarm + 16 )
0023c9 e0f3     +LDI R31 , HIGH ( _alarm + 16 )
                 	__POINTW1MN _alarm,16
0023ca 93fa      	ST   -Y,R31
0023cb 93ea      	ST   -Y,R30
                +
0023cc e5e6     +LDI R30 , LOW ( 2 * _0xE0000 + 20 )
0023cd e1f4     +LDI R31 , HIGH ( 2 * _0xE0000 + 20 )
                 	__POINTW1FN _0xE0000,20
0023ce 93fa      	ST   -Y,R31
0023cf 93ea      	ST   -Y,R30
0023d0 81ed      	LDD  R30,Y+5
0023d1 81fe      	LDD  R31,Y+5+1
0023d2 940e 2b61 	CALL SUBOPT_0x5D
0023d4 940e 2c5e 	CALL SUBOPT_0x8C
                 ; 0007 002B     alarm.val_preset = reg_preset;
0023d6 81ed      	LDD  R30,Y+5
0023d7 81fe      	LDD  R31,Y+5+1
                +
0023d8 93e0 0382+STS _alarm + 12 , R30
0023da 93f0 0383+STS _alarm + 12 + 1 , R31
                 	__PUTW1MN _alarm,12
                 ; 0007 002C     alarm.val_alarm = reg_alarm;
0023dc 81eb      	LDD  R30,Y+3
0023dd 81fc      	LDD  R31,Y+3+1
                +
0023de 93e0 0384+STS _alarm + 14 , R30
0023e0 93f0 0385+STS _alarm + 14 + 1 , R31
                 	__PUTW1MN _alarm,14
                 ; 0007 002D     // Регистрируем событие в общей структуре prim_par
                 ; 0007 002E     prim_par.alert_status[code] = 1;
0023e2 940e 2d0b 	CALL SUBOPT_0xAB
0023e4 e0e1      	LDI  R30,LOW(1)
0023e5 93ec      	ST   X,R30
                 ; 0007 002F     alerts[code].val_data = reg_alarm;
0023e6 81e8      	LD   R30,Y
0023e7 e0a5      	LDI  R26,LOW(5)
0023e8 9fea      	MUL  R30,R26
0023e9 01f0      	MOVW R30,R0
0023ea 57e2      	SUBI R30,LOW(-_alerts)
0023eb 4ffd      	SBCI R31,HIGH(-_alerts)
0023ec 81ab      	LDD  R26,Y+3
0023ed 81bc      	LDD  R27,Y+3+1
0023ee 83a0      	STD  Z+0,R26
0023ef 83b1      	STD  Z+1,R27
                 ; 0007 0030     // Вычисление позиции необработанного alarm
                 ; 0007 0031     if (prim_par.c_alarm < MAX_ALARMS) prim_par.c_alarm++;
                +
0023f0 91a0 0192+LDS R26 , _prim_par + 50
                 	__GETB2MN _prim_par,50
0023f2 30a8      	CPI  R26,LOW(0x8)
0023f3 f430      	BRSH _0xE0008
                +
0023f4 91e0 0192+LDS R30 , _prim_par + 50
                 	__GETB1MN _prim_par,50
0023f6 5fef      	SUBI R30,-LOW(1)
                +
0023f7 93e0 0192+STS _prim_par + 50 , R30
                 	__PUTB1MN _prim_par,50
0023f9 50e1      	SUBI R30,LOW(1)
                 ; 0007 0032     prim_par.alarm++;
                 _0xE0008:
                +
0023fa 91e0 0191+LDS R30 , _prim_par + 49
                 	__GETB1MN _prim_par,49
0023fc 5fef      	SUBI R30,-LOW(1)
                +
0023fd 93e0 0191+STS _prim_par + 49 , R30
                 	__PUTB1MN _prim_par,49
0023ff 50e1      	SUBI R30,LOW(1)
                 ; 0007 0033     if (prim_par.alarm > prim_par.c_alarm) prim_par.alarm = 1;
                +
002400 91a0 0191+LDS R26 , _prim_par + 49
                 	__GETB2MN _prim_par,49
                +
002402 91e0 0192+LDS R30 , _prim_par + 50
                 	__GETB1MN _prim_par,50
002404 17ea      	CP   R30,R26
002405 f418      	BRSH _0xE0009
002406 e0e1      	LDI  R30,LOW(1)
                +
002407 93e0 0191+STS _prim_par + 49 , R30
                 	__PUTB1MN _prim_par,49
                 ; 0007 0034     // Запись ALARM
                 ; 0007 0035     eeprom_write_alarm ((char *)&alarm, sizeof(alarm), prim_par.alarm);
                 _0xE0009:
002409 940e 2d06 	CALL SUBOPT_0xAA
00240b e2e0      	LDI  R30,LOW(32)
00240c 93ea      	ST   -Y,R30
                +
00240d 91e0 0191+LDS R30 , _prim_par + 49
                 	__GETB1MN _prim_par,49
00240f 93ea      	ST   -Y,R30
002410 df11      	RCALL _eeprom_write_alarm
                 ; 0007 0036     // Запись структуры установок (там хранится позиция и номер ALARM)
                 ; 0007 0037     eeprom_write_struct ((char *)&prim_par, sizeof(prim_par));
002411 940e 29a1 	CALL SUBOPT_0x16
002413 940e 2cb4 	CALL SUBOPT_0x9B
                 ; 0007 0038     update_alert_menu ();
002415 df75      	RCALL _update_alert_menu
                 ; 0007 0039     return;
002416 940c 277f 	JMP  _0x20E0002
                 ; 0007 003A }
                 ;// Функция обработки ALARM
                 ;signed char alarm_unreg (unsigned char code) {
                 ; 0007 003C signed char alarm_unreg (unsigned char code) {
                 _alarm_unreg:
                 ; 0007 003D     // Если событий нет, возвращаем признак -1
                 ; 0007 003E     if (prim_par.alert_status[code] == 0) return -1;
                 ;	code -> Y+0
002418 940e 2d0b 	CALL SUBOPT_0xAB
00241a 91ec      	LD   R30,X
00241b 30e0      	CPI  R30,0
00241c f419      	BRNE _0xE000A
00241d efef      	LDI  R30,LOW(255)
00241e 940c 2759 	JMP  _0x20E0003
                 ; 0007 003F     // Разрегистрируем событие в общей структуре prim_par
                 ; 0007 0040     prim_par.alert_status[code] = 0;
                 _0xE000A:
002420 940e 2d0b 	CALL SUBOPT_0xAB
002422 e0e0      	LDI  R30,LOW(0)
002423 93ec      	ST   X,R30
                 ; 0007 0041     // Запись структуры установок (там хранится позиция и номер ALARM)
                 ; 0007 0042     eeprom_write_struct ((char *)&prim_par, sizeof(prim_par));
002424 940e 29a1 	CALL SUBOPT_0x16
002426 940e 2cb4 	CALL SUBOPT_0x9B
                 ; 0007 0043     update_alert_menu ();
002428 df62      	RCALL _update_alert_menu
                 ; 0007 0044     if (code >= 7 && code <= 10) read_all_terms(INIT_MODE);
002429 81a8      	LD   R26,Y
00242a 30a7      	CPI  R26,LOW(0x7)
00242b f010      	BRLO _0xE000C
00242c 30ab      	CPI  R26,LOW(0xB)
00242d f008      	BRLO _0xE000D
                 _0xE000C:
00242e c002      	RJMP _0xE000B
                 _0xE000D:
00242f 940e 29af 	CALL SUBOPT_0x18
                 ; 0007 0045     return;
                 _0xE000B:
002431 940c 2759 	JMP  _0x20E0003
                 ; 0007 0046 }
                 ;// Функция чтения ALARM по номеру из EEPROM
                 ;signed char alarm_read (unsigned char num) {
                 ; 0007 0048 signed char alarm_read (unsigned char num) {
                 _alarm_read:
                 ; 0007 0049     // Если событий нет, возвращаем признак -1
                 ; 0007 004A     if (num == 0) return -1;
                 ;	num -> Y+0
002433 81e8      	LD   R30,Y
002434 30e0      	CPI  R30,0
002435 f419      	BRNE _0xE000E
002436 efef      	LDI  R30,LOW(255)
002437 940c 2759 	JMP  _0x20E0003
                 ; 0007 004B     eeprom_read_alarm ((char *)&alarm, sizeof(alarm), num);
                 _0xE000E:
002439 940e 2d06 	CALL SUBOPT_0xAA
00243b e2e0      	LDI  R30,LOW(32)
00243c 93ea      	ST   -Y,R30
00243d 81eb      	LDD  R30,Y+3
00243e 93ea      	ST   -Y,R30
00243f df30      	RCALL _eeprom_read_alarm
                 ; 0007 004C }
002440 940c 2759 	JMP  _0x20E0003
                 ;void alarm_c_print (void) {
                 ; 0007 004D void alarm_c_print (void) {
                 _alarm_c_print:
                 ; 0007 004E     printf("> %s %i %i %s\r\n", alarm.datestamp, alarm.val_preset, alarm.val_alarm, alarm.text);
                +
002442 e5e9     +LDI R30 , LOW ( 2 * _0xE0000 + 23 )
002443 e1f4     +LDI R31 , HIGH ( 2 * _0xE0000 + 23 )
                 	__POINTW1FN _0xE0000,23
002444 93fa      	ST   -Y,R31
002445 93ea      	ST   -Y,R30
002446 e7e6      	LDI  R30,LOW(_alarm)
002447 e0f3      	LDI  R31,HIGH(_alarm)
002448 940e 2b61 	CALL SUBOPT_0x5D
                +
00244a 91e0 0382+LDS R30 , _alarm + 12
00244c 91f0 0383+LDS R31 , _alarm + 12 + 1
                 	__GETW1MN _alarm,12
00244e 940e 2a08 	CALL SUBOPT_0x23
                +
002450 91e0 0384+LDS R30 , _alarm + 14
002452 91f0 0385+LDS R31 , _alarm + 14 + 1
                 	__GETW1MN _alarm,14
002454 940e 2a08 	CALL SUBOPT_0x23
                +
002456 e8e6     +LDI R30 , LOW ( _alarm + 16 )
002457 e0f3     +LDI R31 , HIGH ( _alarm + 16 )
                 	__POINTW1MN _alarm,16
002458 940e 2b61 	CALL SUBOPT_0x5D
00245a 940e 2b24 	CALL SUBOPT_0x52
                 ; 0007 004F }
00245c 9508      	RET
                 ;// Функция печатающая все ALARMs
                 ;void alarm_all_print (void) {
                 ; 0007 0051 void alarm_all_print (void) {
                 _alarm_all_print:
                 ; 0007 0052     register unsigned char i;
                 ; 0007 0053     unsigned char c;
                 ; 0007 0054     c = prim_par.alarm;
00245d 931a      	ST   -Y,R17
00245e 930a      	ST   -Y,R16
                 ;	i -> R16
                 ;	c -> R17
                +
00245f 9110 0191+LDS R17 , _prim_par + 49
                 	__GETBRMN 17,_prim_par,49
                 ; 0007 0055     // Печатаем все зарегистрированные alarms начиная с текущей и в обратном порядке
                 ; 0007 0056     printf("Все аварии:\r\n");
                +
002461 e6e9     +LDI R30 , LOW ( 2 * _0xE0000 + 39 )
002462 e1f4     +LDI R31 , HIGH ( 2 * _0xE0000 + 39 )
                 	__POINTW1FN _0xE0000,39
002463 940e 292a 	CALL SUBOPT_0x1
                 ; 0007 0057     for (i = 1; i <= MAX_ALARMS; i++) {
002465 e001      	LDI  R16,LOW(1)
                 _0xE0010:
002466 3009      	CPI  R16,9
002467 f450      	BRSH _0xE0011
                 ; 0007 0058         alarm_read(c--);
002468 931a      	ST   -Y,R17
002469 951a      	DEC  R17
00246a dfc8      	RCALL _alarm_read
                 ; 0007 0059         alarm_c_print();
00246b dfd6      	RCALL _alarm_c_print
                 ; 0007 005A         if (c == 0) c = prim_par.c_alarm;
00246c 3010      	CPI  R17,0
00246d f411      	BRNE _0xE0012
                +
00246e 9110 0192+LDS R17 , _prim_par + 50
                 	__GETBRMN 17,_prim_par,50
                 ; 0007 005B     }
                 _0xE0012:
002470 5f0f      	SUBI R16,-1
002471 cff4      	RJMP _0xE0010
                 _0xE0011:
                 ; 0007 005C }
002472 9109      	LD   R16,Y+
002473 9119      	LD   R17,Y+
002474 9508      	RET
                 ;// Функция, возвращающая строку названия тревоги по коду
                 ;char *get_alert_str(unsigned char code) {
                 ; 0007 005E char *get_alert_str(unsigned char code) {
                 _get_alert_str:
                 ; 0007 005F     static alarm_text alert_string;
                 ; 0007 0060     if (code < MAX_ALERTS) {
                 ;	code -> Y+0
002475 81a8      	LD   R26,Y
002476 30ac      	CPI  R26,LOW(0xC)
002477 f490      	BRSH _0xE0013
                 ; 0007 0061         strcpyf (alert_string, all_alerts[code]);
002478 e9e6      	LDI  R30,LOW(_alert_string_S0070006)
002479 e0f3      	LDI  R31,HIGH(_alert_string_S0070006)
00247a 93fa      	ST   -Y,R31
00247b 93ea      	ST   -Y,R30
00247c 81ea      	LDD  R30,Y+2
00247d e0f0      	LDI  R31,0
00247e 940e 2f31 	CALL __LSLW4
002480 50ec      	SUBI R30,LOW(-_all_alerts*2)
002481 4ffd      	SBCI R31,HIGH(-_all_alerts*2)
002482 93fa      	ST   -Y,R31
002483 93ea      	ST   -Y,R30
002484 940e 28e7 	CALL _strcpyf
                 ; 0007 0062         return alert_string;
002486 e9e6      	LDI  R30,LOW(_alert_string_S0070006)
002487 e0f3      	LDI  R31,HIGH(_alert_string_S0070006)
002488 940c 2759 	JMP  _0x20E0003
                 ; 0007 0063     } else {
                 _0xE0013:
                 ; 0007 0064         return NULL;
00248a e0e0      	LDI  R30,LOW(0)
00248b e0f0      	LDI  R31,HIGH(0)
00248c 940c 2759 	JMP  _0x20E0003
                 ; 0007 0065     }
                 ; 0007 0066 }
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include "robowater.h"
                 ;#include "signals.h"
                 ;// Лапы сигналов
                 ;#define BUZ PORTD.6     // Порт звука
                 ;#define RED PORTA.3     // Порт красной лампочки
                 ;#define GREEN PORTB.4   // Порт зеленой лампочки
                 ;#define WHITE PORTA.2   // Порт белой лампочки
                 ;// Описание модульных переменных
                 ;struct st_signal signals;      // Текущее состояние всех сигналов
                 ;// Функция выводящая состояние всей структуры сигналов
                 ;void signal_printallbytes (void) {
                 ; 0008 000D void signal_printallbytes (void) {
                 
                 	.CSEG
                 _signal_printallbytes:
                 ; 0008 000E     register unsigned char i;
                 ; 0008 000F     unsigned char *status = &signals.buz_mode;
                 ; 0008 0010     printf ("Стуктура signals =");
00248e 940e 3145 	CALL __SAVELOCR3
                 ;	i -> R16
                 ;	*status -> R17,R18
                +
002490 ea16     +LDI R17 , LOW ( _signals )
002491 e023     +LDI R18 , HIGH ( _signals )
                 	__POINTWRM 17,18,_signals
                +
002492 e7e8     +LDI R30 , LOW ( 2 * _0x100000 + 0 )
002493 e1f4     +LDI R31 , HIGH ( 2 * _0x100000 + 0 )
                 	__POINTW1FN _0x100000,0
002494 940e 292a 	CALL SUBOPT_0x1
                 ; 0008 0011     for (i = 0; i < sizeof(signals); i++) {
002496 e000      	LDI  R16,LOW(0)
                 _0x100004:
002497 300c      	CPI  R16,12
002498 f478      	BRSH _0x100005
                 ; 0008 0012         printf (" %x", *status);
                +
002499 e8eb     +LDI R30 , LOW ( 2 * _0x100000 + 19 )
00249a e1f4     +LDI R31 , HIGH ( 2 * _0x100000 + 19 )
                 	__POINTW1FN _0x100000,19
00249b 93fa      	ST   -Y,R31
00249c 93ea      	ST   -Y,R30
                +
00249d 2fa1     +MOV R26 , R17
00249e 2fb2     +MOV R27 , R18
                 	__GETW2R 17,18
00249f 91ec      	LD   R30,X
0024a0 940e 2a21 	CALL SUBOPT_0x28
0024a2 940e 295f 	CALL SUBOPT_0xA
                 ; 0008 0013         status++;
                +
0024a4 5f1f     +SUBI R17 , LOW ( - 1 )
0024a5 4f2f     +SBCI R18 , HIGH ( - 1 )
                 	__ADDWRN 17,18,1
                 ; 0008 0014     }
0024a6 5f0f      	SUBI R16,-1
0024a7 cfef      	RJMP _0x100004
                 _0x100005:
                 ; 0008 0015     printf ("\r\n");
                +
0024a8 e8ef     +LDI R30 , LOW ( 2 * _0x100000 + 23 )
0024a9 e1f4     +LDI R31 , HIGH ( 2 * _0x100000 + 23 )
                 	__POINTW1FN _0x100000,23
0024aa 940e 292a 	CALL SUBOPT_0x1
                 ; 0008 0016 }
0024ac 940e 314c 	CALL __LOADLOCR3
0024ae c2a4      	RJMP _0x20E0006
                 ;// Функция инициализация статуса любого светика
                 ;unsigned char init_lamp_status (unsigned char *lamp_mode) {
                 ; 0008 0018 unsigned char init_lamp_status (unsigned char *lamp_mode) {
                 _init_lamp_status:
                 ; 0008 0019     unsigned char *lamp_timer = lamp_mode + 1;
                 ; 0008 001A     unsigned char *lamp_status = lamp_mode + 2;
                 ; 0008 001B     switch (*lamp_mode) {
0024af 940e 2d12 	CALL SUBOPT_0xAC
                 ;	*lamp_mode -> Y+4
                 ;	*lamp_timer -> R16,R17
                 ;	*lamp_status -> R18,R19
                 ; 0008 001C         case SHORT:
0024b1 f429      	BRNE _0x100009
                 ; 0008 001D             *lamp_timer = SHORT_MAX;
0024b2 01d8      	MOVW R26,R16
0024b3 e0e1      	LDI  R30,LOW(1)
0024b4 93ec      	ST   X,R30
                 ; 0008 001E             *lamp_status = ON;
0024b5 01d9      	MOVW R26,R18
0024b6 c017      	RJMP _0x100047
                 ; 0008 001F             break;
                 ; 0008 0020         case LONG:
                 _0x100009:
0024b7 30e3      	CPI  R30,LOW(0x3)
0024b8 f431      	BRNE _0x10000A
                 ; 0008 0021             *lamp_timer = LONG_MAX;
0024b9 01d8      	MOVW R26,R16
0024ba e0e5      	LDI  R30,LOW(5)
0024bb 93ec      	ST   X,R30
                 ; 0008 0022             *lamp_status = ON;
0024bc 01d9      	MOVW R26,R18
0024bd e0e1      	LDI  R30,LOW(1)
0024be c00f      	RJMP _0x100047
                 ; 0008 0023             break;
                 ; 0008 0024         case MEANDR:
                 _0x10000A:
0024bf 30e4      	CPI  R30,LOW(0x4)
0024c0 f431      	BRNE _0x10000B
                 ; 0008 0025             *lamp_timer = MEANDR_MAX;
0024c1 01d8      	MOVW R26,R16
0024c2 e0e3      	LDI  R30,LOW(3)
0024c3 93ec      	ST   X,R30
                 ; 0008 0026             *lamp_status = ON;
0024c4 01d9      	MOVW R26,R18
0024c5 e0e1      	LDI  R30,LOW(1)
0024c6 c007      	RJMP _0x100047
                 ; 0008 0027             break;
                 ; 0008 0028         case ON:
                 _0x10000B:
0024c7 30e1      	CPI  R30,LOW(0x1)
0024c8 f419      	BRNE _0x10000D
                 ; 0008 0029             *lamp_status = ON;
0024c9 01d9      	MOVW R26,R18
0024ca e0e1      	LDI  R30,LOW(1)
0024cb c002      	RJMP _0x100047
                 ; 0008 002A             break;
                 ; 0008 002B         default:
                 _0x10000D:
                 ; 0008 002C             *lamp_status = OFF;
0024cc 01d9      	MOVW R26,R18
0024cd e0e0      	LDI  R30,LOW(0)
                 _0x100047:
0024ce 93ec      	ST   X,R30
                 ; 0008 002D             break;
                 ; 0008 002E     };
                 ; 0008 002F     return (*lamp_status);
0024cf 01d9      	MOVW R26,R18
0024d0 91ec      	LD   R30,X
0024d1 940e 314b 	CALL __LOADLOCR4
0024d3 c265      	RJMP _0x20E0008
                 ; 0008 0030 }
                 ;// Функция обновления статуса любого светика
                 ;unsigned char update_lamp_status (unsigned char *lamp_mode) {
                 ; 0008 0032 unsigned char update_lamp_status (unsigned char *lamp_mode) {
                 _update_lamp_status:
                 ; 0008 0033     unsigned char *lamp_timer = lamp_mode + 1;
                 ; 0008 0034     unsigned char *lamp_status = lamp_mode + 2;
                 ; 0008 0035     switch (*lamp_mode) {
0024d4 940e 2d12 	CALL SUBOPT_0xAC
                 ;	*lamp_mode -> Y+4
                 ;	*lamp_timer -> R16,R17
                 ;	*lamp_status -> R18,R19
                 ; 0008 0036         case SHORT:
0024d6 f4b1      	BRNE _0x100011
                 ; 0008 0037             if (*lamp_timer) {
0024d7 01d8      	MOVW R26,R16
0024d8 91ec      	LD   R30,X
0024d9 30e0      	CPI  R30,0
0024da f089      	BREQ _0x100012
                 ; 0008 0038                 *lamp_timer = *lamp_timer - 1;
0024db 940e 2d21 	CALL SUBOPT_0xAD
                 ; 0008 0039                 if (*lamp_timer == 0) {
0024dd f471      	BRNE _0x100013
                 ; 0008 003A                     if (*lamp_status) {
0024de 01d9      	MOVW R26,R18
0024df 91ec      	LD   R30,X
0024e0 30e0      	CPI  R30,0
0024e1 f029      	BREQ _0x100014
                 ; 0008 003B                         *lamp_status = OFF;
0024e2 e0e0      	LDI  R30,LOW(0)
0024e3 93ec      	ST   X,R30
                 ; 0008 003C                         *lamp_timer = LONG_MAX;
0024e4 01d8      	MOVW R26,R16
0024e5 e0e5      	LDI  R30,LOW(5)
0024e6 c004      	RJMP _0x100048
                 ; 0008 003D                     } else {
                 _0x100014:
                 ; 0008 003E                         *lamp_status = ON;
0024e7 01d9      	MOVW R26,R18
0024e8 e0e1      	LDI  R30,LOW(1)
0024e9 93ec      	ST   X,R30
                 ; 0008 003F                         *lamp_timer = SHORT_MAX;
0024ea 01d8      	MOVW R26,R16
                 _0x100048:
0024eb 93ec      	ST   X,R30
                 ; 0008 0040                     }
                 ; 0008 0041                 }
                 ; 0008 0042             }
                 _0x100013:
                 ; 0008 0043             break;
                 _0x100012:
0024ec c036      	RJMP _0x100010
                 ; 0008 0044         case LONG:
                 _0x100011:
0024ed 30e3      	CPI  R30,LOW(0x3)
0024ee f4b9      	BRNE _0x100016
                 ; 0008 0045             if (*lamp_timer) {
0024ef 01d8      	MOVW R26,R16
0024f0 91ec      	LD   R30,X
0024f1 30e0      	CPI  R30,0
0024f2 f091      	BREQ _0x100017
                 ; 0008 0046                 *lamp_timer = *lamp_timer - 1;
0024f3 940e 2d21 	CALL SUBOPT_0xAD
                 ; 0008 0047                 if (*lamp_timer == 0) {
0024f5 f479      	BRNE _0x100018
                 ; 0008 0048                     if (*lamp_status) {
0024f6 01d9      	MOVW R26,R18
0024f7 91ec      	LD   R30,X
0024f8 30e0      	CPI  R30,0
0024f9 f029      	BREQ _0x100019
                 ; 0008 0049                         *lamp_status = OFF;
0024fa e0e0      	LDI  R30,LOW(0)
0024fb 93ec      	ST   X,R30
                 ; 0008 004A                         *lamp_timer = SHORT_MAX;
0024fc 01d8      	MOVW R26,R16
0024fd e0e1      	LDI  R30,LOW(1)
0024fe c005      	RJMP _0x100049
                 ; 0008 004B                     } else {
                 _0x100019:
                 ; 0008 004C                         *lamp_status = ON;
0024ff 01d9      	MOVW R26,R18
002500 e0e1      	LDI  R30,LOW(1)
002501 93ec      	ST   X,R30
                 ; 0008 004D                         *lamp_timer = LONG_MAX;
002502 01d8      	MOVW R26,R16
002503 e0e5      	LDI  R30,LOW(5)
                 _0x100049:
002504 93ec      	ST   X,R30
                 ; 0008 004E                     }
                 ; 0008 004F                 }
                 ; 0008 0050             }
                 _0x100018:
                 ; 0008 0051             break;
                 _0x100017:
002505 c01d      	RJMP _0x100010
                 ; 0008 0052         case MEANDR:
                 _0x100016:
002506 30e4      	CPI  R30,LOW(0x4)
002507 f481      	BRNE _0x10001B
                 ; 0008 0053             if (*lamp_timer) {
002508 01d8      	MOVW R26,R16
002509 91ec      	LD   R30,X
00250a 30e0      	CPI  R30,0
00250b f059      	BREQ _0x10001C
                 ; 0008 0054                 *lamp_timer = *lamp_timer - 1;
00250c 940e 2d21 	CALL SUBOPT_0xAD
                 ; 0008 0055                 if (*lamp_timer == 0) {
00250e f441      	BRNE _0x10001D
                 ; 0008 0056                     *lamp_status = !(*lamp_status);
00250f 01d9      	MOVW R26,R18
002510 91ec      	LD   R30,X
002511 940e 2f59 	CALL __LNEGB1
002513 93ec      	ST   X,R30
                 ; 0008 0057                     *lamp_timer = MEANDR_MAX;
002514 01d8      	MOVW R26,R16
002515 e0e3      	LDI  R30,LOW(3)
002516 93ec      	ST   X,R30
                 ; 0008 0058                 }
                 ; 0008 0059             }
                 _0x10001D:
                 ; 0008 005A             break;
                 _0x10001C:
002517 c00b      	RJMP _0x100010
                 ; 0008 005B         case ON:
                 _0x10001B:
002518 30e1      	CPI  R30,LOW(0x1)
002519 f419      	BRNE _0x10001E
                 ; 0008 005C             *lamp_status = ON;
00251a 01d9      	MOVW R26,R18
00251b e0e1      	LDI  R30,LOW(1)
00251c c005      	RJMP _0x10004A
                 ; 0008 005D             break;
                 ; 0008 005E         case OFF:
                 _0x10001E:
                 ; 0008 005F         default:
                 ; 0008 0060             *lamp_status = OFF;
00251d 01d9      	MOVW R26,R18
00251e e0e0      	LDI  R30,LOW(0)
00251f 93ec      	ST   X,R30
                 ; 0008 0061             *lamp_mode = OFF;
002520 81ac      	LDD  R26,Y+4
002521 81bd      	LDD  R27,Y+4+1
                 _0x10004A:
002522 93ec      	ST   X,R30
                 ; 0008 0062             break;
                 ; 0008 0063     };
                 _0x100010:
                 ; 0008 0064     return (*lamp_status);
002523 01d9      	MOVW R26,R18
002524 91ec      	LD   R30,X
002525 940e 314b 	CALL __LOADLOCR4
002527 c211      	RJMP _0x20E0008
                 ; 0008 0065 }
                 ;// Функция обновления статуса
                 ;// Вызывается только из таймера. Необходим равномерно распределенный по времени вызов.
                 ;void update_signal_status(void) {
                 ; 0008 0068 void update_signal_status(void) {
                 _update_signal_status:
                 ; 0008 0069     switch (signals.buz_mode) {
002528 91e0 03a6 	LDS  R30,_signals
                 ; 0008 006A         case SHORT:
00252a 30e2      	CPI  R30,LOW(0x2)
00252b f011      	BREQ _0x100025
                 ; 0008 006B         case LONG:
00252c 30e3      	CPI  R30,LOW(0x3)
00252d f491      	BRNE _0x100026
                 _0x100025:
                 ; 0008 006C             signals.buz_status = OFF;
00252e e0e0      	LDI  R30,LOW(0)
                +
00252f 93e0 03a8+STS _signals + 2 , R30
                 	__PUTB1MN _signals,2
                 ; 0008 006D             if (signals.buz_timer) {
                +
002531 91e0 03a7+LDS R30 , _signals + 1
                 	__GETB1MN _signals,1
002533 30e0      	CPI  R30,0
002534 f051      	BREQ _0x100027
                 ; 0008 006E                 signals.buz_timer--;
002535 940e 2d27 	CALL SUBOPT_0xAE
                 ; 0008 006F                 if (signals.buz_timer) signals.buz_status = ON; else signals.buz_mode = OFF;
002537 f021      	BREQ _0x100028
002538 e0e1      	LDI  R30,LOW(1)
                +
002539 93e0 03a8+STS _signals + 2 , R30
                 	__PUTB1MN _signals,2
00253b c003      	RJMP _0x100029
                 _0x100028:
00253c e0e0      	LDI  R30,LOW(0)
00253d 93e0 03a6 	STS  _signals,R30
                 ; 0008 0070             }
                 _0x100029:
                 ; 0008 0071             break;
                 _0x100027:
00253f c018      	RJMP _0x100023
                 ; 0008 0072         case MEANDR:
                 _0x100026:
002540 30e4      	CPI  R30,LOW(0x4)
002541 f489      	BRNE _0x10002D
                 ; 0008 0073             if (signals.buz_timer) {
                +
002542 91e0 03a7+LDS R30 , _signals + 1
                 	__GETB1MN _signals,1
002544 30e0      	CPI  R30,0
002545 f061      	BREQ _0x10002B
                 ; 0008 0074                 signals.buz_timer--;
002546 940e 2d27 	CALL SUBOPT_0xAE
                 ; 0008 0075                 if (signals.buz_timer == 0) {
002548 f449      	BRNE _0x10002C
                 ; 0008 0076                     signals.buz_status = !signals.buz_status;
                +
002549 91e0 03a8+LDS R30 , _signals + 2
                 	__GETB1MN _signals,2
00254b 940e 2f59 	CALL __LNEGB1
                +
00254d 93e0 03a8+STS _signals + 2 , R30
                 	__PUTB1MN _signals,2
                 ; 0008 0077                     signals.buz_timer = MEANDR_MAX;
00254f e0e3      	LDI  R30,LOW(3)
                +
002550 93e0 03a7+STS _signals + 1 , R30
                 	__PUTB1MN _signals,1
                 ; 0008 0078                 }
                 ; 0008 0079             }
                 _0x10002C:
                 ; 0008 007A             break;
                 _0x10002B:
002552 c005      	RJMP _0x100023
                 ; 0008 007B         default:
                 _0x10002D:
                 ; 0008 007C             signals.buz_status = OFF;
002553 e0e0      	LDI  R30,LOW(0)
                +
002554 93e0 03a8+STS _signals + 2 , R30
                 	__PUTB1MN _signals,2
                 ; 0008 007D             signals.buz_mode = OFF;
002556 93e0 03a6 	STS  _signals,R30
                 ; 0008 007E             break;
                 ; 0008 007F     }
                 _0x100023:
                 ; 0008 0080     if (mode.sound) BUZ = signals.buz_status;
                +
002558 91e0 01be+LDS R30 , _mode + 6
                 	__GETB1MN _mode,6
00255a 30e0      	CPI  R30,0
00255b f039      	BREQ _0x10002E
                +
00255c 91e0 03a8+LDS R30 , _signals + 2
                 	__GETB1MN _signals,2
00255e 30e0      	CPI  R30,0
00255f f411      	BRNE _0x10002F
002560 9896      	CBI  0x12,6
002561 c001      	RJMP _0x100030
                 _0x10002F:
002562 9a96      	SBI  0x12,6
                 _0x100030:
                 ; 0008 0081     RED = update_lamp_status(&signals.red_mode);
                 _0x10002E:
                +
002563 eae9     +LDI R30 , LOW ( _signals + 3 )
002564 e0f3     +LDI R31 , HIGH ( _signals + 3 )
                 	__POINTW1MN _signals,3
002565 940e 2d31 	CALL SUBOPT_0xAF
002567 f411      	BRNE _0x100031
002568 98db      	CBI  0x1B,3
002569 c001      	RJMP _0x100032
                 _0x100031:
00256a 9adb      	SBI  0x1B,3
                 _0x100032:
                 ; 0008 0082     GREEN = update_lamp_status(&signals.green_mode);
                +
00256b eaec     +LDI R30 , LOW ( _signals + 6 )
00256c e0f3     +LDI R31 , HIGH ( _signals + 6 )
                 	__POINTW1MN _signals,6
00256d 940e 2d31 	CALL SUBOPT_0xAF
00256f f411      	BRNE _0x100033
002570 98c4      	CBI  0x18,4
002571 c001      	RJMP _0x100034
                 _0x100033:
002572 9ac4      	SBI  0x18,4
                 _0x100034:
                 ; 0008 0083     WHITE = update_lamp_status(&signals.white_mode);
                +
002573 eaef     +LDI R30 , LOW ( _signals + 9 )
002574 e0f3     +LDI R31 , HIGH ( _signals + 9 )
                 	__POINTW1MN _signals,9
002575 940e 2d31 	CALL SUBOPT_0xAF
002577 f411      	BRNE _0x100035
002578 98da      	CBI  0x1B,2
002579 c001      	RJMP _0x100036
                 _0x100035:
00257a 9ada      	SBI  0x1B,2
                 _0x100036:
                 ; 0008 0084     // signal_printallbytes();
                 ; 0008 0085 }
00257b 9508      	RET
                 ;// Функция смены режима звукового оповещения
                 ;void signal_buz(unsigned char signal_mode) {
                 ; 0008 0087 void signal_buz(unsigned char signal_mode) {
                 _signal_buz:
                 ; 0008 0088     signals.buz_mode = signal_mode;
                 ;	signal_mode -> Y+0
00257c 81e8      	LD   R30,Y
00257d 93e0 03a6 	STS  _signals,R30
                 ; 0008 0089     switch (signal_mode) {
                 ; 0008 008A         case SHORT:
00257f 30e2      	CPI  R30,LOW(0x2)
002580 f431      	BRNE _0x10003A
                 ; 0008 008B             signals.buz_timer = SHORT_MAX;
002581 e0e1      	LDI  R30,LOW(1)
                +
002582 93e0 03a7+STS _signals + 1 , R30
                 	__PUTB1MN _signals,1
                 ; 0008 008C             signals.buz_status = ON;
                +
002584 93e0 03a8+STS _signals + 2 , R30
                 	__PUTB1MN _signals,2
                 ; 0008 008D             break;
002586 c013      	RJMP _0x100039
                 ; 0008 008E         case LONG:
                 _0x10003A:
002587 30e3      	CPI  R30,LOW(0x3)
002588 f429      	BRNE _0x10003B
                 ; 0008 008F             signals.buz_status = ON;
002589 e0e1      	LDI  R30,LOW(1)
                +
00258a 93e0 03a8+STS _signals + 2 , R30
                 	__PUTB1MN _signals,2
                 ; 0008 0090             signals.buz_timer = LONG_MAX;
00258c e0e5      	LDI  R30,LOW(5)
00258d c00a      	RJMP _0x10004B
                 ; 0008 0091             break;
                 ; 0008 0092         case MEANDR:
                 _0x10003B:
00258e 30e4      	CPI  R30,LOW(0x4)
00258f f429      	BRNE _0x10003D
                 ; 0008 0093             signals.buz_status = ON;
002590 e0e1      	LDI  R30,LOW(1)
                +
002591 93e0 03a8+STS _signals + 2 , R30
                 	__PUTB1MN _signals,2
                 ; 0008 0094             signals.buz_timer = MEANDR_MAX;
002593 e0e3      	LDI  R30,LOW(3)
002594 c003      	RJMP _0x10004B
                 ; 0008 0095             break;
                 ; 0008 0096         default:
                 _0x10003D:
                 ; 0008 0097             signals.buz_status = OFF;
002595 e0e0      	LDI  R30,LOW(0)
                +
002596 93e0 03a8+STS _signals + 2 , R30
                 	__PUTB1MN _signals,2
                 ; 0008 0098             signals.buz_timer = OFF;
                 _0x10004B:
                +
002598 93e0 03a7+STS _signals + 1 , R30
                 	__PUTB1MN _signals,1
                 ; 0008 0099             break;
                 ; 0008 009A     };
                 _0x100039:
                 ; 0008 009B     if (mode.sound) BUZ = signals.buz_status;
                +
00259a 91e0 01be+LDS R30 , _mode + 6
                 	__GETB1MN _mode,6
00259c 30e0      	CPI  R30,0
00259d f039      	BREQ _0x10003E
                +
00259e 91e0 03a8+LDS R30 , _signals + 2
                 	__GETB1MN _signals,2
0025a0 30e0      	CPI  R30,0
0025a1 f411      	BRNE _0x10003F
0025a2 9896      	CBI  0x12,6
0025a3 c001      	RJMP _0x100040
                 _0x10003F:
0025a4 9a96      	SBI  0x12,6
                 _0x100040:
                 ; 0008 009C }
                 _0x10003E:
0025a5 940c 2759 	JMP  _0x20E0003
                 ;// Функция смены режима светового оповещения красной лампочки
                 ;void signal_red(unsigned char signal_mode) {
                 ; 0008 009E void signal_red(unsigned char signal_mode) {
                 _signal_red:
                 ; 0008 009F     signals.red_mode = signal_mode;
                 ;	signal_mode -> Y+0
0025a7 81e8      	LD   R30,Y
                +
0025a8 93e0 03a9+STS _signals + 3 , R30
                 	__PUTB1MN _signals,3
                 ; 0008 00A0     RED = init_lamp_status(&signals.red_mode);
                +
0025aa eae9     +LDI R30 , LOW ( _signals + 3 )
0025ab e0f3     +LDI R31 , HIGH ( _signals + 3 )
                 	__POINTW1MN _signals,3
0025ac 940e 2d37 	CALL SUBOPT_0xB0
0025ae f411      	BRNE _0x100041
0025af 98db      	CBI  0x1B,3
0025b0 c001      	RJMP _0x100042
                 _0x100041:
0025b1 9adb      	SBI  0x1B,3
                 _0x100042:
                 ; 0008 00A1 }
0025b2 940c 2759 	JMP  _0x20E0003
                 ;// Функция смены режима светового оповещения зеленой лампочки
                 ;void signal_green(unsigned char signal_mode) {
                 ; 0008 00A3 void signal_green(unsigned char signal_mode) {
                 _signal_green:
                 ; 0008 00A4     signals.green_mode = signal_mode;
                 ;	signal_mode -> Y+0
0025b4 81e8      	LD   R30,Y
                +
0025b5 93e0 03ac+STS _signals + 6 , R30
                 	__PUTB1MN _signals,6
                 ; 0008 00A5     GREEN = init_lamp_status(&signals.green_mode);
                +
0025b7 eaec     +LDI R30 , LOW ( _signals + 6 )
0025b8 e0f3     +LDI R31 , HIGH ( _signals + 6 )
                 	__POINTW1MN _signals,6
0025b9 940e 2d37 	CALL SUBOPT_0xB0
0025bb f411      	BRNE _0x100043
0025bc 98c4      	CBI  0x18,4
0025bd c001      	RJMP _0x100044
                 _0x100043:
0025be 9ac4      	SBI  0x18,4
                 _0x100044:
                 ; 0008 00A6 }
0025bf 940c 2759 	JMP  _0x20E0003
                 ;// Функция смены режима светового оповещения белой лампочки
                 ;void signal_white(unsigned char signal_mode) {
                 ; 0008 00A8 void signal_white(unsigned char signal_mode) {
                 _signal_white:
                 ; 0008 00A9     signals.white_mode = signal_mode;
                 ;	signal_mode -> Y+0
0025c1 81e8      	LD   R30,Y
                +
0025c2 93e0 03af+STS _signals + 9 , R30
                 	__PUTB1MN _signals,9
                 ; 0008 00AA     WHITE = init_lamp_status(&signals.white_mode);
                +
0025c4 eaef     +LDI R30 , LOW ( _signals + 9 )
0025c5 e0f3     +LDI R31 , HIGH ( _signals + 9 )
                 	__POINTW1MN _signals,9
0025c6 940e 2d37 	CALL SUBOPT_0xB0
0025c8 f411      	BRNE _0x100045
0025c9 98da      	CBI  0x1B,2
0025ca c001      	RJMP _0x100046
                 _0x100045:
0025cb 9ada      	SBI  0x1B,2
                 _0x100046:
                 ; 0008 00AB }
0025cc 940c 2759 	JMP  _0x20E0003
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include "keys.h"
                 ;#include "robowater.h"
                 ;#include "valcoder.h"
                 ;#include "bits.h"
                 ;#include "signals.h"
                 ;#define NODEBUG
                 ;// Состояние всех клавиш
                 ;// Структура статуса кнопки. Устраняется дребезг и помехи.
                 ;struct st_key {
                 ;    signed char status;     // текущий статус кнопки (0 - off, 1 - on, -1 - идет выбор)
                 ;    unsigned char last;     // последний статус копки
                 ;    unsigned char is_work;  // Признак работоспособности кнопки (0 - не работает)
                 ;    unsigned char range;  // Признак выбора 0-выбрано 1- нет
                 ;    unsigned int on;        // кол-во 1 (см. мажоритарный клапан)
                 ;    unsigned int off;       // кол-во 0 (см. мажоритарный клапан)
                 ;    unsigned char reg;      // указатель на регистр кнопки
                 ;    unsigned char pin;      // нога регистра кнопки
                 ;} keys[NUM_KEYS]= {
                 ;    {-1, 0, 0, 0, 0, 0, 0x33, 3},     // [0] KEY_STOP   PINC.3
                 ;    {-1, 0, 0, 0, 0, 0, 0x33, 5},     // [1] KEY_START  PINC.5
                 ;    {-1, 0, 0, 0, 0, 0, 0x33, 6},     // [2] KEY_ENTER  PINC.6
                 ;    {-1, 0, 0, 0, 0, 0, 0x33, 7},     // [3] KEY_CANCEL PINC.7
                 ;    {-1, 0, 0, 0, 0, 0, 0x33, 2},     // [4] KEY_ALARM1 PINC.2
                 ;    {-1, 0, 0, 0, 0, 0, 0x33, 4},     // [5] KEY_ALARM2 PINC.4
                 ;    {-1, 0, 0, 0, 0, 0, 0x36, 1}      // [6] KEY_FILTER PINB.1
                 ;
                 ;};
                 
                 	.DSEG
                 ;// Счетчик срабатываний таймера 1
                 ;unsigned char t_key = 0;
                 ;// Функция, возвращающая значение клавиши
                 ;unsigned char key(unsigned char i) {
                 ; 0009 0021 unsigned char key(unsigned char i) {
                 
                 	.CSEG
                 _key:
                 ; 0009 0022     // return ((keys[i].status == KEY_POLL) ? keys[i].last : keys[i].status);
                 ; 0009 0023     if (i <= 3 ) {
                 ;	i -> Y+0
0025ce 81a8      	LD   R26,Y
0025cf 30a4      	CPI  R26,LOW(0x4)
0025d0 f520      	BRSH _0x120004
                 ; 0009 0024          if (keys[i].status == KEY_POLL) {
0025d1 940e 2d3d 	CALL SUBOPT_0xB1
0025d3 3fef      	CPI  R30,LOW(0xFF)
0025d4 f419      	BRNE _0x120005
                 ; 0009 0025                 return KEY_OFF;
0025d5 e0e1      	LDI  R30,LOW(1)
0025d6 940c 2759 	JMP  _0x20E0003
                 ; 0009 0026          } else {
                 _0x120005:
                 ; 0009 0027                 if (keys[i].status == KEY_ON) {
0025d8 940e 2d3d 	CALL SUBOPT_0xB1
0025da 30e0      	CPI  R30,0
0025db f469      	BRNE _0x120007
                 ; 0009 0028                     //printf ("кнопкa #%d. Статус = %d\r\n", i, key_treated[i]);
                 ; 0009 0029                     if (key_treated[i] == 0) {
0025dc 940e 2d45 	CALL SUBOPT_0xB2
0025de 81e0      	LD   R30,Z
0025df 30e0      	CPI  R30,0
0025e0 f429      	BRNE _0x120008
                 ; 0009 002A                         signal_buz(SHORT);
0025e1 940e 2a30 	CALL SUBOPT_0x2A
                 ; 0009 002B                         return KEY_ON;
0025e3 e0e0      	LDI  R30,LOW(0)
0025e4 940c 2759 	JMP  _0x20E0003
                 ; 0009 002C                     } else return KEY_OFF;
                 _0x120008:
0025e6 e0e1      	LDI  R30,LOW(1)
0025e7 940c 2759 	JMP  _0x20E0003
                 ; 0009 002D                  }
                 ; 0009 002E                 if (keys[i].status == KEY_OFF) {
                 _0x120007:
0025e9 940e 2d3d 	CALL SUBOPT_0xB1
0025eb 30e1      	CPI  R30,LOW(0x1)
0025ec f439      	BRNE _0x12000A
                 ; 0009 002F                     key_treated[i] = 0;
0025ed 940e 2d45 	CALL SUBOPT_0xB2
0025ef e0a0      	LDI  R26,LOW(0)
0025f0 83a0      	STD  Z+0,R26
                 ; 0009 0030                     //printf ("Опросили кнопку #%d. Статус = %d\r\n", i, key_treated[i]);
                 ; 0009 0031                     return KEY_OFF;
0025f1 e0e1      	LDI  R30,LOW(1)
0025f2 940c 2759 	JMP  _0x20E0003
                 ; 0009 0032                   }
                 ; 0009 0033          }
                 _0x12000A:
                 ; 0009 0034     } else {
0025f4 c00e      	RJMP _0x12000B
                 _0x120004:
                 ; 0009 0035         if (keys[i].status == KEY_POLL) {
0025f5 940e 2d3d 	CALL SUBOPT_0xB1
0025f7 3fef      	CPI  R30,LOW(0xFF)
0025f8 f431      	BRNE _0x12000C
                 ; 0009 0036             return (keys[i].last);
0025f9 81e8      	LD   R30,Y
0025fa 940e 2d4a 	CALL SUBOPT_0xB3
0025fc 81e0      	LD   R30,Z
0025fd 940c 2759 	JMP  _0x20E0003
                 ; 0009 0037         } else {
                 _0x12000C:
                 ; 0009 0038             //signal_buz(SHORT);
                 ; 0009 0039             return (keys[i].status);
0025ff 940e 2d3d 	CALL SUBOPT_0xB1
002601 940c 2759 	JMP  _0x20E0003
                 ; 0009 003A         }
                 ; 0009 003B     }
                 _0x12000B:
                 ; 0009 003C }
002603 c155      	RJMP _0x20E0003
                 ;// Функция инициализации всех кнопок
                 ;void init_keys(void) {
                 ; 0009 003E void init_keys(void) {
                 _init_keys:
                 ; 0009 003F     register unsigned char i;
                 ; 0009 0040     for (i=0; i<NUM_KEYS; i++) {
002604 930a      	ST   -Y,R16
                 ;	i -> R16
002605 e000      	LDI  R16,LOW(0)
                 _0x12000F:
002606 3007      	CPI  R16,7
002607 f5d0      	BRSH _0x120010
                 ; 0009 0041         t_key = KEY_INACTIVE;
002608 e0ea      	LDI  R30,LOW(10)
002609 93e0 02d5 	STS  _t_key,R30
                 ; 0009 0042         while (keys[i].status == KEY_POLL) {
                 _0x120011:
00260b 940e 2d50 	CALL SUBOPT_0xB4
00260d f591      	BRNE _0x120013
                 ; 0009 0043             poll_key(i);
00260e 930a      	ST   -Y,R16
00260f d03d      	RCALL _poll_key
                 ; 0009 0044             if(keys[i].status != KEY_POLL && keys[i].last != keys[i].status) {
002610 940e 2d50 	CALL SUBOPT_0xB4
002612 f081      	BREQ _0x120015
002613 e0aa      	LDI  R26,LOW(10)
002614 9f0a      	MUL  R16,R26
002615 01f0      	MOVW R30,R0
                +
002616 54ed     +SUBI R30 , LOW ( - _keys - ( 1 ) )
002617 4ffc     +SBCI R31 , HIGH ( - _keys - ( 1 ) )
                 	__ADDW1MN _keys,1
002618 8160      	LD   R22,Z
002619 940e 2d58 	CALL SUBOPT_0xB5
00261b 2fa6      	MOV  R26,R22
00261c e0b0      	LDI  R27,0
00261d e0f0      	LDI  R31,0
00261e fde7      	SBRC R30,7
00261f efff      	SER  R31
002620 17ea      	CP   R30,R26
002621 07fb      	CPC  R31,R27
002622 f409      	BRNE _0x120016
                 _0x120015:
002623 c014      	RJMP _0x120014
                 _0x120016:
                 ; 0009 0045                 keys[i].last = keys[i].status;
002624 e0aa      	LDI  R26,LOW(10)
002625 9f0a      	MUL  R16,R26
002626 01f0      	MOVW R30,R0
                +
002627 54ed     +SUBI R30 , LOW ( - _keys - ( 1 ) )
002628 4ffc     +SBCI R31 , HIGH ( - _keys - ( 1 ) )
                 	__ADDW1MN _keys,1
002629 01bf      	MOVW R22,R30
00262a 940e 2d58 	CALL SUBOPT_0xB5
00262c 01db      	MOVW R26,R22
00262d 93ec      	ST   X,R30
                 ; 0009 0046                 keys[i].status = KEY_POLL;
00262e e0aa      	LDI  R26,LOW(10)
00262f 9f0a      	MUL  R16,R26
002630 01f0      	MOVW R30,R0
002631 940e 2d5f 	CALL SUBOPT_0xB6
                 ; 0009 0047                 if (t_key == 0) break;        // printf ("сработал таймер\r\n");
002633 91e0 02d5 	LDS  R30,_t_key
002635 30e0      	CPI  R30,0
002636 f049      	BREQ _0x120013
                 ; 0009 0048             } else {
002637 c007      	RJMP _0x120018
                 _0x120014:
                 ; 0009 0049                 keys[i].is_work = 1;
002638 e0aa      	LDI  R26,LOW(10)
002639 9f0a      	MUL  R16,R26
00263a 01f0      	MOVW R30,R0
                +
00263b 54ec     +SUBI R30 , LOW ( - _keys - ( 2 ) )
00263c 4ffc     +SBCI R31 , HIGH ( - _keys - ( 2 ) )
                 	__ADDW1MN _keys,2
00263d e0a1      	LDI  R26,LOW(1)
00263e 83a0      	STD  Z+0,R26
                 ; 0009 004A             }
                 _0x120018:
                 ; 0009 004B         }
00263f cfcb      	RJMP _0x120011
                 _0x120013:
                 ; 0009 004C         //printf ("Опросили кнопку #%d. Статус = %d\r\n", i, keys[i].status);
                 ; 0009 004D     }
002640 5f0f      	SUBI R16,-1
002641 cfc4      	RJMP _0x12000F
                 _0x120010:
                 ; 0009 004E }
002642 c008      	RJMP _0x20E0009
                 ;// Функция опроса всех кнопок
                 ;void poll_keys(void) {
                 ; 0009 0050 void poll_keys(void) {
                 _poll_keys:
                 ; 0009 0051     register unsigned char i;
                 ; 0009 0052     #ifndef NODEBUG
                 ; 0009 0053     // printf ("Опрос всех кнопок (NUM_KEYS)\r\n");
                 ; 0009 0054     #endif
                 ; 0009 0055     for (i=0; i<NUM_KEYS; i++) {
002643 930a      	ST   -Y,R16
                 ;	i -> R16
002644 e000      	LDI  R16,LOW(0)
                 _0x12001A:
002645 3007      	CPI  R16,7
002646 f420      	BRSH _0x12001B
                 ; 0009 0056         poll_key(i);    // if keys[i].status
002647 930a      	ST   -Y,R16
002648 d004      	RCALL _poll_key
                 ; 0009 0057         //if (key(i) != keys[i].last)
                 ; 0009 0058         // printf("Нажата кнопка #%d\r\n", i);
                 ; 0009 0059     }
002649 5f0f      	SUBI R16,-1
00264a cffa      	RJMP _0x12001A
                 _0x12001B:
                 ; 0009 005A }
                 _0x20E0009:
00264b 9109      	LD   R16,Y+
00264c 9508      	RET
                 ;// Опрос конкретной кнопки
                 ;void poll_key(unsigned char i) {
                 ; 0009 005C void poll_key(unsigned char i) {
                 _poll_key:
                 ; 0009 005D     unsigned char pin_val = 0;
                 ; 0009 005E     union reg_port {
                 ; 0009 005F         unsigned char num[2];
                 ; 0009 0060         unsigned int *p;
                 ; 0009 0061     } curr_port;
                 ; 0009 0062 
                 ; 0009 0063     curr_port.num[0] = keys[i].reg; curr_port.num[1] = 0;
00264d 9722      	SBIW R28,2
00264e 930a      	ST   -Y,R16
                 ;	i -> Y+3
                 ;	pin_val -> R16
                 ;	reg_port -> Y+3
                 ;	curr_port -> Y+1
00264f e000      	LDI  R16,0
002650 940e 2d64 	CALL SUBOPT_0xB7
                +
002652 54e6     +SUBI R30 , LOW ( - _keys - ( 8 ) )
002653 4ffc     +SBCI R31 , HIGH ( - _keys - ( 8 ) )
                 	__ADDW1MN _keys,8
002654 81e0      	LD   R30,Z
002655 83e9      	STD  Y+1,R30
002656 e0e0      	LDI  R30,LOW(0)
002657 83ea      	STD  Y+2,R30
                 ; 0009 0064     // printf ("Опрашиваем клавишу 0x%x, нога %d", keys[i].reg, keys[i].pin);
                 ; 0009 0065     pin_val = BITSET(*(curr_port.p), keys[i].pin) >> keys[i].pin;
002658 81a9      	LDD  R26,Y+1
002659 81ba      	LDD  R27,Y+1+1
00265a 916d      	LD   R22,X+
00265b 917c      	LD   R23,X
00265c 940e 2d64 	CALL SUBOPT_0xB7
                +
00265e 54e5     +SUBI R30 , LOW ( - _keys - ( 9 ) )
00265f 4ffc     +SBCI R31 , HIGH ( - _keys - ( 9 ) )
                 	__ADDW1MN _keys,9
002660 81e0      	LD   R30,Z
002661 e0a1      	LDI  R26,LOW(1)
002662 940e 2f20 	CALL __LSLB12
002664 e0f0      	LDI  R31,0
                +
002665 236e     +AND R22 , R30
002666 237f     +AND R23 , R31
                 	__ANDWRR 22,23,30,31
002667 940e 2d64 	CALL SUBOPT_0xB7
                +
002669 54e5     +SUBI R30 , LOW ( - _keys - ( 9 ) )
00266a 4ffc     +SBCI R31 , HIGH ( - _keys - ( 9 ) )
                 	__ADDW1MN _keys,9
00266b 81e0      	LD   R30,Z
00266c 01db      	MOVW R26,R22
00266d 940e 2f28 	CALL __LSRW12
00266f 2f0e      	MOV  R16,R30
                 ; 0009 0066     // printf (", результат 0x%x\r\n", pin_val);
                 ; 0009 0067     switch (keys[i].status) {
002670 940e 2d64 	CALL SUBOPT_0xB7
002672 54ee      	SUBI R30,LOW(-_keys)
002673 4ffc      	SBCI R31,HIGH(-_keys)
002674 81e0      	LD   R30,Z
                 ; 0009 0068         case KEY_ON:
002675 30e0      	CPI  R30,0
002676 f4d9      	BRNE _0x12001F
                 ; 0009 0069             if (pin_val == KEY_OFF) {
002677 3001      	CPI  R16,1
002678 f4c1      	BRNE _0x120020
                 ; 0009 006A                 keys[i].status = KEY_POLL;
002679 940e 2d64 	CALL SUBOPT_0xB7
00267b 940e 2d5f 	CALL SUBOPT_0xB6
                 ; 0009 006B                 VALCODER_DISABLE();
00267d b7eb      	IN   R30,0x3B
00267e 73ef      	ANDI R30,LOW(0x3F)
00267f bfeb      	OUT  0x3B,R30
                 ; 0009 006C                 keys[i].on = 0;
002680 940e 2d64 	CALL SUBOPT_0xB7
                +
002682 54ea     +SUBI R30 , LOW ( - _keys - ( 4 ) )
002683 4ffc     +SBCI R31 , HIGH ( - _keys - ( 4 ) )
                 	__ADDW1MN _keys,4
002684 940e 2cf5 	CALL SUBOPT_0xA7
                 ; 0009 006D                 keys[i].off = 1;
002686 940e 2d64 	CALL SUBOPT_0xB7
                +
002688 54e8     +SUBI R30 , LOW ( - _keys - ( 6 ) )
002689 4ffc     +SBCI R31 , HIGH ( - _keys - ( 6 ) )
                 	__ADDW1MN _keys,6
00268a 940e 2d01 	CALL SUBOPT_0xA9
                 ; 0009 006E                 keys[i].last = KEY_ON;
00268c 81eb      	LDD  R30,Y+3
00268d 940e 2d4a 	CALL SUBOPT_0xB3
00268f e0a0      	LDI  R26,LOW(0)
002690 83a0      	STD  Z+0,R26
                 ; 0009 006F             }
                 ; 0009 0070             break;
                 _0x120020:
002691 c058      	RJMP _0x12001E
                 ; 0009 0071         case KEY_OFF:
                 _0x12001F:
002692 30e1      	CPI  R30,LOW(0x1)
002693 f4d9      	BRNE _0x120021
                 ; 0009 0072             if (pin_val == KEY_ON) {
002694 3000      	CPI  R16,0
002695 f4c1      	BRNE _0x120022
                 ; 0009 0073                 keys[i].status = KEY_POLL;
002696 940e 2d64 	CALL SUBOPT_0xB7
002698 940e 2d5f 	CALL SUBOPT_0xB6
                 ; 0009 0074                 VALCODER_DISABLE();
00269a b7eb      	IN   R30,0x3B
00269b 73ef      	ANDI R30,LOW(0x3F)
00269c bfeb      	OUT  0x3B,R30
                 ; 0009 0075                 keys[i].on = 1;
00269d 940e 2d64 	CALL SUBOPT_0xB7
                +
00269f 54ea     +SUBI R30 , LOW ( - _keys - ( 4 ) )
0026a0 4ffc     +SBCI R31 , HIGH ( - _keys - ( 4 ) )
                 	__ADDW1MN _keys,4
0026a1 940e 2d01 	CALL SUBOPT_0xA9
                 ; 0009 0076                 keys[i].off = 0;
0026a3 940e 2d64 	CALL SUBOPT_0xB7
                +
0026a5 54e8     +SUBI R30 , LOW ( - _keys - ( 6 ) )
0026a6 4ffc     +SBCI R31 , HIGH ( - _keys - ( 6 ) )
                 	__ADDW1MN _keys,6
0026a7 940e 2cf5 	CALL SUBOPT_0xA7
                 ; 0009 0077                 keys[i].last = KEY_OFF;
0026a9 81eb      	LDD  R30,Y+3
0026aa 940e 2d4a 	CALL SUBOPT_0xB3
0026ac e0a1      	LDI  R26,LOW(1)
0026ad 83a0      	STD  Z+0,R26
                 ; 0009 0078             }
                 ; 0009 0079             break;
                 _0x120022:
0026ae c03b      	RJMP _0x12001E
                 ; 0009 007A         case KEY_POLL:
                 _0x120021:
0026af 3fef      	CPI  R30,LOW(0xFFFFFFFF)
0026b0 f5c9      	BRNE _0x12002D
                 ; 0009 007B             (pin_val == KEY_ON) ? keys[i].on++ : keys[i].off++;
0026b1 3000      	CPI  R16,0
0026b2 f429      	BRNE _0x120024
0026b3 940e 2d64 	CALL SUBOPT_0xB7
                +
0026b5 54ea     +SUBI R30 , LOW ( - _keys - ( 4 ) )
0026b6 4ffc     +SBCI R31 , HIGH ( - _keys - ( 4 ) )
                 	__ADDW1MN _keys,4
0026b7 c004      	RJMP _0x12002E
                 _0x120024:
0026b8 940e 2d64 	CALL SUBOPT_0xB7
                +
0026ba 54e8     +SUBI R30 , LOW ( - _keys - ( 6 ) )
0026bb 4ffc     +SBCI R31 , HIGH ( - _keys - ( 6 ) )
                 	__ADDW1MN _keys,6
                 _0x12002E:
0026bc 01df      	MOVW R26,R30
0026bd 940e 2cfa 	CALL SUBOPT_0xA8
                 ; 0009 007C             // Выборы окончены?
                 ; 0009 007D             if (keys[i].on >= MAX_POLL || keys[i].off >= MAX_POLL) {
0026bf 940e 2d64 	CALL SUBOPT_0xB7
                +
0026c1 54ea     +SUBI R30 , LOW ( - _keys - ( 4 ) )
0026c2 4ffc     +SBCI R31 , HIGH ( - _keys - ( 4 ) )
                 	__ADDW1MN _keys,4
0026c3 940e 2d69 	CALL SUBOPT_0xB8
0026c5 f438      	BRSH _0x120028
0026c6 940e 2d64 	CALL SUBOPT_0xB7
                +
0026c8 54e8     +SUBI R30 , LOW ( - _keys - ( 6 ) )
0026c9 4ffc     +SBCI R31 , HIGH ( - _keys - ( 6 ) )
                 	__ADDW1MN _keys,6
0026ca 940e 2d69 	CALL SUBOPT_0xB8
0026cc f0e8      	BRLO _0x120027
                 _0x120028:
                 ; 0009 007E                 keys[i].status = (keys[i].on > keys[i].off) ? KEY_ON : KEY_OFF;
0026cd 940e 2d64 	CALL SUBOPT_0xB7
0026cf 54ee      	SUBI R30,LOW(-_keys)
0026d0 4ffc      	SBCI R31,HIGH(-_keys)
0026d1 01cf      	MOVW R24,R30
0026d2 940e 2d64 	CALL SUBOPT_0xB7
                +
0026d4 54ea     +SUBI R30 , LOW ( - _keys - ( 4 ) )
0026d5 4ffc     +SBCI R31 , HIGH ( - _keys - ( 4 ) )
                 	__ADDW1MN _keys,4
0026d6 8160      	LD   R22,Z
0026d7 8171      	LDD  R23,Z+1
0026d8 940e 2d64 	CALL SUBOPT_0xB7
                +
0026da 54e8     +SUBI R30 , LOW ( - _keys - ( 6 ) )
0026db 4ffc     +SBCI R31 , HIGH ( - _keys - ( 6 ) )
                 	__ADDW1MN _keys,6
0026dc 01df      	MOVW R26,R30
0026dd 940e 3004 	CALL __GETW1P
0026df 17e6      	CP   R30,R22
0026e0 07f7      	CPC  R31,R23
0026e1 f410      	BRSH _0x12002A
0026e2 e0e0      	LDI  R30,LOW(0)
0026e3 c001      	RJMP _0x12002B
                 _0x12002A:
0026e4 e0e1      	LDI  R30,LOW(1)
                 _0x12002B:
0026e5 01dc      	MOVW R26,R24
0026e6 93ec      	ST   X,R30
                 ; 0009 007F                 //printf(".");
                 ; 0009 0080                 VALCODER_ENABLE();
0026e7 b7eb      	IN   R30,0x3B
0026e8 6ce0      	ORI  R30,LOW(0xC0)
0026e9 bfeb      	OUT  0x3B,R30
                 ; 0009 0081                 // if (keys[i].status != keys[i].last)
                 ; 0009 0082                     // printf ("Адрес: 0x%x, Нога: %d, Значение: %d, предыдущее значение %d\r\n",
                 ; 0009 0083                     //     keys[i].reg, keys[i].pin, keys[i].status, keys[i].last);
                 ; 0009 0084             }
                 ; 0009 0085             break;
                 _0x120027:
                 ; 0009 0086         default:
                 _0x12002D:
                 ; 0009 0087     };
                 _0x12001E:
                 ; 0009 0088 }
0026ea 8108      	LDD  R16,Y+0
0026eb 9624      	ADIW R28,4
0026ec 9508      	RET
                 
                 	.CSEG
                 _rtc_init:
0026ed 81ea      	LDD  R30,Y+2
0026ee 70e3      	ANDI R30,LOW(0x3)
0026ef 83ea      	STD  Y+2,R30
0026f0 81e9      	LDD  R30,Y+1
0026f1 30e0      	CPI  R30,0
0026f2 f019      	BREQ _0x2000003
0026f3 81ea      	LDD  R30,Y+2
0026f4 61e0      	ORI  R30,0x10
0026f5 83ea      	STD  Y+2,R30
                 _0x2000003:
0026f6 81e8      	LD   R30,Y
0026f7 30e0      	CPI  R30,0
0026f8 f019      	BREQ _0x2000004
0026f9 81ea      	LDD  R30,Y+2
0026fa 68e0      	ORI  R30,0x80
0026fb 83ea      	STD  Y+2,R30
                 _0x2000004:
0026fc 940e 2d70 	CALL SUBOPT_0xB9
0026fe e0e7      	LDI  R30,LOW(7)
0026ff 940e 2d76 	CALL SUBOPT_0xBA
002701 c04c      	RJMP _0x20E0005
                 _rtc_get_time:
002702 940e 2d70 	CALL SUBOPT_0xB9
002704 e0e0      	LDI  R30,LOW(0)
002705 940e 2ce3 	CALL SUBOPT_0xA4
002707 940e 2d7b 	CALL SUBOPT_0xBB
002709 940e 2c0d 	CALL SUBOPT_0x7E
00270b 940e 2d86 	CALL SUBOPT_0xBC
00270d 93ea      	ST   -Y,R30
00270e 940e 2907 	CALL _bcd2bin
002710 81ac      	LDD  R26,Y+4
002711 81bd      	LDD  R27,Y+4+1
002712 c023      	RJMP _0x20E0007
                 _rtc_set_time:
002713 940e 2d70 	CALL SUBOPT_0xB9
002715 e0e0      	LDI  R30,LOW(0)
002716 93ea      	ST   -Y,R30
002717 940e 2e10 	CALL _i2c_write
002719 81e8      	LD   R30,Y
00271a 93ea      	ST   -Y,R30
00271b 940e 2913 	CALL _bin2bcd
00271d 940e 2cdd 	CALL SUBOPT_0xA3
00271f 940e 2913 	CALL _bin2bcd
002721 940e 2d76 	CALL SUBOPT_0xBA
002723 c027      	RJMP _0x20E0004
                 _rtc_get_date:
002724 940e 2d70 	CALL SUBOPT_0xB9
002726 e0e4      	LDI  R30,LOW(4)
002727 940e 2ce3 	CALL SUBOPT_0xA4
002729 940e 2d7b 	CALL SUBOPT_0xBB
00272b 81ac      	LDD  R26,Y+4
00272c 81bd      	LDD  R27,Y+4+1
00272d 93ec      	ST   X,R30
00272e e0e1      	LDI  R30,LOW(1)
00272f 940e 2d86 	CALL SUBOPT_0xBC
002731 93ea      	ST   -Y,R30
002732 940e 2907 	CALL _bcd2bin
002734 81a8      	LD   R26,Y
002735 81b9      	LDD  R27,Y+1
                 _0x20E0007:
002736 93ec      	ST   X,R30
002737 940e 2deb 	CALL _i2c_stop
                 _0x20E0008:
002739 9626      	ADIW R28,6
00273a 9508      	RET
                 _rtc_set_date:
00273b 940e 2d70 	CALL SUBOPT_0xB9
00273d e0e4      	LDI  R30,LOW(4)
00273e 940e 2d76 	CALL SUBOPT_0xBA
002740 93ea      	ST   -Y,R30
002741 940e 2913 	CALL _bin2bcd
002743 940e 2cdd 	CALL SUBOPT_0xA3
002745 940e 2913 	CALL _bin2bcd
002747 93ea      	ST   -Y,R30
002748 940e 2e10 	CALL _i2c_write
00274a 81e8      	LD   R30,Y
                 _0x20E0004:
00274b 93ea      	ST   -Y,R30
00274c 940e 2913 	CALL _bin2bcd
                 _0x20E0005:
00274e 93ea      	ST   -Y,R30
00274f 940e 2e10 	CALL _i2c_write
002751 940e 2deb 	CALL _i2c_stop
                 _0x20E0006:
002753 9623      	ADIW R28,3
002754 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
002755 9b5d           sbis usr,udre
002756 cffe           rjmp _putchar
002757 81e8           ld   r30,y
002758 b9ec           out  udr,r30
                 _0x20E0003:
002759 9621      	ADIW R28,1
00275a 9508      	RET
                 __put_G101:
00275b 931a      	ST   -Y,R17
00275c 930a      	ST   -Y,R16
00275d 81ac      	LDD  R26,Y+4
00275e 81bd      	LDD  R27,Y+4+1
00275f 940e 3004 	CALL __GETW1P
002761 9730      	SBIW R30,0
002762 f0b9      	BREQ _0x2020010
002763 81aa      	LDD  R26,Y+2
002764 81bb      	LDD  R27,Y+2+1
002765 940e 3004 	CALL __GETW1P
002767 018f      	MOVW R16,R30
002768 9730      	SBIW R30,0
002769 f049      	BREQ _0x2020012
                +
00276a 3002     +CPI R16 , LOW ( 2 )
00276b e0e0     +LDI R30 , HIGH ( 2 )
00276c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00276d f058      	BRLO _0x2020013
00276e 01f8      	MOVW R30,R16
00276f 9731      	SBIW R30,1
002770 018f      	MOVW R16,R30
002771 93ed      	ST   X+,R30
002772 93fc      	ST   X,R31
                 _0x2020012:
002773 81ac      	LDD  R26,Y+4
002774 81bd      	LDD  R27,Y+4+1
002775 940e 2cfa 	CALL SUBOPT_0xA8
002777 81ae      	LDD  R26,Y+6
002778 83a0      	STD  Z+0,R26
                 _0x2020013:
002779 c003      	RJMP _0x2020014
                 _0x2020010:
00277a 81ee      	LDD  R30,Y+6
00277b 93ea      	ST   -Y,R30
00277c dfd8      	RCALL _putchar
                 _0x2020014:
00277d 8119      	LDD  R17,Y+1
00277e 8108      	LDD  R16,Y+0
                 _0x20E0002:
00277f 9627      	ADIW R28,7
002780 9508      	RET
                 __print_G101:
002781 9726      	SBIW R28,6
002782 940e 3142 	CALL __SAVELOCR6
002784 e000      	LDI  R16,0
                 _0x2020015:
002785 89ea      	LDD  R30,Y+18
002786 89fb      	LDD  R31,Y+18+1
002787 9631      	ADIW R30,1
002788 8bea      	STD  Y+18,R30
002789 8bfb      	STD  Y+18+1,R31
00278a 9731      	SBIW R30,1
00278b 91e4      	LPM  R30,Z
00278c 2f3e      	MOV  R19,R30
00278d 30e0      	CPI  R30,0
00278e f411      	BRNE PC+3
00278f 940c 28ad 	JMP _0x2020017
002791 2fe0      	MOV  R30,R16
002792 30e0      	CPI  R30,0
002793 f439      	BRNE _0x202001B
002794 3235      	CPI  R19,37
002795 f411      	BRNE _0x202001C
002796 e001      	LDI  R16,LOW(1)
002797 c002      	RJMP _0x202001D
                 _0x202001C:
002798 940e 2d90 	CALL SUBOPT_0xBD
                 _0x202001D:
00279a c111      	RJMP _0x202001A
                 _0x202001B:
00279b 30e1      	CPI  R30,LOW(0x1)
00279c f4a9      	BRNE _0x202001E
00279d 3235      	CPI  R19,37
00279e f419      	BRNE _0x202001F
00279f 940e 2d90 	CALL SUBOPT_0xBD
0027a1 c109      	RJMP _0x20200BC
                 _0x202001F:
0027a2 e002      	LDI  R16,LOW(2)
0027a3 e050      	LDI  R21,LOW(0)
0027a4 e010      	LDI  R17,LOW(0)
0027a5 323d      	CPI  R19,45
0027a6 f411      	BRNE _0x2020020
0027a7 e011      	LDI  R17,LOW(1)
0027a8 c103      	RJMP _0x202001A
                 _0x2020020:
0027a9 323b      	CPI  R19,43
0027aa f411      	BRNE _0x2020021
0027ab e25b      	LDI  R21,LOW(43)
0027ac c0ff      	RJMP _0x202001A
                 _0x2020021:
0027ad 3230      	CPI  R19,32
0027ae f411      	BRNE _0x2020022
0027af e250      	LDI  R21,LOW(32)
0027b0 c0fb      	RJMP _0x202001A
                 _0x2020022:
0027b1 c002      	RJMP _0x2020023
                 _0x202001E:
0027b2 30e2      	CPI  R30,LOW(0x2)
0027b3 f439      	BRNE _0x2020024
                 _0x2020023:
0027b4 e040      	LDI  R20,LOW(0)
0027b5 e003      	LDI  R16,LOW(3)
0027b6 3330      	CPI  R19,48
0027b7 f411      	BRNE _0x2020025
0027b8 6810      	ORI  R17,LOW(128)
0027b9 c0f2      	RJMP _0x202001A
                 _0x2020025:
0027ba c004      	RJMP _0x2020026
                 _0x2020024:
0027bb 30e3      	CPI  R30,LOW(0x3)
0027bc f011      	BREQ PC+3
0027bd 940c 28ac 	JMP _0x202001A
                 _0x2020026:
0027bf 3330      	CPI  R19,48
0027c0 f010      	BRLO _0x2020029
0027c1 333a      	CPI  R19,58
0027c2 f008      	BRLO _0x202002A
                 _0x2020029:
0027c3 c009      	RJMP _0x2020028
                 _0x202002A:
0027c4 2fa4      	MOV  R26,R20
0027c5 e0ea      	LDI  R30,LOW(10)
0027c6 9fea      	MUL  R30,R26
0027c7 01f0      	MOVW R30,R0
0027c8 2f4e      	MOV  R20,R30
0027c9 2fe3      	MOV  R30,R19
0027ca 53e0      	SUBI R30,LOW(48)
0027cb 0f4e      	ADD  R20,R30
0027cc c0df      	RJMP _0x202001A
                 _0x2020028:
0027cd 2fe3      	MOV  R30,R19
0027ce 36e3      	CPI  R30,LOW(0x63)
0027cf f449      	BRNE _0x202002E
0027d0 940e 2d9b 	CALL SUBOPT_0xBE
0027d2 89e8      	LDD  R30,Y+16
0027d3 89f9      	LDD  R31,Y+16+1
0027d4 81a4      	LDD  R26,Z+4
0027d5 93aa      	ST   -Y,R26
0027d6 940e 2da1 	CALL SUBOPT_0xBF
0027d8 c0d2      	RJMP _0x202002F
                 _0x202002E:
0027d9 37e3      	CPI  R30,LOW(0x73)
0027da f441      	BRNE _0x2020031
0027db 940e 2d9b 	CALL SUBOPT_0xBE
0027dd 940e 2dab 	CALL SUBOPT_0xC0
0027df 940e 28f2 	CALL _strlen
0027e1 2f0e      	MOV  R16,R30
0027e2 c00a      	RJMP _0x2020032
                 _0x2020031:
0027e3 37e0      	CPI  R30,LOW(0x70)
0027e4 f461      	BRNE _0x2020034
0027e5 940e 2d9b 	CALL SUBOPT_0xBE
0027e7 940e 2dab 	CALL SUBOPT_0xC0
0027e9 940e 28fc 	CALL _strlenf
0027eb 2f0e      	MOV  R16,R30
0027ec 6018      	ORI  R17,LOW(8)
                 _0x2020032:
0027ed 6012      	ORI  R17,LOW(2)
0027ee 771f      	ANDI R17,LOW(127)
0027ef e020      	LDI  R18,LOW(0)
0027f0 c035      	RJMP _0x2020035
                 _0x2020034:
0027f1 36e4      	CPI  R30,LOW(0x64)
0027f2 f011      	BREQ _0x2020038
0027f3 36e9      	CPI  R30,LOW(0x69)
0027f4 f411      	BRNE _0x2020039
                 _0x2020038:
0027f5 6014      	ORI  R17,LOW(4)
0027f6 c002      	RJMP _0x202003A
                 _0x2020039:
0027f7 37e5      	CPI  R30,LOW(0x75)
0027f8 f431      	BRNE _0x202003B
                 _0x202003A:
0027f9 ebe4      	LDI  R30,LOW(_tbl10_G101*2)
0027fa e0f3      	LDI  R31,HIGH(_tbl10_G101*2)
0027fb 83ee      	STD  Y+6,R30
0027fc 83ff      	STD  Y+6+1,R31
0027fd e005      	LDI  R16,LOW(5)
0027fe c00d      	RJMP _0x202003C
                 _0x202003B:
0027ff 35e8      	CPI  R30,LOW(0x58)
002800 f411      	BRNE _0x202003E
002801 6018      	ORI  R17,LOW(8)
002802 c004      	RJMP _0x202003F
                 _0x202003E:
002803 37e8      	CPI  R30,LOW(0x78)
002804 f011      	BREQ PC+3
002805 940c 28ab 	JMP _0x2020070
                 _0x202003F:
002807 ebee      	LDI  R30,LOW(_tbl16_G101*2)
002808 e0f3      	LDI  R31,HIGH(_tbl16_G101*2)
002809 83ee      	STD  Y+6,R30
00280a 83ff      	STD  Y+6+1,R31
00280b e004      	LDI  R16,LOW(4)
                 _0x202003C:
00280c ff12      	SBRS R17,2
00280d c014      	RJMP _0x2020041
00280e 940e 2d9b 	CALL SUBOPT_0xBE
002810 940e 2db5 	CALL SUBOPT_0xC1
002812 85ab      	LDD  R26,Y+11
002813 23aa      	TST  R26
002814 f43a      	BRPL _0x2020042
002815 85ea      	LDD  R30,Y+10
002816 85fb      	LDD  R31,Y+10+1
002817 940e 2f14 	CALL __ANEGW1
002819 87ea      	STD  Y+10,R30
00281a 87fb      	STD  Y+10+1,R31
00281b e25d      	LDI  R21,LOW(45)
                 _0x2020042:
00281c 3050      	CPI  R21,0
00281d f011      	BREQ _0x2020043
00281e 5f0f      	SUBI R16,-LOW(1)
00281f c001      	RJMP _0x2020044
                 _0x2020043:
002820 7f1b      	ANDI R17,LOW(251)
                 _0x2020044:
002821 c004      	RJMP _0x2020045
                 _0x2020041:
002822 940e 2d9b 	CALL SUBOPT_0xBE
002824 940e 2db5 	CALL SUBOPT_0xC1
                 _0x2020045:
                 _0x2020035:
002826 fd10      	SBRC R17,0
002827 c011      	RJMP _0x2020046
                 _0x2020047:
002828 1704      	CP   R16,R20
002829 f478      	BRSH _0x2020049
00282a ff17      	SBRS R17,7
00282b c008      	RJMP _0x202004A
00282c ff12      	SBRS R17,2
00282d c004      	RJMP _0x202004B
00282e 7f1b      	ANDI R17,LOW(251)
00282f 2f35      	MOV  R19,R21
002830 5001      	SUBI R16,LOW(1)
002831 c001      	RJMP _0x202004C
                 _0x202004B:
002832 e330      	LDI  R19,LOW(48)
                 _0x202004C:
002833 c001      	RJMP _0x202004D
                 _0x202004A:
002834 e230      	LDI  R19,LOW(32)
                 _0x202004D:
002835 940e 2d90 	CALL SUBOPT_0xBD
002837 5041      	SUBI R20,LOW(1)
002838 cfef      	RJMP _0x2020047
                 _0x2020049:
                 _0x2020046:
002839 2f20      	MOV  R18,R16
00283a ff11      	SBRS R17,1
00283b c01a      	RJMP _0x202004E
                 _0x202004F:
00283c 3020      	CPI  R18,0
00283d f0b9      	BREQ _0x2020051
00283e ff13      	SBRS R17,3
00283f c008      	RJMP _0x2020052
002840 81ee      	LDD  R30,Y+6
002841 81ff      	LDD  R31,Y+6+1
002842 9631      	ADIW R30,1
002843 83ee      	STD  Y+6,R30
002844 83ff      	STD  Y+6+1,R31
002845 9731      	SBIW R30,1
002846 91e4      	LPM  R30,Z
002847 c005      	RJMP _0x20200BD
                 _0x2020052:
002848 81ae      	LDD  R26,Y+6
002849 81bf      	LDD  R27,Y+6+1
00284a 91ed      	LD   R30,X+
00284b 83ae      	STD  Y+6,R26
00284c 83bf      	STD  Y+6+1,R27
                 _0x20200BD:
00284d 93ea      	ST   -Y,R30
00284e 940e 2da1 	CALL SUBOPT_0xBF
002850 3040      	CPI  R20,0
002851 f009      	BREQ _0x2020054
002852 5041      	SUBI R20,LOW(1)
                 _0x2020054:
002853 5021      	SUBI R18,LOW(1)
002854 cfe7      	RJMP _0x202004F
                 _0x2020051:
002855 c04b      	RJMP _0x2020055
                 _0x202004E:
                 _0x2020057:
002856 e330      	LDI  R19,LOW(48)
002857 81ee      	LDD  R30,Y+6
002858 81ff      	LDD  R31,Y+6+1
002859 940e 3008 	CALL __GETW1PF
00285b 87e8      	STD  Y+8,R30
00285c 87f9      	STD  Y+8+1,R31
00285d 81ee      	LDD  R30,Y+6
00285e 81ff      	LDD  R31,Y+6+1
00285f 9632      	ADIW R30,2
002860 83ee      	STD  Y+6,R30
002861 83ff      	STD  Y+6+1,R31
                 _0x2020059:
002862 85e8      	LDD  R30,Y+8
002863 85f9      	LDD  R31,Y+8+1
002864 85aa      	LDD  R26,Y+10
002865 85bb      	LDD  R27,Y+10+1
002866 17ae      	CP   R26,R30
002867 07bf      	CPC  R27,R31
002868 f050      	BRLO _0x202005B
002869 5f3f      	SUBI R19,-LOW(1)
00286a 85a8      	LDD  R26,Y+8
00286b 85b9      	LDD  R27,Y+8+1
00286c 85ea      	LDD  R30,Y+10
00286d 85fb      	LDD  R31,Y+10+1
00286e 1bea      	SUB  R30,R26
00286f 0bfb      	SBC  R31,R27
002870 87ea      	STD  Y+10,R30
002871 87fb      	STD  Y+10+1,R31
002872 cfef      	RJMP _0x2020059
                 _0x202005B:
002873 333a      	CPI  R19,58
002874 f028      	BRLO _0x202005C
002875 ff13      	SBRS R17,3
002876 c002      	RJMP _0x202005D
002877 5f39      	SUBI R19,-LOW(7)
002878 c001      	RJMP _0x202005E
                 _0x202005D:
002879 5d39      	SUBI R19,-LOW(39)
                 _0x202005E:
                 _0x202005C:
00287a fd14      	SBRC R17,4
00287b c01a      	RJMP _0x2020060
00287c 3331      	CPI  R19,49
00287d f420      	BRSH _0x2020062
00287e 85a8      	LDD  R26,Y+8
00287f 85b9      	LDD  R27,Y+8+1
002880 9711      	SBIW R26,1
002881 f409      	BRNE _0x2020061
                 _0x2020062:
002882 c009      	RJMP _0x20200BE
                 _0x2020061:
002883 1742      	CP   R20,R18
002884 f010      	BRLO _0x2020066
002885 ff10      	SBRS R17,0
002886 c001      	RJMP _0x2020067
                 _0x2020066:
002887 c013      	RJMP _0x2020065
                 _0x2020067:
002888 e230      	LDI  R19,LOW(32)
002889 ff17      	SBRS R17,7
00288a c00b      	RJMP _0x2020068
00288b e330      	LDI  R19,LOW(48)
                 _0x20200BE:
00288c 6110      	ORI  R17,LOW(16)
00288d ff12      	SBRS R17,2
00288e c007      	RJMP _0x2020069
00288f 7f1b      	ANDI R17,LOW(251)
002890 935a      	ST   -Y,R21
002891 940e 2da1 	CALL SUBOPT_0xBF
002893 3040      	CPI  R20,0
002894 f009      	BREQ _0x202006A
002895 5041      	SUBI R20,LOW(1)
                 _0x202006A:
                 _0x2020069:
                 _0x2020068:
                 _0x2020060:
002896 940e 2d90 	CALL SUBOPT_0xBD
002898 3040      	CPI  R20,0
002899 f009      	BREQ _0x202006B
00289a 5041      	SUBI R20,LOW(1)
                 _0x202006B:
                 _0x2020065:
00289b 5021      	SUBI R18,LOW(1)
00289c 85a8      	LDD  R26,Y+8
00289d 85b9      	LDD  R27,Y+8+1
00289e 9712      	SBIW R26,2
00289f f008      	BRLO _0x2020058
0028a0 cfb5      	RJMP _0x2020057
                 _0x2020058:
                 _0x2020055:
0028a1 ff10      	SBRS R17,0
0028a2 c008      	RJMP _0x202006C
                 _0x202006D:
0028a3 3040      	CPI  R20,0
0028a4 f031      	BREQ _0x202006F
0028a5 5041      	SUBI R20,LOW(1)
0028a6 e2e0      	LDI  R30,LOW(32)
0028a7 93ea      	ST   -Y,R30
0028a8 940e 2da1 	CALL SUBOPT_0xBF
0028aa cff8      	RJMP _0x202006D
                 _0x202006F:
                 _0x202006C:
                 _0x2020070:
                 _0x202002F:
                 _0x20200BC:
0028ab e000      	LDI  R16,LOW(0)
                 _0x202001A:
0028ac ced8      	RJMP _0x2020015
                 _0x2020017:
0028ad 940e 3149 	CALL __LOADLOCR6
0028af 9664      	ADIW R28,20
0028b0 9508      	RET
                 _sprintf:
0028b1 92ff      	PUSH R15
0028b2 940e 2dbd 	CALL SUBOPT_0xC2
0028b4 01de      	MOVW R26,R28
0028b5 9616      	ADIW R26,6
0028b6 940e 2f0b 	CALL __ADDW2R15
0028b8 940e 3004 	CALL __GETW1P
0028ba 83ea      	STD  Y+2,R30
0028bb 83fb      	STD  Y+2+1,R31
0028bc 940e 2dc6 	CALL SUBOPT_0xC3
0028be 940e 2dcb 	CALL SUBOPT_0xC4
0028c0 81aa      	LDD  R26,Y+2
0028c1 81bb      	LDD  R27,Y+2+1
0028c2 e0e0      	LDI  R30,LOW(0)
0028c3 93ec      	ST   X,R30
0028c4 c00a      	RJMP _0x20E0001
                 _printf:
0028c5 92ff      	PUSH R15
0028c6 940e 2dbd 	CALL SUBOPT_0xC2
0028c8 e0e0      	LDI  R30,LOW(0)
0028c9 83ea      	STD  Y+2,R30
0028ca 83eb      	STD  Y+2+1,R30
0028cb 940e 2dc6 	CALL SUBOPT_0xC3
0028cd 940e 2dcb 	CALL SUBOPT_0xC4
                 _0x20E0001:
0028cf 8119      	LDD  R17,Y+1
0028d0 8108      	LDD  R16,Y+0
0028d1 9624      	ADIW R28,4
0028d2 90ff      	POP  R15
0028d3 9508      	RET
                 
                 	.CSEG
                 _abs:
0028d4 91e9          ld   r30,y+
0028d5 91f9          ld   r31,y+
0028d6 9730          sbiw r30,0
0028d7 f41a          brpl __abs0
0028d8 95e0          com  r30
0028d9 95f0          com  r31
0028da 9631          adiw r30,1
                 __abs0:
0028db 9508          ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcpy:
0028dc 91e9          ld   r30,y+
0028dd 91f9          ld   r31,y+
0028de 91a9          ld   r26,y+
0028df 91b9          ld   r27,y+
0028e0 01cd          movw r24,r26
                 strcpy0:
0028e1 9161          ld   r22,z+
0028e2 936d          st   x+,r22
0028e3 2366          tst  r22
0028e4 f7e1          brne strcpy0
0028e5 01fc          movw r30,r24
0028e6 9508          ret
                 _strcpyf:
0028e7 91e9          ld   r30,y+
0028e8 91f9          ld   r31,y+
0028e9 91a9          ld   r26,y+
0028ea 91b9          ld   r27,y+
0028eb 01cd          movw r24,r26
                 strcpyf0:
0028ec 9005      	lpm  r0,z+
0028ed 920d          st   x+,r0
0028ee 2000          tst  r0
0028ef f7e1          brne strcpyf0
0028f0 01fc          movw r30,r24
0028f1 9508          ret
                 _strlen:
0028f2 91a9          ld   r26,y+
0028f3 91b9          ld   r27,y+
0028f4 27ee          clr  r30
0028f5 27ff          clr  r31
                 strlen0:
0028f6 916d          ld   r22,x+
0028f7 2366          tst  r22
0028f8 f011          breq strlen1
0028f9 9631          adiw r30,1
0028fa cffb          rjmp strlen0
                 strlen1:
0028fb 9508          ret
                 _strlenf:
0028fc 27aa          clr  r26
0028fd 27bb          clr  r27
0028fe 91e9          ld   r30,y+
0028ff 91f9          ld   r31,y+
                 strlenf0:
002900 9005          lpm  r0,z+
002901 2000          tst  r0
002902 f011          breq strlenf1
002903 9611          adiw r26,1
002904 cffb          rjmp strlenf0
                 strlenf1:
002905 01fd          movw r30,r26
002906 9508          ret
                 
                 	.CSEG
                 _bcd2bin:
002907 81e8          ld   r30,y
002908 95e2          swap r30
002909 70ef          andi r30,0xf
00290a 2fae          mov  r26,r30
00290b 0faa          lsl  r26
00290c 0faa          lsl  r26
00290d 0fea          add  r30,r26
00290e 0fee          lsl  r30
00290f 91a9          ld   r26,y+
002910 70af          andi r26,0xf
002911 0fea          add  r30,r26
002912 9508          ret
                 _bin2bcd:
002913 91a9          ld   r26,y+
002914 27ee          clr  r30
                 bin2bcd0:
002915 50aa          subi r26,10
002916 f012          brmi bin2bcd1
002917 5fe0          subi r30,-16
002918 cffc          rjmp bin2bcd0
                 bin2bcd1:
002919 5fa6          subi r26,-10
00291a 0fea          add  r30,r26
00291b 9508          ret
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _prim_par:
000160           	.BYTE 0x58
                 _mode:
0001b8           	.BYTE 0x13
                 _event:
0001cb           	.BYTE 0x1
                 _s_dt:
0001cc           	.BYTE 0x6
                 _time_integration:
0001d2           	.BYTE 0x2
                 _timer1_valcoder:
0001d4           	.BYTE 0x1
                 _timer_start:
0001d5           	.BYTE 0x2
                 _timer_stop:
0001d7           	.BYTE 0x1
                 _timer_fan:
0001d8           	.BYTE 0x1
                 _count_fan:
0001d9           	.BYTE 0x1
                 ___ds1820_scratch_pad:
0001da           	.BYTE 0x9
                 _termometers:
0001e3           	.BYTE 0x18
                 _ds1820_rom_codes:
0001fb           	.BYTE 0x24
                 _valcoder:
00021f           	.BYTE 0x1
                 _linestr:
000220           	.BYTE 0x14
                 _main_menu:
000234           	.BYTE 0x23
                 _parameters:
000257           	.BYTE 0x37
                 _alerts:
00028e           	.BYTE 0x3C
                 _curr_menu:
0002ca           	.BYTE 0xB
                 _t_key:
0002d5           	.BYTE 0x1
                 _key_treated:
0002d6           	.BYTE 0x7
                 _error_w_stop_S0020003:
0002dd           	.BYTE 0x2
                 _dState_S0020006:
0002df           	.BYTE 0x2
                 _iState_S0020006:
0002e1           	.BYTE 0x2
                 _dt_curr_menu:
0002e3           	.BYTE 0xB
                 _sdt:
0002ee           	.BYTE 0x23
                 _settings:
000311           	.BYTE 0x55
                 _menustr_S005000C:
000366           	.BYTE 0x10
                 _alarm:
000376           	.BYTE 0x20
                 _alert_string_S0070006:
000396           	.BYTE 0x10
                 _signals:
0003a6           	.BYTE 0xC
                 _keys:
0003b2           	.BYTE 0x46
                 __seed_G102:
0003f8           	.BYTE 0x4
                 _p_S1030024:
0003fc           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x0:
00291c 920a      	ST   -Y,R0
00291d 921a      	ST   -Y,R1
00291e 92fa      	ST   -Y,R15
00291f 936a      	ST   -Y,R22
002920 937a      	ST   -Y,R23
002921 938a      	ST   -Y,R24
002922 939a      	ST   -Y,R25
002923 93aa      	ST   -Y,R26
002924 93ba      	ST   -Y,R27
002925 93ea      	ST   -Y,R30
002926 93fa      	ST   -Y,R31
002927 b7ef      	IN   R30,SREG
002928 93ea      	ST   -Y,R30
002929 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 34 TIMES, CODE SIZE REDUCTION:129 WORDS
                 SUBOPT_0x1:
00292a 93fa      	ST   -Y,R31
00292b 93ea      	ST   -Y,R30
00292c e080      	LDI  R24,0
00292d 940e 28c5 	CALL _printf
00292f 9622      	ADIW R28,2
002930 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
002931 e0e1      	LDI  R30,LOW(1)
002932 93ea      	ST   -Y,R30
002933 940c 25b4 	JMP  _signal_green
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x3:
002935 e0e0      	LDI  R30,LOW(0)
                +
002936 93e0 01b9+STS _mode + 1 , R30
                 	__PUTB1MN _mode,1
                +
002938 93e0 01bc+STS _mode + 4 , R30
                 	__PUTB1MN _mode,4
00293a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x4:
00293b e0e0      	LDI  R30,LOW(0)
00293c 93ea      	ST   -Y,R30
00293d 940c 25b4 	JMP  _signal_green
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00293f 91e0 01d2 	LDS  R30,_time_integration
002941 91f0 01d3 	LDS  R31,_time_integration+1
002943 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x6:
002944 ece8      	LDI  R30,LOW(200)
002945 e0f0      	LDI  R31,HIGH(200)
002946 93fa      	ST   -Y,R31
002947 93ea      	ST   -Y,R30
002948 940c 2e29 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
00294a e0e0      	LDI  R30,LOW(0)
00294b 93ea      	ST   -Y,R30
00294c e0e1      	LDI  R30,LOW(1)
00294d 93ea      	ST   -Y,R30
00294e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
00294f efe0      	LDI  R30,LOW(240)
002950 93ea      	ST   -Y,R30
002951 efeb      	LDI  R30,LOW(_ds1820_rom_codes)
002952 e0f1      	LDI  R31,HIGH(_ds1820_rom_codes)
002953 93fa      	ST   -Y,R31
002954 93ea      	ST   -Y,R30
002955 940c 2e85 	JMP  _w1_search
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
                +
002957 91e0 0193+LDS R30 , _prim_par + 51
                 	__GETB1MN _prim_par,51
002959 27ff      	CLR  R31
00295a 2766      	CLR  R22
00295b 2777      	CLR  R23
00295c 940e 300c 	CALL __PUTPARD1
00295e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 30 TIMES, CODE SIZE REDUCTION:55 WORDS
                 SUBOPT_0xA:
00295f e084      	LDI  R24,4
002960 940e 28c5 	CALL _printf
002962 9626      	ADIW R28,6
002963 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
002964 93fa      	ST   -Y,R31
002965 93ea      	ST   -Y,R30
002966 940c 2e29 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
002968 e3e4      	LDI  R30,LOW(_main_menu)
002969 e0f2      	LDI  R31,HIGH(_main_menu)
00296a 93fa      	ST   -Y,R31
00296b 93ea      	ST   -Y,R30
00296c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
00296d e0e7      	LDI  R30,LOW(7)
00296e 93ea      	ST   -Y,R30
00296f 940c 1f4e 	JMP  _init_curr_menu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
002971 e0e0      	LDI  R30,LOW(0)
002972 93ea      	ST   -Y,R30
002973 940e 25a7 	CALL _signal_red
002975 e0e0      	LDI  R30,LOW(0)
002976 93ea      	ST   -Y,R30
002977 940c 257c 	JMP  _signal_buz
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
002979 e0e0      	LDI  R30,LOW(0)
00297a 93ea      	ST   -Y,R30
00297b 940c 25c1 	JMP  _signal_white
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
00297d 9ac6      	SBI  0x18,6
                +
00297e ee86     +LDI R24 , LOW ( 230 )
00297f e090     +LDI R25 , HIGH ( 230 )
                +__DELAY_USW_LOOP :
002980 9701     +SBIW R24 , 1
002981 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 230
002982 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
002983 940e 0c3e 	CALL _lcd_e_toggle_G001
                +
002985 e48f     +LDI R24 , LOW ( 79 )
                +__DELAY_USB_LOOP :
002986 958a     +DEC R24
002987 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 79
002988 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x12:
002989 e08c      	LDI  R24,12
00298a 940e 28c5 	CALL _printf
00298c 962e      	ADIW R28,14
00298d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
00298e e0e3      	LDI  R30,LOW(3)
00298f 93ea      	ST   -Y,R30
002990 940e 25ce 	CALL _key
002992 30e0      	CPI  R30,0
002993 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
002994 e0e2      	LDI  R30,LOW(2)
002995 93ea      	ST   -Y,R30
002996 940e 25ce 	CALL _key
002998 30e0      	CPI  R30,0
002999 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
00299a e0e4      	LDI  R30,LOW(4)
                +
00299b 93e0 0193+STS _prim_par + 51 , R30
                 	__PUTB1MN _prim_par,51
00299d 940e 18a5 	CALL _sync_ds1820_eeprom
00299f 83e8      	ST   Y,R30
0029a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x16:
0029a1 e6e0      	LDI  R30,LOW(_prim_par)
0029a2 e0f1      	LDI  R31,HIGH(_prim_par)
0029a3 93fa      	ST   -Y,R31
0029a4 93ea      	ST   -Y,R30
0029a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x17:
0029a6 93fa      	ST   -Y,R31
0029a7 93ea      	ST   -Y,R30
0029a8 81ea      	LDD  R30,Y+2
0029a9 27ff      	CLR  R31
0029aa 2766      	CLR  R22
0029ab 2777      	CLR  R23
0029ac 940e 300c 	CALL __PUTPARD1
0029ae cfb0      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
0029af e0e1      	LDI  R30,LOW(1)
0029b0 93ea      	ST   -Y,R30
0029b1 940c 197e 	JMP  _read_all_terms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x19:
0029b3 e0e1      	LDI  R30,LOW(1)
0029b4 93ea      	ST   -Y,R30
0029b5 940c 1b17 	JMP  _sync_set_par
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x1A:
                +
0029b7 e7af     +LDI R26 , LOW ( _parameters + 40 )
0029b8 e0b2     +LDI R27 , HIGH ( _parameters + 40 )
                 	__POINTW2MN _parameters,40
                +
0029b9 91e0 016d+LDS R30 , _prim_par + 13
                 	__GETB1MN _prim_par,13
0029bb e0f0      	LDI  R31,0
0029bc 93ed      	ST   X+,R30
0029bd 93fc      	ST   X,R31
0029be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
                +
0029bf 91e0 017e+LDS R30 , _prim_par + 30
0029c1 91f0 017f+LDS R31 , _prim_par + 30 + 1
                 	__GETW1MN _prim_par,30
0029c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1C:
0029c4 93fa      	ST   -Y,R31
0029c5 93ea      	ST   -Y,R30
0029c6 940c 28d4 	JMP  _abs
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x1D:
                +
0029c8 91e0 0261+LDS R30 , _parameters + 10
0029ca 91f0 0262+LDS R31 , _parameters + 10 + 1
                 	__GETW1MN _parameters,10
0029cc 940e 2f4e 	CALL __CWD1
0029ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x1E:
                +
0029cf 3fe4     +CPI R30 , LOW ( 0x1F4 )
0029d0 e0a1     +LDI R26 , HIGH ( 0x1F4 )
0029d1 07fa     +CPC R31 , R26
0029d2 e0a0     +LDI R26 , BYTE3 ( 0x1F4 )
0029d3 076a     +CPC R22 , R26
0029d4 e0a0     +LDI R26 , BYTE4 ( 0x1F4 )
0029d5 077a     +CPC R23 , R26
                 	__CPD1N 0x1F4
0029d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x1F:
                +
0029d7 efa4     +LDI R26 , LOW ( 0x1F4 )
0029d8 e0b1     +LDI R27 , HIGH ( 0x1F4 )
0029d9 e080     +LDI R24 , BYTE3 ( 0x1F4 )
0029da e090     +LDI R25 , BYTE4 ( 0x1F4 )
                 	__GETD2N 0x1F4
0029db 940e 2f0f 	CALL __SUBD21
                +
0029dd 91e0 01bf+LDS R30 , _mode + 7
0029df 91f0 01c0+LDS R31 , _mode + 7 + 1
                 	__GETW1MN _mode,7
0029e1 940e 2f4e 	CALL __CWD1
0029e3 940e 2f8b 	CALL __MULD12
0029e5 01df      	MOVW R26,R30
0029e6 01cb      	MOVW R24,R22
                +
0029e7 eee8     +LDI R30 , LOW ( 0x3E8 )
0029e8 e0f3     +LDI R31 , HIGH ( 0x3E8 )
0029e9 e060     +LDI R22 , BYTE3 ( 0x3E8 )
0029ea e070     +LDI R23 , BYTE4 ( 0x3E8 )
                 	__GETD1N 0x3E8
0029eb 940e 2fcd 	CALL __DIVD21
0029ed 2e6e      	MOV  R6,R30
0029ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x20:
                +
0029ef 91a0 0275+LDS R26 , _parameters + 30
0029f1 91b0 0276+LDS R27 , _parameters + 30 + 1
                 	__GETW2MN _parameters,30
0029f3 2de6      	MOV  R30,R6
0029f4 e0f0      	LDI  R31,0
0029f5 17ae      	CP   R26,R30
0029f6 07bf      	CPC  R27,R31
0029f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x21:
0029f8 93fa      	ST   -Y,R31
0029f9 93ea      	ST   -Y,R30
                +
0029fa 91e0 027f+LDS R30 , _parameters + 40
0029fc 91f0 0280+LDS R31 , _parameters + 40 + 1
                 	__GETW1MN _parameters,40
0029fe 940e 2f4e 	CALL __CWD1
002a00 940e 300c 	CALL __PUTPARD1
002a02 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x22:
                +
002a03 91e0 0275+LDS R30 , _parameters + 30
002a05 91f0 0276+LDS R31 , _parameters + 30 + 1
                 	__GETW1MN _parameters,30
002a07 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 63 TIMES, CODE SIZE REDUCTION:121 WORDS
                 SUBOPT_0x23:
002a08 940e 2f4e 	CALL __CWD1
002a0a 940e 300c 	CALL __PUTPARD1
002a0c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x24:
002a0d e088      	LDI  R24,8
002a0e 940e 28c5 	CALL _printf
002a10 962a      	ADIW R28,10
002a11 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x25:
002a12 e0f0      	LDI  R31,0
002a13 fde7      	SBRC R30,7
002a14 efff      	SER  R31
002a15 cfae      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x26:
002a16 93ea      	ST   -Y,R30
002a17 940e 25ce 	CALL _key
002a19 30e0      	CPI  R30,0
002a1a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
002a1b df23      	RCALL SUBOPT_0x5
002a1c 2766      	CLR  R22
002a1d 2777      	CLR  R23
002a1e 940e 300c 	CALL __PUTPARD1
002a20 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 56 TIMES, CODE SIZE REDUCTION:162 WORDS
                 SUBOPT_0x28:
002a21 27ff      	CLR  R31
002a22 2766      	CLR  R22
002a23 2777      	CLR  R23
002a24 940e 300c 	CALL __PUTPARD1
002a26 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x29:
002a27 91e0 01b8 	LDS  R30,_mode
002a29 5fef      	SUBI R30,-LOW(1)
002a2a 93e0 01b8 	STS  _mode,R30
002a2c 50e1      	SUBI R30,LOW(1)
002a2d 93ea      	ST   -Y,R30
002a2e 940c 1f9f 	JMP  _lcd_menu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x2A:
002a30 e0e2      	LDI  R30,LOW(2)
002a31 93ea      	ST   -Y,R30
002a32 940c 257c 	JMP  _signal_buz
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2B:
002a34 91e0 01b8 	LDS  R30,_mode
002a36 50e1      	SUBI R30,LOW(1)
002a37 93e0 01b8 	STS  _mode,R30
002a39 940c 2094 	JMP  _lcd_esc_edit
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2C:
002a3b e0e1      	LDI  R30,LOW(1)
002a3c 93ea      	ST   -Y,R30
002a3d 940c 25c1 	JMP  _signal_white
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
                +
002a3f 91e0 0176+LDS R30 , _prim_par + 22
002a41 91f0 0177+LDS R31 , _prim_par + 22 + 1
                 	__GETW1MN _prim_par,22
002a43 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x2E:
                +
002a44 e7e5     +LDI R30 , LOW ( _parameters + 30 )
002a45 e0f2     +LDI R31 , HIGH ( _parameters + 30 )
                 	__POINTW1MN _parameters,30
002a46 efaf      	LDI  R26,LOW(255)
002a47 e0b0      	LDI  R27,HIGH(255)
002a48 83a0      	STD  Z+0,R26
002a49 83b1      	STD  Z+1,R27
002a4a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2F:
                +
002a4b 91a0 027f+LDS R26 , _parameters + 40
002a4d 91b0 0280+LDS R27 , _parameters + 40 + 1
                 	__GETW2MN _parameters,40
002a4f 36a7      	CPI  R26,LOW(0x67)
002a50 e0e0      	LDI  R30,HIGH(0x67)
002a51 07be      	CPC  R27,R30
002a52 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x30:
                +
002a53 e7ef     +LDI R30 , LOW ( _parameters + 40 )
002a54 e0f2     +LDI R31 , HIGH ( _parameters + 40 )
                 	__POINTW1MN _parameters,40
002a55 e6a6      	LDI  R26,LOW(102)
002a56 e0b0      	LDI  R27,HIGH(102)
002a57 83a0      	STD  Z+0,R26
002a58 83b1      	STD  Z+1,R27
002a59 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x31:
002a5a e0e0      	LDI  R30,LOW(0)
002a5b 93e0 01d2 	STS  _time_integration,R30
002a5d 93e0 01d3 	STS  _time_integration+1,R30
002a5f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x32:
002a60 e0e3      	LDI  R30,LOW(3)
002a61 93ea      	ST   -Y,R30
002a62 940c 257c 	JMP  _signal_buz
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x33:
002a64 e0e2      	LDI  R30,LOW(2)
002a65 93ea      	ST   -Y,R30
002a66 940c 25b4 	JMP  _signal_green
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x34:
002a68 e0e1      	LDI  R30,LOW(1)
002a69 93ea      	ST   -Y,R30
002a6a 940e 25a7 	CALL _signal_red
002a6c e0e4      	LDI  R30,LOW(4)
002a6d 93ea      	ST   -Y,R30
002a6e 940c 257c 	JMP  _signal_buz
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x35:
002a70 e0e0      	LDI  R30,LOW(0)
002a71 e0f0      	LDI  R31,HIGH(0)
002a72 93fa      	ST   -Y,R31
002a73 93ea      	ST   -Y,R30
002a74 e0e1      	LDI  R30,LOW(1)
002a75 e0f0      	LDI  R31,HIGH(1)
002a76 93fa      	ST   -Y,R31
002a77 93ea      	ST   -Y,R30
002a78 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x36:
002a79 93ea      	ST   -Y,R30
002a7a 940e 2475 	CALL _get_alert_str
002a7c 93fa      	ST   -Y,R31
002a7d 93ea      	ST   -Y,R30
002a7e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x37:
002a7f 93fa      	ST   -Y,R31
002a80 93ea      	ST   -Y,R30
002a81 e0e0      	LDI  R30,LOW(0)
002a82 93ea      	ST   -Y,R30
002a83 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:63 WORDS
                 SUBOPT_0x38:
002a84 940e 2475 	CALL _get_alert_str
002a86 2766      	CLR  R22
002a87 2777      	CLR  R23
002a88 940e 300c 	CALL __PUTPARD1
002a8a ced4      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x39:
                +
002a8b e3e4     +LDI R30 , LOW ( 2 * _0x40000 + 594 )
002a8c e0f7     +LDI R31 , HIGH ( 2 * _0x40000 + 594 )
                 	__POINTW1FN _0x40000,594
002a8d 93fa      	ST   -Y,R31
002a8e 93ea      	ST   -Y,R30
002a8f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3A:
002a90 93ea      	ST   -Y,R30
002a91 940e 23ba 	CALL _alarm_reg
002a93 cfd4      	RJMP SUBOPT_0x34
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3B:
002a94 e0e5      	LDI  R30,LOW(5)
002a95 e0f0      	LDI  R31,HIGH(5)
002a96 93fa      	ST   -Y,R31
002a97 93ea      	ST   -Y,R30
002a98 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3C:
002a99 e0f0      	LDI  R31,0
002a9a 93fa      	ST   -Y,R31
002a9b 93ea      	ST   -Y,R30
002a9c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x3D:
002a9d 93ea      	ST   -Y,R30
002a9e 940e 23ba 	CALL _alarm_reg
002aa0 e0e3      	LDI  R30,LOW(3)
002aa1 93ea      	ST   -Y,R30
002aa2 940e 25a7 	CALL _signal_red
002aa4 e0e4      	LDI  R30,LOW(4)
002aa5 93ea      	ST   -Y,R30
002aa6 940e 257c 	CALL _signal_buz
002aa8 ce92      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3E:
                +
002aa9 91e0 0182+LDS R30 , _prim_par + 34
002aab 91f0 0183+LDS R31 , _prim_par + 34 + 1
                 	__GETW1MN _prim_par,34
002aad 93e0 0257 	STS  _parameters,R30
002aaf 93f0 0258 	STS  _parameters+1,R31
002ab1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x3F:
002ab2 e0f0      	LDI  R31,0
002ab3 93ed      	ST   X+,R30
002ab4 93fc      	ST   X,R31
002ab5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x40:
                +
002ab6 e8a9     +LDI R26 , LOW ( _parameters + 50 )
002ab7 e0b2     +LDI R27 , HIGH ( _parameters + 50 )
                 	__POINTW2MN _parameters,50
                +
002ab8 91e0 01bb+LDS R30 , _mode + 3
                 	__GETB1MN _mode,3
002aba cff7      	RJMP SUBOPT_0x3F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x41:
002abb e6e4      	LDI  R30,LOW(100)
002abc e0f0      	LDI  R31,HIGH(100)
002abd 940e 2fa3 	CALL __DIVW21
002abf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x42:
                +
002ac0 91e0 017c+LDS R30 , _prim_par + 28
002ac2 91f0 017d+LDS R31 , _prim_par + 28 + 1
                 	__GETW1MN _prim_par,28
002ac4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x43:
002ac5 019f      	MOVW R18,R30
                +
002ac6 91a0 026b+LDS R26 , _parameters + 20
002ac8 91b0 026c+LDS R27 , _parameters + 20 + 1
                 	__GETW2MN _parameters,20
002aca 170a      	CP   R16,R26
002acb 071b      	CPC  R17,R27
002acc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x44:
002acd 91a0 02dd 	LDS  R26,_error_w_stop_S0020003
002acf 91b0 02de 	LDS  R27,_error_w_stop_S0020003+1
002ad1 0fea      	ADD  R30,R26
002ad2 1ffb      	ADC  R31,R27
                +
002ad3 93e0 0275+STS _parameters + 30 , R30
002ad5 93f0 0276+STS _parameters + 30 + 1 , R31
                 	__PUTW1MN _parameters,30
002ad7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x45:
                +
002ad8 e7a5     +LDI R26 , LOW ( _parameters + 30 )
002ad9 e0b2     +LDI R27 , HIGH ( _parameters + 30 )
                 	__POINTW2MN _parameters,30
002ada 2de6      	MOV  R30,R6
002adb cfd6      	RJMP SUBOPT_0x3F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x46:
                +
002adc 91a0 0275+LDS R26 , _parameters + 30
002ade 91b0 0276+LDS R27 , _parameters + 30 + 1
                 	__GETW2MN _parameters,30
002ae0 30a0      	CPI  R26,LOW(0x100)
002ae1 e0e1      	LDI  R30,HIGH(0x100)
002ae2 07be      	CPC  R27,R30
002ae3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x47:
                +
002ae4 91a0 026b+LDS R26 , _parameters + 20
002ae6 91b0 026c+LDS R27 , _parameters + 20 + 1
                 	__GETW2MN _parameters,20
002ae8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x48:
002ae9 93fa      	ST   -Y,R31
002aea 93ea      	ST   -Y,R30
002aeb 91e0 02dd 	LDS  R30,_error_w_stop_S0020003
002aed 91f0 02de 	LDS  R31,_error_w_stop_S0020003+1
002aef cf18      	RJMP SUBOPT_0x23
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x49:
                +
002af0 91e0 0270+LDS R30 , _parameters + 25
002af2 91f0 0271+LDS R31 , _parameters + 25 + 1
                 	__GETW1MN _parameters,25
002af4 cf13      	RJMP SUBOPT_0x23
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4A:
002af5 e0ea      	LDI  R30,LOW(10)
002af6 e0f0      	LDI  R31,HIGH(10)
002af7 940e 2fa3 	CALL __DIVW21
002af9 cf0e      	RJMP SUBOPT_0x23
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4B:
002afa e184      	LDI  R24,20
002afb 940e 28c5 	CALL _printf
002afd 9666      	ADIW R28,22
002afe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x4C:
                +
002aff 91e0 025c+LDS R30 , _parameters + 5
002b01 91f0 025d+LDS R31 , _parameters + 5 + 1
                 	__GETW1MN _parameters,5
002b03 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4D:
002b04 91e0 0257 	LDS  R30,_parameters
002b06 91f0 0258 	LDS  R31,_parameters+1
002b08 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4E:
002b09 91e0 01d9 	LDS  R30,_count_fan
002b0b 5fef      	SUBI R30,-LOW(1)
002b0c 93e0 01d9 	STS  _count_fan,R30
002b0e 91a0 01d9 	LDS  R26,_count_fan
002b10 30a5      	CPI  R26,LOW(0x5)
002b11 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
                +
002b12 91e0 027f+LDS R30 , _parameters + 40
002b14 91f0 0280+LDS R31 , _parameters + 40 + 1
                 	__GETW1MN _parameters,40
002b16 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x50:
                +
002b17 93e0 027f+STS _parameters + 40 , R30
002b19 93f0 0280+STS _parameters + 40 + 1 , R31
                 	__PUTW1MN _parameters,40
002b1b e0e0      	LDI  R30,LOW(0)
002b1c 93e0 01d9 	STS  _count_fan,R30
002b1e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x51:
                +
002b1f 91e0 027a+LDS R30 , _parameters + 35
002b21 91f0 027b+LDS R31 , _parameters + 35 + 1
                 	__GETW1MN _parameters,35
002b23 cee4      	RJMP SUBOPT_0x23
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x52:
002b24 e180      	LDI  R24,16
002b25 940e 28c5 	CALL _printf
002b27 9662      	ADIW R28,18
002b28 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x53:
                +
002b29 91a0 027f+LDS R26 , _parameters + 40
002b2b 91b0 0280+LDS R27 , _parameters + 40 + 1
                 	__GETW2MN _parameters,40
                +
002b2d 91e0 016d+LDS R30 , _prim_par + 13
                 	__GETB1MN _prim_par,13
002b2f e0f0      	LDI  R31,0
002b30 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x54:
                +
002b31 91e0 0170+LDS R30 , _prim_par + 16
002b33 91f0 0171+LDS R31 , _prim_par + 16 + 1
                 	__GETW1MN _prim_par,16
002b35 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x55:
002b36 940e 2f86 	CALL __MULW12
002b38 01df      	MOVW R26,R30
002b39 efef      	LDI  R30,LOW(255)
002b3a e0f0      	LDI  R31,HIGH(255)
002b3b 940e 2fa3 	CALL __DIVW21
002b3d ceca      	RJMP SUBOPT_0x23
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x56:
002b3e 91a0 02e1 	LDS  R26,_iState_S0020006
002b40 91b0 02e2 	LDS  R27,_iState_S0020006+1
002b42 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x57:
002b43 85e8      	LDD  R30,Y+8
002b44 85f9      	LDD  R31,Y+8+1
002b45 dff8      	RCALL SUBOPT_0x56
002b46 17ea      	CP   R30,R26
002b47 07fb      	CPC  R31,R27
002b48 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x58:
002b49 93fa      	ST   -Y,R31
002b4a 93ea      	ST   -Y,R30
002b4b 91e0 01cc 	LDS  R30,_s_dt
002b4d ced3      	RJMP SUBOPT_0x28
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x59:
                +
002b4e 91e0 01cd+LDS R30 , _s_dt + 1
                 	__GETB1MN _s_dt,1
002b50 ced0      	RJMP SUBOPT_0x28
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5A:
                +
002b51 91e0 01ce+LDS R30 , _s_dt + 2
                 	__GETB1MN _s_dt,2
002b53 cecd      	RJMP SUBOPT_0x28
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5B:
002b54 e0a9      	LDI  R26,LOW(9)
002b55 9f2a      	MUL  R18,R26
002b56 01f0      	MOVW R30,R0
002b57 50e5      	SUBI R30,LOW(-_ds1820_rom_codes)
002b58 4ffe      	SBCI R31,HIGH(-_ds1820_rom_codes)
002b59 93fa      	ST   -Y,R31
002b5a 93ea      	ST   -Y,R30
002b5b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5C:
002b5c e6e4      	LDI  R30,LOW(100)
002b5d e0f0      	LDI  R31,HIGH(100)
002b5e 940e 2fd5 	CALL __MODW21
002b60 ce63      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 33 TIMES, CODE SIZE REDUCTION:61 WORDS
                 SUBOPT_0x5D:
002b61 2766      	CLR  R22
002b62 2777      	CLR  R23
002b63 940e 300c 	CALL __PUTPARD1
002b65 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x5E:
002b66 940e 2f48 	CALL __CBD1
002b68 940e 300c 	CALL __PUTPARD1
002b6a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5F:
                +
002b6b efe9     +LDI R30 , LOW ( 2 * _0x40000 + 23 )
002b6c e0f4     +LDI R31 , HIGH ( 2 * _0x40000 + 23 )
                 	__POINTW1FN _0x40000,23
002b6d cdbc      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x60:
002b6e e0a6      	LDI  R26,LOW(6)
002b6f 9fea      	MUL  R30,R26
002b70 01f0      	MOVW R30,R0
002b71 51ed      	SUBI R30,LOW(-_termometers)
002b72 4ffe      	SBCI R31,HIGH(-_termometers)
002b73 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x61:
                +
002b74 e8a4     +LDI R26 , LOW ( _prim_par + 36 )
002b75 e0b1     +LDI R27 , HIGH ( _prim_par + 36 )
                 	__POINTW2MN _prim_par,36
002b76 27ee      	CLR  R30
002b77 0fa0      	ADD  R26,R16
002b78 1fbe      	ADC  R27,R30
002b79 91ec      	LD   R30,X
002b7a 30e0      	CPI  R30,0
002b7b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x62:
002b7c 01fe      	MOVW R30,R28
002b7d 9635      	ADIW R30,5
002b7e 93fa      	ST   -Y,R31
002b7f 93ea      	ST   -Y,R30
002b80 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x63:
002b81 93fa      	ST   -Y,R31
002b82 93ea      	ST   -Y,R30
002b83 e080      	LDI  R24,0
002b84 940e 28b1 	CALL _sprintf
002b86 9624      	ADIW R28,4
002b87 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x64:
002b88 e0e0      	LDI  R30,LOW(0)
002b89 93ea      	ST   -Y,R30
002b8a 93ea      	ST   -Y,R30
002b8b 940c 0cc6 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 30 TIMES, CODE SIZE REDUCTION:55 WORDS
                 SUBOPT_0x65:
002b8d e2e0      	LDI  R30,LOW(_linestr)
002b8e e0f2      	LDI  R31,HIGH(_linestr)
002b8f 93fa      	ST   -Y,R31
002b90 93ea      	ST   -Y,R30
002b91 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x66:
                +
002b92 91e0 01d1+LDS R30 , _s_dt + 5
                 	__GETB1MN _s_dt,5
002b94 ce8c      	RJMP SUBOPT_0x28
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x67:
                +
002b95 91e0 01d0+LDS R30 , _s_dt + 4
                 	__GETB1MN _s_dt,4
002b97 ce89      	RJMP SUBOPT_0x28
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x68:
002b98 934a      	ST   -Y,R20
002b99 933a      	ST   -Y,R19
002b9a 940e 28d4 	CALL _abs
002b9c 01df      	MOVW R26,R30
002b9d e6e4      	LDI  R30,LOW(100)
002b9e e0f0      	LDI  R31,HIGH(100)
002b9f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x69:
002ba0 940e 2f90 	CALL __DIVW21U
002ba2 cfbe      	RJMP SUBOPT_0x5D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6A:
002ba3 e180      	LDI  R24,16
002ba4 940e 28b1 	CALL _sprintf
002ba6 9664      	ADIW R28,20
002ba7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6B:
002ba8 93fa      	ST   -Y,R31
002ba9 93ea      	ST   -Y,R30
002baa 81ec      	LDD  R30,Y+4
002bab ce75      	RJMP SUBOPT_0x28
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x6C:
002bac e0a9      	LDI  R26,LOW(9)
002bad 9f0a      	MUL  R16,R26
002bae 01f0      	MOVW R30,R0
002baf 50e5      	SUBI R30,LOW(-_ds1820_rom_codes)
002bb0 4ffe      	SBCI R31,HIGH(-_ds1820_rom_codes)
002bb1 93fa      	ST   -Y,R31
002bb2 93ea      	ST   -Y,R30
002bb3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6D:
002bb4 e0b0      	LDI  R27,0
002bb5 fda7      	SBRC R26,7
002bb6 efbf      	SER  R27
002bb7 e0f0      	LDI  R31,0
002bb8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6E:
002bb9 93fa      	ST   -Y,R31
002bba 93ea      	ST   -Y,R30
002bbb 85e9      	LDD  R30,Y+9
002bbc ce64      	RJMP SUBOPT_0x28
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6F:
002bbd 93ea      	ST   -Y,R30
002bbe 940e 1a76 	CALL _ds1820_set_alarm
002bc0 30e0      	CPI  R30,0
002bc1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x70:
002bc2 81e9      	LDD  R30,Y+1
002bc3 e0a9      	LDI  R26,LOW(9)
002bc4 9fea      	MUL  R30,R26
002bc5 01f0      	MOVW R30,R0
002bc6 50e5      	SUBI R30,LOW(-_ds1820_rom_codes)
002bc7 4ffe      	SBCI R31,HIGH(-_ds1820_rom_codes)
002bc8 93fa      	ST   -Y,R31
002bc9 93ea      	ST   -Y,R30
002bca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x71:
002bcb 93fa      	ST   -Y,R31
002bcc 93ea      	ST   -Y,R30
002bcd 940c 1d9a 	JMP  _param_str
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x72:
002bcf 93ea      	ST   -Y,R30
002bd0 e0e1      	LDI  R30,LOW(1)
002bd1 93ea      	ST   -Y,R30
002bd2 940c 173d 	JMP  _set_term
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x73:
002bd4 93ea      	ST   -Y,R30
002bd5 ebeb      	LDI  R30,LOW(187)
002bd6 93ea      	ST   -Y,R30
002bd7 940c 173d 	JMP  _set_term
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x74:
002bd9 e0f0      	LDI  R31,0
002bda 01bd      	MOVW R22,R26
002bdb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x75:
002bdc 81e9      	LDD  R30,Y+1
002bdd e0a6      	LDI  R26,LOW(6)
002bde 9fea      	MUL  R30,R26
002bdf 01f0      	MOVW R30,R0
                +
002be0 51e8     +SUBI R30 , LOW ( - _termometers - ( 5 ) )
002be1 4ffe     +SBCI R31 , HIGH ( - _termometers - ( 5 ) )
                 	__ADDW1MN _termometers,5
002be2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x76:
002be3 81e9      	LDD  R30,Y+1
002be4 e0a6      	LDI  R26,LOW(6)
002be5 9fea      	MUL  R30,R26
002be6 01f0      	MOVW R30,R0
                +
002be7 51ea     +SUBI R30 , LOW ( - _termometers - ( 3 ) )
002be8 4ffe     +SBCI R31 , HIGH ( - _termometers - ( 3 ) )
                 	__ADDW1MN _termometers,3
002be9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x77:
002bea 01df      	MOVW R26,R30
002beb 940e 3004 	CALL __GETW1P
002bed 01db      	MOVW R26,R22
002bee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x78:
002bef 93ea      	ST   -Y,R30
002bf0 940e 2e7b 	CALL _w1_write
002bf2 e000      	LDI  R16,LOW(0)
002bf3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x79:
002bf4 93fa      	ST   -Y,R31
002bf5 93ea      	ST   -Y,R30
002bf6 940c 19af 	JMP  _ds1820_select
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x7A:
002bf8 93fa      	ST   -Y,R31
002bf9 93ea      	ST   -Y,R30
002bfa 940e 19d1 	CALL _ds1820_read_spd
002bfc 30e0      	CPI  R30,0
002bfd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7B:
002bfe 81ea      	LDD  R30,Y+2
002bff 81fb      	LDD  R31,Y+2+1
002c00 93fa      	ST   -Y,R31
002c01 93ea      	ST   -Y,R30
002c02 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7C:
002c03 81ea      	LDD  R30,Y+2
002c04 81fb      	LDD  R31,Y+2+1
002c05 cff2      	RJMP SUBOPT_0x7A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7D:
002c06 e4e8      	LDI  R30,LOW(72)
002c07 93ea      	ST   -Y,R30
002c08 940e 2e7b 	CALL _w1_write
002c0a e0ef      	LDI  R30,LOW(15)
002c0b e0f0      	LDI  R31,HIGH(15)
002c0c cd57      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7E:
002c0d 81a8      	LD   R26,Y
002c0e 81b9      	LDD  R27,Y+1
002c0f 93ec      	ST   X,R30
002c10 e0e1      	LDI  R30,LOW(1)
002c11 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7F:
002c12 2fe0      	MOV  R30,R16
002c13 e0a2      	LDI  R26,LOW(2)
002c14 9fea      	MUL  R30,R26
002c15 01f0      	MOVW R30,R0
002c16 5fe7      	SUBI R30,-LOW(9)
002c17 2f1e      	MOV  R17,R30
002c18 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x80:
002c19 5eef      	SUBI R30,LOW(-_settings)
002c1a 4ffc      	SBCI R31,HIGH(-_settings)
002c1b 01bf      	MOVW R22,R30
002c1c e0a3      	LDI  R26,LOW(3)
002c1d 9f0a      	MUL  R16,R26
002c1e 01f0      	MOVW R30,R0
002c1f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x81:
002c20 91e0 02ee 	LDS  R30,_sdt
002c22 91f0 02ef 	LDS  R31,_sdt+1
002c24 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x82:
002c25 e0b0      	LDI  R27,0
002c26 17ea      	CP   R30,R26
002c27 07fb      	CPC  R31,R27
002c28 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x83:
                +
002c29 91e0 02f3+LDS R30 , _sdt + 5
002c2b 91f0 02f4+LDS R31 , _sdt + 5 + 1
                 	__GETW1MN _sdt,5
002c2d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x84:
002c2e 93fa      	ST   -Y,R31
002c2f 93ea      	ST   -Y,R30
002c30 dfef      	RCALL SUBOPT_0x81
002c31 cdd6      	RJMP SUBOPT_0x23
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x85:
002c32 93fa      	ST   -Y,R31
002c33 93ea      	ST   -Y,R30
                +
002c34 91e0 02f8+LDS R30 , _sdt + 10
002c36 91f0 02f9+LDS R31 , _sdt + 10 + 1
                 	__GETW1MN _sdt,10
002c38 cdcf      	RJMP SUBOPT_0x23
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x86:
                +
002c39 91e0 02fd+LDS R30 , _sdt + 15
002c3b 91f0 02fe+LDS R31 , _sdt + 15 + 1
                 	__GETW1MN _sdt,15
002c3d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x87:
                +
002c3e 91e0 0302+LDS R30 , _sdt + 20
002c40 91f0 0303+LDS R31 , _sdt + 20 + 1
                 	__GETW1MN _sdt,20
002c42 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x88:
002c43 e0a5      	LDI  R26,LOW(5)
002c44 9f1a      	MUL  R17,R26
002c45 01f0      	MOVW R30,R0
002c46 5eef      	SUBI R30,LOW(-_settings)
002c47 4ffc      	SBCI R31,HIGH(-_settings)
002c48 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x89:
002c49 e0a5      	LDI  R26,LOW(5)
002c4a 9f0a      	MUL  R16,R26
002c4b 01f0      	MOVW R30,R0
002c4c 57e2      	SUBI R30,LOW(-_alerts)
002c4d 4ffd      	SBCI R31,HIGH(-_alerts)
002c4e 01df      	MOVW R26,R30
002c4f 940e 3004 	CALL __GETW1P
002c51 9730      	SBIW R30,0
002c52 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8A:
002c53 e0a5      	LDI  R26,LOW(5)
002c54 e0b0      	LDI  R27,HIGH(5)
002c55 940e 2f5e 	CALL __MULW12U
002c57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8B:
                +
002c58 eee2     +LDI R30 , LOW ( 2 * _0xA0000 + 170 )
002c59 e1f2     +LDI R31 , HIGH ( 2 * _0xA0000 + 170 )
                 	__POINTW1FN _0xA0000,170
002c5a 93fa      	ST   -Y,R31
002c5b 93ea      	ST   -Y,R30
002c5c 01f8      	MOVW R30,R16
002c5d cf03      	RJMP SUBOPT_0x5D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x8C:
002c5e e084      	LDI  R24,4
002c5f 940e 28b1 	CALL _sprintf
002c61 9628      	ADIW R28,8
002c62 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:45 WORDS
                 SUBOPT_0x8D:
002c63 93fa      	ST   -Y,R31
002c64 93ea      	ST   -Y,R30
002c65 01f8      	MOVW R30,R16
002c66 cefa      	RJMP SUBOPT_0x5D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8E:
002c67 e088      	LDI  R24,8
002c68 940e 28b1 	CALL _sprintf
002c6a 962c      	ADIW R28,12
002c6b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8F:
002c6c 85ef      	LDD  R30,Y+15
002c6d 89f8      	LDD  R31,Y+15+1
002c6e cd99      	RJMP SUBOPT_0x23
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x90:
002c6f 93ea      	ST   -Y,R30
                +
002c70 91e0 02cd+LDS R30 , _curr_menu + 3
002c72 91f0 02ce+LDS R31 , _curr_menu + 3 + 1
                 	__GETW1MN _curr_menu,3
002c74 cf56      	RJMP SUBOPT_0x71
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x91:
002c75 93fa      	ST   -Y,R31
002c76 93ea      	ST   -Y,R30
                +
002c77 91a0 02cd+LDS R26 , _curr_menu + 3
002c79 91b0 02ce+LDS R27 , _curr_menu + 3 + 1
                 	__GETW2MN _curr_menu,3
002c7b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x92:
002c7c 01db      	MOVW R26,R22
002c7d 0fae      	ADD  R26,R30
002c7e 1fbf      	ADC  R27,R31
002c7f 9613      	ADIW R26,3
002c80 91ec      	LD   R30,X
002c81 93ea      	ST   -Y,R30
002c82 940c 0d15 	JMP  _lcd_line_menu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x93:
002c84 940e 3145 	CALL __SAVELOCR3
                +
002c86 91e0 02cc+LDS R30 , _curr_menu + 2
                 	__GETB1MN _curr_menu,2
002c88 30e0      	CPI  R30,0
002c89 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x94:
002c8a 93ea      	ST   -Y,R30
002c8b 940e 1f4e 	CALL _init_curr_menu
002c8d e0e1      	LDI  R30,LOW(1)
                +
002c8e 93e0 02d4+STS _curr_menu + 10 , R30
                 	__PUTB1MN _curr_menu,10
002c90 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x95:
                +
002c91 91a0 02cd+LDS R26 , _curr_menu + 3
002c93 91b0 02ce+LDS R27 , _curr_menu + 3 + 1
                 	__GETW2MN _curr_menu,3
002c95 2fe2      	MOV  R30,R18
002c96 cf42      	RJMP SUBOPT_0x74
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x96:
                +
002c97 9300 02d0+STS _curr_menu + 6 , R16
002c99 9310 02d1+STS _curr_menu + 6 + 1 , R17
                 	__PUTWMRN _curr_menu,6,16,17
002c9b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 46 TIMES, CODE SIZE REDUCTION:87 WORDS
                 SUBOPT_0x97:
                +
002c9c 93e0 02d2+STS _curr_menu + 8 , R30
002c9e 93f0 02d3+STS _curr_menu + 8 + 1 , R31
                 	__PUTW1MN _curr_menu,8
002ca0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x98:
                +
002ca1 91e0 02d2+LDS R30 , _curr_menu + 8
002ca3 91f0 02d3+LDS R31 , _curr_menu + 8 + 1
                 	__GETW1MN _curr_menu,8
002ca5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x99:
002ca6 eee3      	LDI  R30,LOW(_dt_curr_menu)
002ca7 e0f2      	LDI  R31,HIGH(_dt_curr_menu)
002ca8 ecaa      	LDI  R26,LOW(_curr_menu)
002ca9 e0b2      	LDI  R27,HIGH(_curr_menu)
002caa e08b      	LDI  R24,11
002cab 940e 3011 	CALL __COPYMML
002cad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9A:
002cae e0e0      	LDI  R30,LOW(0)
                +
002caf 93e0 02d4+STS _curr_menu + 10 , R30
                 	__PUTB1MN _curr_menu,10
                +
002cb1 93e0 01bd+STS _mode + 5 , R30
                 	__PUTB1MN _mode,5
002cb3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9B:
002cb4 e5e8      	LDI  R30,LOW(88)
002cb5 93ea      	ST   -Y,R30
002cb6 940c 2301 	JMP  _eeprom_write_struct
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x9C:
002cb8 e0e0      	LDI  R30,LOW(0)
002cb9 e0f0      	LDI  R31,HIGH(0)
002cba cfe1      	RJMP SUBOPT_0x97
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9D:
002cbb 81ea      	LDD  R30,Y+2
002cbc e0aa      	LDI  R26,LOW(10)
002cbd 02ea      	MULS R30,R26
002cbe 01f0      	MOVW R30,R0
                +
002cbf 91a0 02d2+LDS R26 , _curr_menu + 8
002cc1 91b0 02d3+LDS R27 , _curr_menu + 8 + 1
                 	__GETW2MN _curr_menu,8
002cc3 0fea      	ADD  R30,R26
002cc4 1ffb      	ADC  R31,R27
002cc5 cfd6      	RJMP SUBOPT_0x97
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 39 TIMES, CODE SIZE REDUCTION:73 WORDS
                 SUBOPT_0x9E:
                +
002cc6 91a0 02d2+LDS R26 , _curr_menu + 8
002cc8 91b0 02d3+LDS R27 , _curr_menu + 8 + 1
                 	__GETW2MN _curr_menu,8
002cca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9F:
002ccb 81ea      	LDD  R30,Y+2
002ccc e6a4      	LDI  R26,LOW(100)
002ccd 02ea      	MULS R30,R26
002cce 01f0      	MOVW R30,R0
002ccf cff6      	RJMP SUBOPT_0x9E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0xA0:
002cd0 0fea      	ADD  R30,R26
002cd1 1ffb      	ADC  R31,R27
002cd2 cfc9      	RJMP SUBOPT_0x97
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0xA1:
002cd3 81ea      	LDD  R30,Y+2
002cd4 e0f0      	LDI  R31,0
002cd5 fde7      	SBRC R30,7
002cd6 efff      	SER  R31
002cd7 cff8      	RJMP SUBOPT_0xA0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA2:
002cd8 940e 3004 	CALL __GETW1P
002cda 93fa      	ST   -Y,R31
002cdb 93ea      	ST   -Y,R30
002cdc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA3:
002cdd 93ea      	ST   -Y,R30
002cde 940e 2e10 	CALL _i2c_write
002ce0 81e9      	LDD  R30,Y+1
002ce1 93ea      	ST   -Y,R30
002ce2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA4:
002ce3 93ea      	ST   -Y,R30
002ce4 940e 2e10 	CALL _i2c_write
002ce6 940c 2ddc 	JMP  _i2c_start
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA5:
002ce8 e0e0      	LDI  R30,LOW(0)
002ce9 93ea      	ST   -Y,R30
002cea 940c 2df5 	JMP  _i2c_read
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA6:
002cec 940e 3145 	CALL __SAVELOCR3
002cee 81eb      	LDD  R30,Y+3
002cef 50e1      	SUBI R30,LOW(1)
002cf0 81ac      	LDD  R26,Y+4
002cf1 9fea      	MUL  R30,R26
002cf2 01f0      	MOVW R30,R0
002cf3 2f2e      	MOV  R18,R30
002cf4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA7:
002cf5 e0a0      	LDI  R26,LOW(0)
002cf6 e0b0      	LDI  R27,HIGH(0)
002cf7 83a0      	STD  Z+0,R26
002cf8 83b1      	STD  Z+1,R27
002cf9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xA8:
002cfa 91ed      	LD   R30,X+
002cfb 91fd      	LD   R31,X+
002cfc 9631      	ADIW R30,1
002cfd 93fe      	ST   -X,R31
002cfe 93ee      	ST   -X,R30
002cff 9731      	SBIW R30,1
002d00 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA9:
002d01 e0a1      	LDI  R26,LOW(1)
002d02 e0b0      	LDI  R27,HIGH(1)
002d03 83a0      	STD  Z+0,R26
002d04 83b1      	STD  Z+1,R27
002d05 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xAA:
002d06 e7e6      	LDI  R30,LOW(_alarm)
002d07 e0f3      	LDI  R31,HIGH(_alarm)
002d08 93fa      	ST   -Y,R31
002d09 93ea      	ST   -Y,R30
002d0a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xAB:
                +
002d0b e8a4     +LDI R26 , LOW ( _prim_par + 36 )
002d0c e0b1     +LDI R27 , HIGH ( _prim_par + 36 )
                 	__POINTW2MN _prim_par,36
002d0d 81e8      	LD   R30,Y
002d0e e0f0      	LDI  R31,0
002d0f 0fae      	ADD  R26,R30
002d10 1fbf      	ADC  R27,R31
002d11 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xAC:
002d12 940e 3144 	CALL __SAVELOCR4
002d14 81ec      	LDD  R30,Y+4
002d15 81fd      	LDD  R31,Y+4+1
002d16 9631      	ADIW R30,1
002d17 018f      	MOVW R16,R30
002d18 81ec      	LDD  R30,Y+4
002d19 81fd      	LDD  R31,Y+4+1
002d1a 9632      	ADIW R30,2
002d1b 019f      	MOVW R18,R30
002d1c 81ac      	LDD  R26,Y+4
002d1d 81bd      	LDD  R27,Y+4+1
002d1e 91ec      	LD   R30,X
002d1f 30e2      	CPI  R30,LOW(0x2)
002d20 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xAD:
002d21 01d8      	MOVW R26,R16
002d22 91ec      	LD   R30,X
002d23 50e1      	SUBI R30,LOW(1)
002d24 93ec      	ST   X,R30
002d25 30e0      	CPI  R30,0
002d26 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xAE:
                +
002d27 91e0 03a7+LDS R30 , _signals + 1
                 	__GETB1MN _signals,1
002d29 50e1      	SUBI R30,LOW(1)
                +
002d2a 93e0 03a7+STS _signals + 1 , R30
                 	__PUTB1MN _signals,1
002d2c 5fef      	SUBI R30,-LOW(1)
                +
002d2d 91e0 03a7+LDS R30 , _signals + 1
                 	__GETB1MN _signals,1
002d2f 30e0      	CPI  R30,0
002d30 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xAF:
002d31 93fa      	ST   -Y,R31
002d32 93ea      	ST   -Y,R30
002d33 940e 24d4 	CALL _update_lamp_status
002d35 30e0      	CPI  R30,0
002d36 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB0:
002d37 93fa      	ST   -Y,R31
002d38 93ea      	ST   -Y,R30
002d39 940e 24af 	CALL _init_lamp_status
002d3b 30e0      	CPI  R30,0
002d3c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xB1:
002d3d 81e8      	LD   R30,Y
002d3e e0aa      	LDI  R26,LOW(10)
002d3f 9fea      	MUL  R30,R26
002d40 01f0      	MOVW R30,R0
002d41 54ee      	SUBI R30,LOW(-_keys)
002d42 4ffc      	SBCI R31,HIGH(-_keys)
002d43 81e0      	LD   R30,Z
002d44 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB2:
002d45 81e8      	LD   R30,Y
002d46 e0f0      	LDI  R31,0
002d47 52ea      	SUBI R30,LOW(-_key_treated)
002d48 4ffd      	SBCI R31,HIGH(-_key_treated)
002d49 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB3:
002d4a e0aa      	LDI  R26,LOW(10)
002d4b 9fea      	MUL  R30,R26
002d4c 01f0      	MOVW R30,R0
                +
002d4d 54ed     +SUBI R30 , LOW ( - _keys - ( 1 ) )
002d4e 4ffc     +SBCI R31 , HIGH ( - _keys - ( 1 ) )
                 	__ADDW1MN _keys,1
002d4f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB4:
002d50 e0aa      	LDI  R26,LOW(10)
002d51 9f0a      	MUL  R16,R26
002d52 01f0      	MOVW R30,R0
002d53 54ee      	SUBI R30,LOW(-_keys)
002d54 4ffc      	SBCI R31,HIGH(-_keys)
002d55 81e0      	LD   R30,Z
002d56 3fef      	CPI  R30,LOW(0xFF)
002d57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB5:
002d58 e0aa      	LDI  R26,LOW(10)
002d59 9f0a      	MUL  R16,R26
002d5a 01f0      	MOVW R30,R0
002d5b 54ee      	SUBI R30,LOW(-_keys)
002d5c 4ffc      	SBCI R31,HIGH(-_keys)
002d5d 81e0      	LD   R30,Z
002d5e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB6:
002d5f 54ee      	SUBI R30,LOW(-_keys)
002d60 4ffc      	SBCI R31,HIGH(-_keys)
002d61 efaf      	LDI  R26,LOW(255)
002d62 83a0      	STD  Z+0,R26
002d63 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0xB7:
002d64 81eb      	LDD  R30,Y+3
002d65 e0aa      	LDI  R26,LOW(10)
002d66 9fea      	MUL  R30,R26
002d67 01f0      	MOVW R30,R0
002d68 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB8:
002d69 01df      	MOVW R26,R30
002d6a 940e 3004 	CALL __GETW1P
002d6c 36e4      	CPI  R30,LOW(0x64)
002d6d e0a0      	LDI  R26,HIGH(0x64)
002d6e 07fa      	CPC  R31,R26
002d6f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xB9:
002d70 940e 2ddc 	CALL _i2c_start
002d72 ede0      	LDI  R30,LOW(208)
002d73 93ea      	ST   -Y,R30
002d74 940c 2e10 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xBA:
002d76 93ea      	ST   -Y,R30
002d77 940e 2e10 	CALL _i2c_write
002d79 81ea      	LDD  R30,Y+2
002d7a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xBB:
002d7b ede1      	LDI  R30,LOW(209)
002d7c 93ea      	ST   -Y,R30
002d7d 940e 2e10 	CALL _i2c_write
002d7f e0e1      	LDI  R30,LOW(1)
002d80 93ea      	ST   -Y,R30
002d81 940e 2df5 	CALL _i2c_read
002d83 93ea      	ST   -Y,R30
002d84 940c 2907 	JMP  _bcd2bin
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xBC:
002d86 93ea      	ST   -Y,R30
002d87 940e 2df5 	CALL _i2c_read
002d89 93ea      	ST   -Y,R30
002d8a 940e 2907 	CALL _bcd2bin
002d8c 81aa      	LDD  R26,Y+2
002d8d 81bb      	LDD  R27,Y+2+1
002d8e 93ec      	ST   X,R30
002d8f cf58      	RJMP SUBOPT_0xA5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0xBD:
002d90 933a      	ST   -Y,R19
002d91 85ef      	LDD  R30,Y+15
002d92 89f8      	LDD  R31,Y+15+1
002d93 93fa      	ST   -Y,R31
002d94 93ea      	ST   -Y,R30
002d95 01fe      	MOVW R30,R28
002d96 963f      	ADIW R30,15
002d97 93fa      	ST   -Y,R31
002d98 93ea      	ST   -Y,R30
002d99 940c 275b 	JMP  __put_G101
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xBE:
002d9b 89e8      	LDD  R30,Y+16
002d9c 89f9      	LDD  R31,Y+16+1
002d9d 9734      	SBIW R30,4
002d9e 8be8      	STD  Y+16,R30
002d9f 8bf9      	STD  Y+16+1,R31
002da0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xBF:
002da1 85ef      	LDD  R30,Y+15
002da2 89f8      	LDD  R31,Y+15+1
002da3 93fa      	ST   -Y,R31
002da4 93ea      	ST   -Y,R30
002da5 01fe      	MOVW R30,R28
002da6 963f      	ADIW R30,15
002da7 93fa      	ST   -Y,R31
002da8 93ea      	ST   -Y,R30
002da9 940c 275b 	JMP  __put_G101
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xC0:
002dab 89a8      	LDD  R26,Y+16
002dac 89b9      	LDD  R27,Y+16+1
002dad 9614      	ADIW R26,4
002dae 940e 3004 	CALL __GETW1P
002db0 83ee      	STD  Y+6,R30
002db1 83ff      	STD  Y+6+1,R31
002db2 93fa      	ST   -Y,R31
002db3 93ea      	ST   -Y,R30
002db4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC1:
002db5 89a8      	LDD  R26,Y+16
002db6 89b9      	LDD  R27,Y+16+1
002db7 9614      	ADIW R26,4
002db8 940e 3004 	CALL __GETW1P
002dba 87ea      	STD  Y+10,R30
002dbb 87fb      	STD  Y+10+1,R31
002dbc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC2:
002dbd 2ef8      	MOV  R15,R24
002dbe 9722      	SBIW R28,2
002dbf 931a      	ST   -Y,R17
002dc0 930a      	ST   -Y,R16
002dc1 01de      	MOVW R26,R28
002dc2 940e 2f0b 	CALL __ADDW2R15
002dc4 018d      	MOVW R16,R26
002dc5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC3:
002dc6 01de      	MOVW R26,R28
002dc7 9614      	ADIW R26,4
002dc8 940e 2f0b 	CALL __ADDW2R15
002dca cf0d      	RJMP SUBOPT_0xA2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC4:
002dcb 931a      	ST   -Y,R17
002dcc 930a      	ST   -Y,R16
002dcd 01fe      	MOVW R30,R28
002dce 9636      	ADIW R30,6
002dcf 93fa      	ST   -Y,R31
002dd0 93ea      	ST   -Y,R30
002dd1 e0e0      	LDI  R30,LOW(0)
002dd2 e0f0      	LDI  R31,HIGH(0)
002dd3 93fa      	ST   -Y,R31
002dd4 93ea      	ST   -Y,R30
002dd5 940c 2781 	JMP  __print_G101
                 
                 
                 	.CSEG
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 _i2c_init:
002dd7 98a8      	cbi  __i2c_port,__scl_bit
002dd8 98a9      	cbi  __i2c_port,__sda_bit
002dd9 9aa0      	sbi  __i2c_dir,__scl_bit
002dda 98a1      	cbi  __i2c_dir,__sda_bit
002ddb c015      	rjmp __i2c_delay2
                 _i2c_start:
002ddc 98a1      	cbi  __i2c_dir,__sda_bit
002ddd 98a0      	cbi  __i2c_dir,__scl_bit
002dde 27ee      	clr  r30
002ddf 0000      	nop
002de0 9b99      	sbis __i2c_pin,__sda_bit
002de1 9508      	ret
002de2 9b98      	sbis __i2c_pin,__scl_bit
002de3 9508      	ret
002de4 d004      	rcall __i2c_delay1
002de5 9aa1      	sbi  __i2c_dir,__sda_bit
002de6 d002      	rcall __i2c_delay1
002de7 9aa0      	sbi  __i2c_dir,__scl_bit
002de8 e0e1      	ldi  r30,1
                 __i2c_delay1:
002de9 e066      	ldi  r22,6
002dea c007      	rjmp __i2c_delay2l
                 _i2c_stop:
002deb 9aa1      	sbi  __i2c_dir,__sda_bit
002dec 9aa0      	sbi  __i2c_dir,__scl_bit
002ded d003      	rcall __i2c_delay2
002dee 98a0      	cbi  __i2c_dir,__scl_bit
002def dff9      	rcall __i2c_delay1
002df0 98a1      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
002df1 e06c      	ldi  r22,12
                 __i2c_delay2l:
002df2 956a      	dec  r22
002df3 f7f1      	brne __i2c_delay2l
002df4 9508      	ret
                 _i2c_read:
002df5 e078      	ldi  r23,8
                 __i2c_read0:
002df6 98a0      	cbi  __i2c_dir,__scl_bit
002df7 dff1      	rcall __i2c_delay1
                 __i2c_read3:
002df8 9b98      	sbis __i2c_pin,__scl_bit
002df9 cffe      	rjmp __i2c_read3
002dfa dfee      	rcall __i2c_delay1
002dfb 9488      	clc
002dfc 9999      	sbic __i2c_pin,__sda_bit
002dfd 9408      	sec
002dfe 9aa0      	sbi  __i2c_dir,__scl_bit
002dff dff1      	rcall __i2c_delay2
002e00 1fee      	rol  r30
002e01 957a      	dec  r23
002e02 f799      	brne __i2c_read0
002e03 9179      	ld   r23,y+
002e04 2377      	tst  r23
002e05 f411      	brne __i2c_read1
002e06 98a1      	cbi  __i2c_dir,__sda_bit
002e07 c001      	rjmp __i2c_read2
                 __i2c_read1:
002e08 9aa1      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
002e09 dfdf      	rcall __i2c_delay1
002e0a 98a0      	cbi  __i2c_dir,__scl_bit
002e0b dfe5      	rcall __i2c_delay2
002e0c 9aa0      	sbi  __i2c_dir,__scl_bit
002e0d dfdb      	rcall __i2c_delay1
002e0e 98a1      	cbi  __i2c_dir,__sda_bit
002e0f cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
002e10 91e9      	ld   r30,y+
002e11 e078      	ldi  r23,8
                 __i2c_write0:
002e12 0fee      	lsl  r30
002e13 f410      	brcc __i2c_write1
002e14 98a1      	cbi  __i2c_dir,__sda_bit
002e15 c001      	rjmp __i2c_write2
                 __i2c_write1:
002e16 9aa1      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
002e17 dfd9      	rcall __i2c_delay2
002e18 98a0      	cbi  __i2c_dir,__scl_bit
002e19 dfcf      	rcall __i2c_delay1
                 __i2c_write3:
002e1a 9b98      	sbis __i2c_pin,__scl_bit
002e1b cffe      	rjmp __i2c_write3
002e1c dfcc      	rcall __i2c_delay1
002e1d 9aa0      	sbi  __i2c_dir,__scl_bit
002e1e 957a      	dec  r23
002e1f f791      	brne __i2c_write0
002e20 98a1      	cbi  __i2c_dir,__sda_bit
002e21 dfc7      	rcall __i2c_delay1
002e22 98a0      	cbi  __i2c_dir,__scl_bit
002e23 dfcd      	rcall __i2c_delay2
002e24 e0e1      	ldi  r30,1
002e25 9999      	sbic __i2c_pin,__sda_bit
002e26 27ee      	clr  r30
002e27 9aa0      	sbi  __i2c_dir,__scl_bit
002e28 9508      	ret
                 
                 _delay_ms:
002e29 91e9      	ld   r30,y+
002e2a 91f9      	ld   r31,y+
002e2b 9630      	adiw r30,0
002e2c f039      	breq __delay_ms1
                 __delay_ms0:
                +
002e2d e98a     +LDI R24 , LOW ( 0x39A )
002e2e e093     +LDI R25 , HIGH ( 0x39A )
                +__DELAY_USW_LOOP :
002e2f 9701     +SBIW R24 , 1
002e30 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x39A
002e31 95a8      	wdr
002e32 9731      	sbiw r30,1
002e33 f7c9      	brne __delay_ms0
                 __delay_ms1:
002e34 9508      	ret
                 
                 _w1_init:
002e35 27ee      	clr  r30
002e36 98c0      	cbi  __w1_port,__w1_bit
002e37 9ab8      	sbi  __w1_port-1,__w1_bit
                +
002e38 eb8a     +LDI R24 , LOW ( 0x1BA )
002e39 e091     +LDI R25 , HIGH ( 0x1BA )
                +__DELAY_USW_LOOP :
002e3a 9701     +SBIW R24 , 1
002e3b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1BA
002e3c 98b8      	cbi  __w1_port-1,__w1_bit
                +
002e3d e181     +LDI R24 , LOW ( 0x11 )
                +__DELAY_USB_LOOP :
002e3e 958a     +DEC R24
002e3f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x11
002e40 9bb0      	sbis __w1_port-2,__w1_bit
002e41 9508      	ret
                +
002e42 e58d     +LDI R24 , LOW ( 0x5D )
                +__DELAY_USB_LOOP :
002e43 958a     +DEC R24
002e44 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x5D
002e45 9bb0      	sbis __w1_port-2,__w1_bit
002e46 95e3      	inc  r30
                +
002e47 e687     +LDI R24 , LOW ( 0x167 )
002e48 e091     +LDI R25 , HIGH ( 0x167 )
                +__DELAY_USW_LOOP :
002e49 9701     +SBIW R24 , 1
002e4a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x167
002e4b 9508      	ret
                 
                 __w1_read_bit:
002e4c 9ab8      	sbi  __w1_port-1,__w1_bit
                +
002e4d e082     +LDI R24 , LOW ( 0x2 )
                +__DELAY_USB_LOOP :
002e4e 958a     +DEC R24
002e4f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x2
002e50 98b8      	cbi  __w1_port-1,__w1_bit
                +
002e51 e08e     +LDI R24 , LOW ( 0xE )
                +__DELAY_USB_LOOP :
002e52 958a     +DEC R24
002e53 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xE
002e54 9488      	clc
002e55 99b0      	sbic __w1_port-2,__w1_bit
002e56 9408      	sec
002e57 95e7      	ror  r30
                +
002e58 e682     +LDI R24 , LOW ( 0x62 )
                +__DELAY_USB_LOOP :
002e59 958a     +DEC R24
002e5a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x62
002e5b 9508      	ret
                 
                 __w1_write_bit:
002e5c 94e8      	clt
002e5d 9ab8      	sbi  __w1_port-1,__w1_bit
                +
002e5e e082     +LDI R24 , LOW ( 0x2 )
                +__DELAY_USB_LOOP :
002e5f 958a     +DEC R24
002e60 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x2
002e61 fd70      	sbrc r23,0
002e62 98b8      	cbi  __w1_port-1,__w1_bit
                +
002e63 e180     +LDI R24 , LOW ( 0x10 )
                +__DELAY_USB_LOOP :
002e64 958a     +DEC R24
002e65 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x10
002e66 99b0      	sbic __w1_port-2,__w1_bit
002e67 c003      	rjmp __w1_write_bit0
002e68 ff70      	sbrs r23,0
002e69 c003      	rjmp __w1_write_bit1
002e6a 9508      	ret
                 __w1_write_bit0:
002e6b ff70      	sbrs r23,0
002e6c 9508      	ret
                 __w1_write_bit1:
                +
002e6d e58c     +LDI R24 , LOW ( 0x5C )
                +__DELAY_USB_LOOP :
002e6e 958a     +DEC R24
002e6f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x5C
002e70 98b8      	cbi  __w1_port-1,__w1_bit
                +
002e71 e086     +LDI R24 , LOW ( 0x6 )
                +__DELAY_USB_LOOP :
002e72 958a     +DEC R24
002e73 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x6
002e74 9468      	set
002e75 9508      	ret
                 
                 _w1_read:
002e76 e068      	ldi  r22,8
                 	__w1_read0:
002e77 dfd4      	rcall __w1_read_bit
002e78 956a      	dec  r22
002e79 f7e9      	brne __w1_read0
002e7a 9508      	ret
                 
                 _w1_write:
002e7b e068      	ldi  r22,8
002e7c 9179      	ld   r23,y+
002e7d 27ee      	clr  r30
                 __w1_write0:
002e7e dfdd      	rcall __w1_write_bit
002e7f f426      	brtc __w1_write1
002e80 9577      	ror  r23
002e81 956a      	dec  r22
002e82 f7d9      	brne __w1_write0
002e83 95e3      	inc  r30
                 __w1_write1:
002e84 9508      	ret
                 
                 _w1_search:
002e85 934f      	push r20
002e86 935f      	push r21
002e87 2411      	clr  r1
002e88 2744      	clr  r20
002e89 81a8      	ld   r26,y
002e8a 81b9      	ldd  r27,y+1
                 __w1_search0:
002e8b 2c01      	mov  r0,r1
002e8c 2411      	clr  r1
002e8d dfa7      	rcall _w1_init
002e8e 23ee      	tst  r30
002e8f f0f9      	breq __w1_search7
002e90 81ea      	ldd  r30,y+2
002e91 93ea      	st   -y,r30
002e92 dfe8      	rcall _w1_write
002e93 e051      	ldi  r21,1
                 __w1_search1:
002e94 1550      	cp   r21,r0
002e95 f498      	brsh __w1_search6
002e96 dfb5      	rcall __w1_read_bit
002e97 fde7      	sbrc r30,7
002e98 c008      	rjmp __w1_search2
002e99 dfb2      	rcall __w1_read_bit
002e9a fde7      	sbrc r30,7
002e9b c006      	rjmp __w1_search3
002e9c d03f      	rcall __sel_bit
002e9d 2389      	and  r24,r25
002e9e f419      	brne __w1_search3
002e9f 2e15      	mov  r1,r21
002ea0 c001      	rjmp __w1_search3
                 __w1_search2:
002ea1 dfaa      	rcall __w1_read_bit
                 __w1_search3:
002ea2 d039      	rcall __sel_bit
002ea3 2389      	and  r24,r25
002ea4 e070      	ldi  r23,0
002ea5 f009      	breq __w1_search5
                 __w1_search4:
002ea6 e071      	ldi  r23,1
                 __w1_search5:
002ea7 dfb4      	rcall __w1_write_bit
002ea8 c01e      	rjmp __w1_search13
                 __w1_search6:
002ea9 dfa2      	rcall __w1_read_bit
002eaa ffe7      	sbrs r30,7
002eab c00b      	rjmp __w1_search9
002eac df9f      	rcall __w1_read_bit
002ead ffe7      	sbrs r30,7
002eae c005      	rjmp __w1_search8
                 __w1_search7:
002eaf 2fe4      	mov  r30,r20
002eb0 915f      	pop  r21
002eb1 914f      	pop  r20
002eb2 9623      	adiw r28,3
002eb3 9508      	ret
                 __w1_search8:
002eb4 9468      	set
002eb5 d037      	rcall __set_bit
002eb6 cfef      	rjmp __w1_search4
                 __w1_search9:
002eb7 df94      	rcall __w1_read_bit
002eb8 ffe7      	sbrs r30,7
002eb9 c001      	rjmp __w1_search10
002eba c003      	rjmp __w1_search11
                 __w1_search10:
002ebb 1550      	cp   r21,r0
002ebc f031      	breq __w1_search12
002ebd 2e15      	mov  r1,r21
                 __w1_search11:
002ebe 94e8      	clt
002ebf d02d      	rcall __set_bit
002ec0 2777      	clr  r23
002ec1 df9a      	rcall __w1_write_bit
002ec2 c004      	rjmp __w1_search13
                 __w1_search12:
002ec3 9468      	set
002ec4 d028      	rcall __set_bit
002ec5 e071      	ldi  r23,1
002ec6 df95      	rcall __w1_write_bit
                 __w1_search13:
002ec7 9553      	inc  r21
002ec8 3451      	cpi  r21,65
002ec9 f254      	brlt __w1_search1
002eca df81      	rcall __w1_read_bit
002ecb 1fee      	rol  r30
002ecc 1fee      	rol  r30
002ecd 70e1      	andi r30,1
002ece 9618      	adiw r26,8
002ecf 93ec      	st   x,r30
002ed0 9718      	sbiw r26,8
002ed1 9543      	inc  r20
002ed2 2011      	tst  r1
002ed3 f2d9      	breq __w1_search7
002ed4 e059      	ldi  r21,9
                 __w1_search14:
002ed5 91ec      	ld   r30,x
002ed6 9619      	adiw r26,9
002ed7 93ec      	st   x,r30
002ed8 9718      	sbiw r26,8
002ed9 955a      	dec  r21
002eda f7d1      	brne __w1_search14
002edb cfaf      	rjmp __w1_search0
                 
                 __sel_bit:
002edc 2fe5      	mov  r30,r21
002edd 95ea      	dec  r30
002ede 2f6e      	mov  r22,r30
002edf 95e6      	lsr  r30
002ee0 95e6      	lsr  r30
002ee1 95e6      	lsr  r30
002ee2 27ff      	clr  r31
002ee3 0fea      	add  r30,r26
002ee4 1ffb      	adc  r31,r27
002ee5 8180      	ld   r24,z
002ee6 e091      	ldi  r25,1
002ee7 7067      	andi r22,7
                 __sel_bit0:
002ee8 f019      	breq __sel_bit1
002ee9 0f99      	lsl  r25
002eea 956a      	dec  r22
002eeb cffc      	rjmp __sel_bit0
                 __sel_bit1:
002eec 9508      	ret
                 
                 __set_bit:
002eed dfee      	rcall __sel_bit
002eee f01e      	brts __set_bit2
002eef 9590      	com  r25
002ef0 2389      	and  r24,r25
002ef1 c001      	rjmp __set_bit3
                 __set_bit2:
002ef2 2b89      	or   r24,r25
                 __set_bit3:
002ef3 8380      	st   z,r24
002ef4 9508      	ret
                 
                 _w1_dow_crc8:
002ef5 27ee      	clr  r30
002ef6 8188      	ld   r24,y
002ef7 2388      	tst  r24
002ef8 f081      	breq __w1_dow_crc83
002ef9 e168      	ldi  r22,0x18
002efa 81a9      	ldd  r26,y+1
002efb 81ba      	ldd  r27,y+2
                 __w1_dow_crc80:
002efc e098      	ldi  r25,8
002efd 91fd      	ld   r31,x+
                 __w1_dow_crc81:
002efe 2f7f      	mov  r23,r31
002eff 277e      	eor  r23,r30
002f00 9577      	ror  r23
002f01 f408      	brcc __w1_dow_crc82
002f02 27e6      	eor  r30,r22
                 __w1_dow_crc82:
002f03 95e7      	ror  r30
002f04 95f6      	lsr  r31
002f05 959a      	dec  r25
002f06 f7b9      	brne __w1_dow_crc81
002f07 958a      	dec  r24
002f08 f799      	brne __w1_dow_crc80
                 __w1_dow_crc83:
002f09 9623      	adiw r28,3
002f0a 9508      	ret
                 
                 __ADDW2R15:
002f0b 2400      	CLR  R0
002f0c 0daf      	ADD  R26,R15
002f0d 1db0      	ADC  R27,R0
002f0e 9508      	RET
                 
                 __SUBD21:
002f0f 1bae      	SUB  R26,R30
002f10 0bbf      	SBC  R27,R31
002f11 0b86      	SBC  R24,R22
002f12 0b97      	SBC  R25,R23
002f13 9508      	RET
                 
                 __ANEGW1:
002f14 95f1      	NEG  R31
002f15 95e1      	NEG  R30
002f16 40f0      	SBCI R31,0
002f17 9508      	RET
                 
                 __ANEGD1:
002f18 95f0      	COM  R31
002f19 9560      	COM  R22
002f1a 9570      	COM  R23
002f1b 95e1      	NEG  R30
002f1c 4fff      	SBCI R31,-1
002f1d 4f6f      	SBCI R22,-1
002f1e 4f7f      	SBCI R23,-1
002f1f 9508      	RET
                 
                 __LSLB12:
002f20 23ee      	TST  R30
002f21 2e0e      	MOV  R0,R30
002f22 2fea      	MOV  R30,R26
002f23 f019      	BREQ __LSLB12R
                 __LSLB12L:
002f24 0fee      	LSL  R30
002f25 940a      	DEC  R0
002f26 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
002f27 9508      	RET
                 
                 __LSRW12:
002f28 23ee      	TST  R30
002f29 2e0e      	MOV  R0,R30
002f2a 01fd      	MOVW R30,R26
002f2b f021      	BREQ __LSRW12R
                 __LSRW12L:
002f2c 95f6      	LSR  R31
002f2d 95e7      	ROR  R30
002f2e 940a      	DEC  R0
002f2f f7e1      	BRNE __LSRW12L
                 __LSRW12R:
002f30 9508      	RET
                 
                 __LSLW4:
002f31 0fee      	LSL  R30
002f32 1fff      	ROL  R31
                 __LSLW3:
002f33 0fee      	LSL  R30
002f34 1fff      	ROL  R31
                 __LSLW2:
002f35 0fee      	LSL  R30
002f36 1fff      	ROL  R31
002f37 0fee      	LSL  R30
002f38 1fff      	ROL  R31
002f39 9508      	RET
                 
                 __ASRW4:
002f3a 95f5      	ASR  R31
002f3b 95e7      	ROR  R30
                 __ASRW3:
002f3c 95f5      	ASR  R31
002f3d 95e7      	ROR  R30
                 __ASRW2:
002f3e 95f5      	ASR  R31
002f3f 95e7      	ROR  R30
002f40 95f5      	ASR  R31
002f41 95e7      	ROR  R30
002f42 9508      	RET
                 
                 __LSRW2:
002f43 95f6      	LSR  R31
002f44 95e7      	ROR  R30
002f45 95f6      	LSR  R31
002f46 95e7      	ROR  R30
002f47 9508      	RET
                 
                 __CBD1:
002f48 2ffe      	MOV  R31,R30
002f49 0fff      	ADD  R31,R31
002f4a 0bff      	SBC  R31,R31
002f4b 2f6f      	MOV  R22,R31
002f4c 2f7f      	MOV  R23,R31
002f4d 9508      	RET
                 
                 __CWD1:
002f4e 2f6f      	MOV  R22,R31
002f4f 0f66      	ADD  R22,R22
002f50 0b66      	SBC  R22,R22
002f51 2f76      	MOV  R23,R22
002f52 9508      	RET
                 
                 __EQW12:
002f53 17ea      	CP   R30,R26
002f54 07fb      	CPC  R31,R27
002f55 e0e1      	LDI  R30,1
002f56 f009      	BREQ __EQW12T
002f57 27ee      	CLR  R30
                 __EQW12T:
002f58 9508      	RET
                 
                 __LNEGB1:
002f59 23ee      	TST  R30
002f5a e0e1      	LDI  R30,1
002f5b f009      	BREQ __LNEGB1F
002f5c 27ee      	CLR  R30
                 __LNEGB1F:
002f5d 9508      	RET
                 
                 __MULW12U:
002f5e 9ffa      	MUL  R31,R26
002f5f 2df0      	MOV  R31,R0
002f60 9feb      	MUL  R30,R27
002f61 0df0      	ADD  R31,R0
002f62 9fea      	MUL  R30,R26
002f63 2de0      	MOV  R30,R0
002f64 0df1      	ADD  R31,R1
002f65 9508      	RET
                 
                 __MULD12U:
002f66 9f7a      	MUL  R23,R26
002f67 2d70      	MOV  R23,R0
002f68 9f6b      	MUL  R22,R27
002f69 0d70      	ADD  R23,R0
002f6a 9ff8      	MUL  R31,R24
002f6b 0d70      	ADD  R23,R0
002f6c 9fe9      	MUL  R30,R25
002f6d 0d70      	ADD  R23,R0
002f6e 9f6a      	MUL  R22,R26
002f6f 2d60      	MOV  R22,R0
002f70 0d71      	ADD  R23,R1
002f71 9ffb      	MUL  R31,R27
002f72 0d60      	ADD  R22,R0
002f73 1d71      	ADC  R23,R1
002f74 9fe8      	MUL  R30,R24
002f75 0d60      	ADD  R22,R0
002f76 1d71      	ADC  R23,R1
002f77 2788      	CLR  R24
002f78 9ffa      	MUL  R31,R26
002f79 2df0      	MOV  R31,R0
002f7a 0d61      	ADD  R22,R1
002f7b 1f78      	ADC  R23,R24
002f7c 9feb      	MUL  R30,R27
002f7d 0df0      	ADD  R31,R0
002f7e 1d61      	ADC  R22,R1
002f7f 1f78      	ADC  R23,R24
002f80 9fea      	MUL  R30,R26
002f81 2de0      	MOV  R30,R0
002f82 0df1      	ADD  R31,R1
002f83 1f68      	ADC  R22,R24
002f84 1f78      	ADC  R23,R24
002f85 9508      	RET
                 
                 __MULW12:
002f86 d05c      	RCALL __CHKSIGNW
002f87 dfd6      	RCALL __MULW12U
002f88 f40e      	BRTC __MULW121
002f89 df8a      	RCALL __ANEGW1
                 __MULW121:
002f8a 9508      	RET
                 
                 __MULD12:
002f8b d065      	RCALL __CHKSIGND
002f8c dfd9      	RCALL __MULD12U
002f8d f40e      	BRTC __MULD121
002f8e df89      	RCALL __ANEGD1
                 __MULD121:
002f8f 9508      	RET
                 
                 __DIVW21U:
002f90 2400      	CLR  R0
002f91 2411      	CLR  R1
002f92 e190      	LDI  R25,16
                 __DIVW21U1:
002f93 0faa      	LSL  R26
002f94 1fbb      	ROL  R27
002f95 1c00      	ROL  R0
002f96 1c11      	ROL  R1
002f97 1a0e      	SUB  R0,R30
002f98 0a1f      	SBC  R1,R31
002f99 f418      	BRCC __DIVW21U2
002f9a 0e0e      	ADD  R0,R30
002f9b 1e1f      	ADC  R1,R31
002f9c c001      	RJMP __DIVW21U3
                 __DIVW21U2:
002f9d 60a1      	SBR  R26,1
                 __DIVW21U3:
002f9e 959a      	DEC  R25
002f9f f799      	BRNE __DIVW21U1
002fa0 01fd      	MOVW R30,R26
002fa1 01d0      	MOVW R26,R0
002fa2 9508      	RET
                 
                 __DIVW21:
002fa3 d03f      	RCALL __CHKSIGNW
002fa4 dfeb      	RCALL __DIVW21U
002fa5 f40e      	BRTC __DIVW211
002fa6 df6d      	RCALL __ANEGW1
                 __DIVW211:
002fa7 9508      	RET
                 
                 __DIVD21U:
002fa8 933f      	PUSH R19
002fa9 934f      	PUSH R20
002faa 935f      	PUSH R21
002fab 2400      	CLR  R0
002fac 2411      	CLR  R1
002fad 2744      	CLR  R20
002fae 2755      	CLR  R21
002faf e230      	LDI  R19,32
                 __DIVD21U1:
002fb0 0faa      	LSL  R26
002fb1 1fbb      	ROL  R27
002fb2 1f88      	ROL  R24
002fb3 1f99      	ROL  R25
002fb4 1c00      	ROL  R0
002fb5 1c11      	ROL  R1
002fb6 1f44      	ROL  R20
002fb7 1f55      	ROL  R21
002fb8 1a0e      	SUB  R0,R30
002fb9 0a1f      	SBC  R1,R31
002fba 0b46      	SBC  R20,R22
002fbb 0b57      	SBC  R21,R23
002fbc f428      	BRCC __DIVD21U2
002fbd 0e0e      	ADD  R0,R30
002fbe 1e1f      	ADC  R1,R31
002fbf 1f46      	ADC  R20,R22
002fc0 1f57      	ADC  R21,R23
002fc1 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
002fc2 60a1      	SBR  R26,1
                 __DIVD21U3:
002fc3 953a      	DEC  R19
002fc4 f759      	BRNE __DIVD21U1
002fc5 01fd      	MOVW R30,R26
002fc6 01bc      	MOVW R22,R24
002fc7 01d0      	MOVW R26,R0
002fc8 01ca      	MOVW R24,R20
002fc9 915f      	POP  R21
002fca 914f      	POP  R20
002fcb 913f      	POP  R19
002fcc 9508      	RET
                 
                 __DIVD21:
002fcd d023      	RCALL __CHKSIGND
002fce dfd9      	RCALL __DIVD21U
002fcf f40e      	BRTC __DIVD211
002fd0 df47      	RCALL __ANEGD1
                 __DIVD211:
002fd1 9508      	RET
                 
                 __MODW21U:
002fd2 dfbd      	RCALL __DIVW21U
002fd3 01fd      	MOVW R30,R26
002fd4 9508      	RET
                 
                 __MODW21:
002fd5 94e8      	CLT
002fd6 ffb7      	SBRS R27,7
002fd7 c004      	RJMP __MODW211
002fd8 95a0      	COM  R26
002fd9 95b0      	COM  R27
002fda 9611      	ADIW R26,1
002fdb 9468      	SET
                 __MODW211:
002fdc fdf7      	SBRC R31,7
002fdd df36      	RCALL __ANEGW1
002fde dfb1      	RCALL __DIVW21U
002fdf 01fd      	MOVW R30,R26
002fe0 f40e      	BRTC __MODW212
002fe1 df32      	RCALL __ANEGW1
                 __MODW212:
002fe2 9508      	RET
                 
                 __CHKSIGNW:
002fe3 94e8      	CLT
002fe4 fff7      	SBRS R31,7
002fe5 c002      	RJMP __CHKSW1
002fe6 df2d      	RCALL __ANEGW1
002fe7 9468      	SET
                 __CHKSW1:
002fe8 ffb7      	SBRS R27,7
002fe9 c006      	RJMP __CHKSW2
002fea 95a0      	COM  R26
002feb 95b0      	COM  R27
002fec 9611      	ADIW R26,1
002fed f800      	BLD  R0,0
002fee 9403      	INC  R0
002fef fa00      	BST  R0,0
                 __CHKSW2:
002ff0 9508      	RET
                 
                 __CHKSIGND:
002ff1 94e8      	CLT
002ff2 ff77      	SBRS R23,7
002ff3 c002      	RJMP __CHKSD1
002ff4 df23      	RCALL __ANEGD1
002ff5 9468      	SET
                 __CHKSD1:
002ff6 ff97      	SBRS R25,7
002ff7 c00b      	RJMP __CHKSD2
002ff8 2400      	CLR  R0
002ff9 95a0      	COM  R26
002ffa 95b0      	COM  R27
002ffb 9580      	COM  R24
002ffc 9590      	COM  R25
002ffd 9611      	ADIW R26,1
002ffe 1d80      	ADC  R24,R0
002fff 1d90      	ADC  R25,R0
003000 f800      	BLD  R0,0
003001 9403      	INC  R0
003002 fa00      	BST  R0,0
                 __CHKSD2:
003003 9508      	RET
                 
                 __GETW1P:
003004 91ed      	LD   R30,X+
003005 91fc      	LD   R31,X
003006 9711      	SBIW R26,1
003007 9508      	RET
                 
                 __GETW1PF:
003008 9005      	LPM  R0,Z+
003009 91f4      	LPM  R31,Z
00300a 2de0      	MOV  R30,R0
00300b 9508      	RET
                 
                 __PUTPARD1:
00300c 937a      	ST   -Y,R23
00300d 936a      	ST   -Y,R22
00300e 93fa      	ST   -Y,R31
00300f 93ea      	ST   -Y,R30
003010 9508      	RET
                 
                 __COPYMML:
003011 2799      	CLR  R25
                 __COPYMM:
003012 93ef      	PUSH R30
003013 93ff      	PUSH R31
                 __COPYMM0:
003014 9161      	LD   R22,Z+
003015 936d      	ST   X+,R22
003016 9701      	SBIW R24,1
003017 f7e1      	BRNE __COPYMM0
003018 91ff      	POP  R31
003019 91ef      	POP  R30
00301a 9508      	RET
                 
                 __ROUND_REPACK:
00301b 2355      	TST  R21
00301c f442      	BRPL __REPACK
00301d 3850      	CPI  R21,0x80
00301e f411      	BRNE __ROUND_REPACK0
00301f ffe0      	SBRS R30,0
003020 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
003021 9631      	ADIW R30,1
003022 1f69      	ADC  R22,R25
003023 1f79      	ADC  R23,R25
003024 f06b      	BRVS __REPACK1
                 
                 __REPACK:
003025 e850      	LDI  R21,0x80
003026 2757      	EOR  R21,R23
003027 f411      	BRNE __REPACK0
003028 935f      	PUSH R21
003029 c073      	RJMP __ZERORES
                 __REPACK0:
00302a 3f5f      	CPI  R21,0xFF
00302b f031      	BREQ __REPACK1
00302c 0f66      	LSL  R22
00302d 0c00      	LSL  R0
00302e 9557      	ROR  R21
00302f 9567      	ROR  R22
003030 2f75      	MOV  R23,R21
003031 9508      	RET
                 __REPACK1:
003032 935f      	PUSH R21
003033 2000      	TST  R0
003034 f00a      	BRMI __REPACK2
003035 c073      	RJMP __MAXRES
                 __REPACK2:
003036 c06c      	RJMP __MINRES
                 
                 __UNPACK:
003037 e850      	LDI  R21,0x80
003038 2e19      	MOV  R1,R25
003039 2215      	AND  R1,R21
00303a 0f88      	LSL  R24
00303b 1f99      	ROL  R25
00303c 2795      	EOR  R25,R21
00303d 0f55      	LSL  R21
00303e 9587      	ROR  R24
                 
                 __UNPACK1:
00303f e850      	LDI  R21,0x80
003040 2e07      	MOV  R0,R23
003041 2205      	AND  R0,R21
003042 0f66      	LSL  R22
003043 1f77      	ROL  R23
003044 2775      	EOR  R23,R21
003045 0f55      	LSL  R21
003046 9567      	ROR  R22
003047 9508      	RET
                 
                 __CFD1U:
003048 9468      	SET
003049 c001      	RJMP __CFD1U0
                 __CFD1:
00304a 94e8      	CLT
                 __CFD1U0:
00304b 935f      	PUSH R21
00304c dff2      	RCALL __UNPACK1
00304d 3870      	CPI  R23,0x80
00304e f018      	BRLO __CFD10
00304f 3f7f      	CPI  R23,0xFF
003050 f408      	BRCC __CFD10
003051 c04b      	RJMP __ZERORES
                 __CFD10:
003052 e156      	LDI  R21,22
003053 1b57      	SUB  R21,R23
003054 f4aa      	BRPL __CFD11
003055 9551      	NEG  R21
003056 3058      	CPI  R21,8
003057 f40e      	BRTC __CFD19
003058 3059      	CPI  R21,9
                 __CFD19:
003059 f030      	BRLO __CFD17
00305a efef      	SER  R30
00305b efff      	SER  R31
00305c ef6f      	SER  R22
00305d e77f      	LDI  R23,0x7F
00305e f977      	BLD  R23,7
00305f c01a      	RJMP __CFD15
                 __CFD17:
003060 2777      	CLR  R23
003061 2355      	TST  R21
003062 f0b9      	BREQ __CFD15
                 __CFD18:
003063 0fee      	LSL  R30
003064 1fff      	ROL  R31
003065 1f66      	ROL  R22
003066 1f77      	ROL  R23
003067 955a      	DEC  R21
003068 f7d1      	BRNE __CFD18
003069 c010      	RJMP __CFD15
                 __CFD11:
00306a 2777      	CLR  R23
                 __CFD12:
00306b 3058      	CPI  R21,8
00306c f028      	BRLO __CFD13
00306d 2fef      	MOV  R30,R31
00306e 2ff6      	MOV  R31,R22
00306f 2f67      	MOV  R22,R23
003070 5058      	SUBI R21,8
003071 cff9      	RJMP __CFD12
                 __CFD13:
003072 2355      	TST  R21
003073 f031      	BREQ __CFD15
                 __CFD14:
003074 9576      	LSR  R23
003075 9567      	ROR  R22
003076 95f7      	ROR  R31
003077 95e7      	ROR  R30
003078 955a      	DEC  R21
003079 f7d1      	BRNE __CFD14
                 __CFD15:
00307a 2000      	TST  R0
00307b f40a      	BRPL __CFD16
00307c de9b      	RCALL __ANEGD1
                 __CFD16:
00307d 915f      	POP  R21
00307e 9508      	RET
                 
                 __CDF1U:
00307f 9468      	SET
003080 c001      	RJMP __CDF1U0
                 __CDF1:
003081 94e8      	CLT
                 __CDF1U0:
003082 9730      	SBIW R30,0
003083 4060      	SBCI R22,0
003084 4070      	SBCI R23,0
003085 f0b1      	BREQ __CDF10
003086 2400      	CLR  R0
003087 f026      	BRTS __CDF11
003088 2377      	TST  R23
003089 f412      	BRPL __CDF11
00308a 9400      	COM  R0
00308b de8c      	RCALL __ANEGD1
                 __CDF11:
00308c 2e17      	MOV  R1,R23
00308d e17e      	LDI  R23,30
00308e 2011      	TST  R1
                 __CDF12:
00308f f032      	BRMI __CDF13
003090 957a      	DEC  R23
003091 0fee      	LSL  R30
003092 1fff      	ROL  R31
003093 1f66      	ROL  R22
003094 1c11      	ROL  R1
003095 cff9      	RJMP __CDF12
                 __CDF13:
003096 2fef      	MOV  R30,R31
003097 2ff6      	MOV  R31,R22
003098 2d61      	MOV  R22,R1
003099 935f      	PUSH R21
00309a df8a      	RCALL __REPACK
00309b 915f      	POP  R21
                 __CDF10:
00309c 9508      	RET
                 
                 __ZERORES:
00309d 27ee      	CLR  R30
00309e 27ff      	CLR  R31
00309f 2766      	CLR  R22
0030a0 2777      	CLR  R23
0030a1 915f      	POP  R21
0030a2 9508      	RET
                 
                 __MINRES:
0030a3 efef      	SER  R30
0030a4 efff      	SER  R31
0030a5 e76f      	LDI  R22,0x7F
0030a6 ef7f      	SER  R23
0030a7 915f      	POP  R21
0030a8 9508      	RET
                 
                 __MAXRES:
0030a9 efef      	SER  R30
0030aa efff      	SER  R31
0030ab e76f      	LDI  R22,0x7F
0030ac e77f      	LDI  R23,0x7F
0030ad 915f      	POP  R21
0030ae 9508      	RET
                 
                 __MULF12:
0030af 935f      	PUSH R21
0030b0 df86      	RCALL __UNPACK
0030b1 3870      	CPI  R23,0x80
0030b2 f351      	BREQ __ZERORES
0030b3 3890      	CPI  R25,0x80
0030b4 f341      	BREQ __ZERORES
0030b5 2401      	EOR  R0,R1
0030b6 9408      	SEC
0030b7 1f79      	ADC  R23,R25
0030b8 f423      	BRVC __MULF124
0030b9 f31c      	BRLT __ZERORES
                 __MULF125:
0030ba 2000      	TST  R0
0030bb f33a      	BRMI __MINRES
0030bc cfec      	RJMP __MAXRES
                 __MULF124:
0030bd 920f      	PUSH R0
0030be 931f      	PUSH R17
0030bf 932f      	PUSH R18
0030c0 933f      	PUSH R19
0030c1 934f      	PUSH R20
0030c2 2711      	CLR  R17
0030c3 2722      	CLR  R18
0030c4 2799      	CLR  R25
0030c5 9f68      	MUL  R22,R24
0030c6 01a0      	MOVW R20,R0
0030c7 9f8f      	MUL  R24,R31
0030c8 2d30      	MOV  R19,R0
0030c9 0d41      	ADD  R20,R1
0030ca 1f59      	ADC  R21,R25
0030cb 9f6b      	MUL  R22,R27
0030cc 0d30      	ADD  R19,R0
0030cd 1d41      	ADC  R20,R1
0030ce 1f59      	ADC  R21,R25
0030cf 9f8e      	MUL  R24,R30
0030d0 d027      	RCALL __MULF126
0030d1 9fbf      	MUL  R27,R31
0030d2 d025      	RCALL __MULF126
0030d3 9f6a      	MUL  R22,R26
0030d4 d023      	RCALL __MULF126
0030d5 9fbe      	MUL  R27,R30
0030d6 d01d      	RCALL __MULF127
0030d7 9faf      	MUL  R26,R31
0030d8 d01b      	RCALL __MULF127
0030d9 9fae      	MUL  R26,R30
0030da 0d11      	ADD  R17,R1
0030db 1f29      	ADC  R18,R25
0030dc 1f39      	ADC  R19,R25
0030dd 1f49      	ADC  R20,R25
0030de 1f59      	ADC  R21,R25
0030df 2fe3      	MOV  R30,R19
0030e0 2ff4      	MOV  R31,R20
0030e1 2f65      	MOV  R22,R21
0030e2 2f52      	MOV  R21,R18
0030e3 914f      	POP  R20
0030e4 913f      	POP  R19
0030e5 912f      	POP  R18
0030e6 911f      	POP  R17
0030e7 900f      	POP  R0
0030e8 2366      	TST  R22
0030e9 f02a      	BRMI __MULF122
0030ea 0f55      	LSL  R21
0030eb 1fee      	ROL  R30
0030ec 1fff      	ROL  R31
0030ed 1f66      	ROL  R22
0030ee c002      	RJMP __MULF123
                 __MULF122:
0030ef 9573      	INC  R23
0030f0 f24b      	BRVS __MULF125
                 __MULF123:
0030f1 df29      	RCALL __ROUND_REPACK
0030f2 915f      	POP  R21
0030f3 9508      	RET
                 
                 __MULF127:
0030f4 0d10      	ADD  R17,R0
0030f5 1d21      	ADC  R18,R1
0030f6 1f39      	ADC  R19,R25
0030f7 c002      	RJMP __MULF128
                 __MULF126:
0030f8 0d20      	ADD  R18,R0
0030f9 1d31      	ADC  R19,R1
                 __MULF128:
0030fa 1f49      	ADC  R20,R25
0030fb 1f59      	ADC  R21,R25
0030fc 9508      	RET
                 
                 __DIVF21:
0030fd 935f      	PUSH R21
0030fe df38      	RCALL __UNPACK
0030ff 3870      	CPI  R23,0x80
003100 f421      	BRNE __DIVF210
003101 2011      	TST  R1
                 __DIVF211:
003102 f40a      	BRPL __DIVF219
003103 cf9f      	RJMP __MINRES
                 __DIVF219:
003104 cfa4      	RJMP __MAXRES
                 __DIVF210:
003105 3890      	CPI  R25,0x80
003106 f409      	BRNE __DIVF218
                 __DIVF217:
003107 cf95      	RJMP __ZERORES
                 __DIVF218:
003108 2401      	EOR  R0,R1
003109 9408      	SEC
00310a 0b97      	SBC  R25,R23
00310b f41b      	BRVC __DIVF216
00310c f3d4      	BRLT __DIVF217
00310d 2000      	TST  R0
00310e cff3      	RJMP __DIVF211
                 __DIVF216:
00310f 2f79      	MOV  R23,R25
003110 931f      	PUSH R17
003111 932f      	PUSH R18
003112 933f      	PUSH R19
003113 934f      	PUSH R20
003114 2411      	CLR  R1
003115 2711      	CLR  R17
003116 2722      	CLR  R18
003117 2733      	CLR  R19
003118 2744      	CLR  R20
003119 2755      	CLR  R21
00311a e290      	LDI  R25,32
                 __DIVF212:
00311b 17ae      	CP   R26,R30
00311c 07bf      	CPC  R27,R31
00311d 0786      	CPC  R24,R22
00311e 0741      	CPC  R20,R17
00311f f030      	BRLO __DIVF213
003120 1bae      	SUB  R26,R30
003121 0bbf      	SBC  R27,R31
003122 0b86      	SBC  R24,R22
003123 0b41      	SBC  R20,R17
003124 9408      	SEC
003125 c001      	RJMP __DIVF214
                 __DIVF213:
003126 9488      	CLC
                 __DIVF214:
003127 1f55      	ROL  R21
003128 1f22      	ROL  R18
003129 1f33      	ROL  R19
00312a 1c11      	ROL  R1
00312b 1faa      	ROL  R26
00312c 1fbb      	ROL  R27
00312d 1f88      	ROL  R24
00312e 1f44      	ROL  R20
00312f 959a      	DEC  R25
003130 f751      	BRNE __DIVF212
003131 01f9      	MOVW R30,R18
003132 2d61      	MOV  R22,R1
003133 914f      	POP  R20
003134 913f      	POP  R19
003135 912f      	POP  R18
003136 911f      	POP  R17
003137 2366      	TST  R22
003138 f032      	BRMI __DIVF215
003139 0f55      	LSL  R21
00313a 1fee      	ROL  R30
00313b 1fff      	ROL  R31
00313c 1f66      	ROL  R22
00313d 957a      	DEC  R23
00313e f243      	BRVS __DIVF217
                 __DIVF215:
00313f dedb      	RCALL __ROUND_REPACK
003140 915f      	POP  R21
003141 9508      	RET
                 
                 __SAVELOCR6:
003142 935a      	ST   -Y,R21
                 __SAVELOCR5:
003143 934a      	ST   -Y,R20
                 __SAVELOCR4:
003144 933a      	ST   -Y,R19
                 __SAVELOCR3:
003145 932a      	ST   -Y,R18
                 __SAVELOCR2:
003146 931a      	ST   -Y,R17
003147 930a      	ST   -Y,R16
003148 9508      	RET
                 
                 __LOADLOCR6:
003149 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00314a 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00314b 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00314c 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00314d 8119      	LDD  R17,Y+1
00314e 8108      	LD   R16,Y
00314f 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
003150 0fac      	ADD R26,R28
003151 1fbd      	ADC R27,R29
                 __INITLOC0:
003152 9005      	LPM  R0,Z+
003153 920d      	ST   X+,R0
003154 958a      	DEC  R24
003155 f7e1      	BRNE __INITLOC0
003156 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 : 116 r1 :  42 r2 :  16 r3 :   0 r4 :   2 r5 :   0 r6 :  11 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   7 
r16: 261 r17: 138 r18:  93 r19:  59 r20:  67 r21:  85 r22: 122 r23:  98 
r24: 108 r25:  52 r26: 641 r27: 248 r28:  85 r29:   2 r30:2594 r31: 777 
x  : 136 y  : 951 z  :  62 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
adc   :  55 add   :  55 adiw  :  95 and   :   7 andi  :  25 asr   :   4 
bclr  :   0 bld   :  18 brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 
break :   0 breq  : 179 brge  :  29 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :  22 brlt  :  37 brmi  :   7 brne  : 307 brpl  :  15 
brsh  :  44 brtc  :   7 brts  :   2 brvc  :   2 brvs  :   3 bset  :   0 
bst   :   2 call  :1204 cbi   :  49 cbr   :   0 clc   :   3 clh   :   0 
cli   :   3 cln   :   0 clr   :  70 cls   :   0 clt   :   8 clv   :   0 
clz   :   0 com   :  15 cp    :  58 cpc   :  68 cpi   : 414 cpse  :   0 
dec   :  34 des   :   0 eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 
icall :   0 ijmp  :   0 in    :  29 inc   :   7 jmp   : 111 ld    : 167 
ldd   : 322 ldi   :1143 lds   : 430 lpm   :  17 lsl   :  23 lsr   :   8 
mov   : 136 movw  : 185 mul   :  55 muls  :   3 mulsu :   0 neg   :   4 
nop   :   1 or    :   3 ori   :  22 out   :  59 pop   :  35 push  :  35 
rcall : 162 ret   : 240 reti  :   4 rjmp  : 462 rol   :  39 ror   :  18 
sbc   :  19 sbci  :  70 sbi   :  55 sbic  :  13 sbis  :  10 sbiw  :  66 
sbr   :   2 sbrc  :  12 sbrs  :  22 sec   :   5 seh   :   0 sei   :   3 
sen   :   0 ser   :  14 ses   :   0 set   :  22 sev   :   0 sez   :   0 
sleep :   0 spm   :   0 st    : 569 std   :  77 sts   : 244 sub   :  13 
subi  : 153 swap  :   2 tst   :  33 wdr   :   1 
Instructions used: 81 out of 112 (72.3%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0062ae  19928   5334  25262   32768  77.1%
[.dseg] 0x000060 0x0003fe      0    670    670    2048  32.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 13 warnings
